                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ECEN4330Lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _LCD_mainMenu
                                     23 	.globl _FIND
                                     24 	.globl _EDIT
                                     25 	.globl _EDIT_display
                                     26 	.globl _DUMP
                                     27 	.globl _DUMP_display
                                     28 	.globl _COUNT
                                     29 	.globl _MOVE
                                     30 	.globl _RAM_CHECK
                                     31 	.globl _inputDataSize
                                     32 	.globl _inputDataType
                                     33 	.globl _inputRead8
                                     34 	.globl _inputRead16
                                     35 	.globl _invalidInput
                                     36 	.globl _resetLCD
                                     37 	.globl _RAMread
                                     38 	.globl _RAMwrite
                                     39 	.globl _HEXtoASCII_16write
                                     40 	.globl _HEXtoASCII
                                     41 	.globl _ASCIItoHEX
                                     42 	.globl _drawChar
                                     43 	.globl _setRotation
                                     44 	.globl _UART_transmit
                                     45 	.globl _UART_Init
                                     46 	.globl _ISR_receive
                                     47 	.globl _CY
                                     48 	.globl _AC
                                     49 	.globl _F0
                                     50 	.globl _RS1
                                     51 	.globl _RS0
                                     52 	.globl _OV
                                     53 	.globl _FL
                                     54 	.globl _P
                                     55 	.globl _TF2
                                     56 	.globl _EXF2
                                     57 	.globl _RCLK
                                     58 	.globl _TCLK
                                     59 	.globl _EXEN2
                                     60 	.globl _TR2
                                     61 	.globl _C_T2
                                     62 	.globl _CP_RL2
                                     63 	.globl _T2CON_7
                                     64 	.globl _T2CON_6
                                     65 	.globl _T2CON_5
                                     66 	.globl _T2CON_4
                                     67 	.globl _T2CON_3
                                     68 	.globl _T2CON_2
                                     69 	.globl _T2CON_1
                                     70 	.globl _T2CON_0
                                     71 	.globl _PT2
                                     72 	.globl _PS
                                     73 	.globl _PT1
                                     74 	.globl _PX1
                                     75 	.globl _PT0
                                     76 	.globl _PX0
                                     77 	.globl _RD
                                     78 	.globl _WR
                                     79 	.globl _T1
                                     80 	.globl _T0
                                     81 	.globl _INT1
                                     82 	.globl _INT0
                                     83 	.globl _TXD
                                     84 	.globl _RXD
                                     85 	.globl _P3_7
                                     86 	.globl _P3_6
                                     87 	.globl _P3_5
                                     88 	.globl _P3_4
                                     89 	.globl _P3_3
                                     90 	.globl _P3_2
                                     91 	.globl _P3_1
                                     92 	.globl _P3_0
                                     93 	.globl _EA
                                     94 	.globl _ET2
                                     95 	.globl _ES
                                     96 	.globl _ET1
                                     97 	.globl _EX1
                                     98 	.globl _ET0
                                     99 	.globl _EX0
                                    100 	.globl _P2_7
                                    101 	.globl _P2_6
                                    102 	.globl _P2_5
                                    103 	.globl _P2_4
                                    104 	.globl _P2_3
                                    105 	.globl _P2_2
                                    106 	.globl _P2_1
                                    107 	.globl _P2_0
                                    108 	.globl _SM0
                                    109 	.globl _SM1
                                    110 	.globl _SM2
                                    111 	.globl _REN
                                    112 	.globl _TB8
                                    113 	.globl _RB8
                                    114 	.globl _TI
                                    115 	.globl _RI
                                    116 	.globl _T2EX
                                    117 	.globl _T2
                                    118 	.globl _P1_7
                                    119 	.globl _P1_6
                                    120 	.globl _P1_5
                                    121 	.globl _P1_4
                                    122 	.globl _P1_3
                                    123 	.globl _P1_2
                                    124 	.globl _P1_1
                                    125 	.globl _P1_0
                                    126 	.globl _TF1
                                    127 	.globl _TR1
                                    128 	.globl _TF0
                                    129 	.globl _TR0
                                    130 	.globl _IE1
                                    131 	.globl _IT1
                                    132 	.globl _IE0
                                    133 	.globl _IT0
                                    134 	.globl _P0_7
                                    135 	.globl _P0_6
                                    136 	.globl _P0_5
                                    137 	.globl _P0_4
                                    138 	.globl _P0_3
                                    139 	.globl _P0_2
                                    140 	.globl _P0_1
                                    141 	.globl _P0_0
                                    142 	.globl _B
                                    143 	.globl _A
                                    144 	.globl _ACC
                                    145 	.globl _PSW
                                    146 	.globl _TH2
                                    147 	.globl _TL2
                                    148 	.globl _RCAP2H
                                    149 	.globl _RCAP2L
                                    150 	.globl _T2MOD
                                    151 	.globl _T2CON
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _drawChar_PARM_6
                                    171 	.globl _drawChar_PARM_5
                                    172 	.globl _drawChar_PARM_4
                                    173 	.globl _drawChar_PARM_3
                                    174 	.globl _drawChar_PARM_2
                                    175 	.globl _fillRect_PARM_5
                                    176 	.globl _fillRect_PARM_4
                                    177 	.globl _fillRect_PARM_3
                                    178 	.globl _fillRect_PARM_2
                                    179 	.globl _drawPixel_PARM_3
                                    180 	.globl _drawPixel_PARM_2
                                    181 	.globl _rtcWrite_PARM_2
                                    182 	.globl _received_flag
                                    183 	.globl _received_byte
                                    184 	.globl _ts
                                    185 	.globl _y
                                    186 	.globl _x
                                    187 	.globl _textSizeHold
                                    188 	.globl _yCursorHold
                                    189 	.globl _xCursorHold
                                    190 	.globl _endAddrCalc
                                    191 	.globl _count
                                    192 	.globl _ASCII
                                    193 	.globl _byte1
                                    194 	.globl _byte
                                    195 	.globl _currAddr1
                                    196 	.globl _currAddr0
                                    197 	.globl _addr3
                                    198 	.globl _addr2
                                    199 	.globl _addr1
                                    200 	.globl _addr0
                                    201 	.globl _data
                                    202 	.globl _scrollEnd
                                    203 	.globl _dataEnd
                                    204 	.globl _validInput
                                    205 	.globl _dataSize
                                    206 	.globl _dataType
                                    207 	.globl _input8
                                    208 	.globl _input16
                                    209 	.globl _key
                                    210 	.globl __height
                                    211 	.globl __width
                                    212 	.globl _textbgcolor
                                    213 	.globl _textcolor
                                    214 	.globl _rotation
                                    215 	.globl _textsize
                                    216 	.globl _cursor_y
                                    217 	.globl _cursor_x
                                    218 	.globl _read_ram_address
                                    219 	.globl _seg7_address
                                    220 	.globl _lcd_address
                                    221 	.globl _rowloc
                                    222 	.globl _colloc
                                    223 	.globl _delay
                                    224 	.globl _writeRegister8
                                    225 	.globl _writeRegister16
                                    226 	.globl _rtcInit
                                    227 	.globl _rtcBusy
                                    228 	.globl _rtcCmd
                                    229 	.globl _rtcWrite
                                    230 	.globl _rtcRead
                                    231 	.globl _rtcPrint
                                    232 	.globl _setCursor
                                    233 	.globl _setTextColor
                                    234 	.globl _setTextSize
                                    235 	.globl _setAddress
                                    236 	.globl _TFT_LCD_INIT
                                    237 	.globl _drawPixel
                                    238 	.globl _fillRect
                                    239 	.globl _fillScreen
                                    240 	.globl _write
                                    241 	.globl _LCD_string_write
                                    242 	.globl _keyDetect
                                    243 	.globl _HEXtoASCII_8write
                                    244 	.globl _testRAM
                                    245 	.globl _FIND_display
                                    246 ;--------------------------------------------------------
                                    247 ; special function registers
                                    248 ;--------------------------------------------------------
                                    249 	.area RSEG    (ABS,DATA)
      000000                        250 	.org 0x0000
                           000080   251 _P0	=	0x0080
                           000081   252 _SP	=	0x0081
                           000082   253 _DPL	=	0x0082
                           000083   254 _DPH	=	0x0083
                           000087   255 _PCON	=	0x0087
                           000088   256 _TCON	=	0x0088
                           000089   257 _TMOD	=	0x0089
                           00008A   258 _TL0	=	0x008a
                           00008B   259 _TL1	=	0x008b
                           00008C   260 _TH0	=	0x008c
                           00008D   261 _TH1	=	0x008d
                           000090   262 _P1	=	0x0090
                           000098   263 _SCON	=	0x0098
                           000099   264 _SBUF	=	0x0099
                           0000A0   265 _P2	=	0x00a0
                           0000A8   266 _IE	=	0x00a8
                           0000B0   267 _P3	=	0x00b0
                           0000B8   268 _IP	=	0x00b8
                           0000C8   269 _T2CON	=	0x00c8
                           0000C9   270 _T2MOD	=	0x00c9
                           0000CA   271 _RCAP2L	=	0x00ca
                           0000CB   272 _RCAP2H	=	0x00cb
                           0000CC   273 _TL2	=	0x00cc
                           0000CD   274 _TH2	=	0x00cd
                           0000D0   275 _PSW	=	0x00d0
                           0000E0   276 _ACC	=	0x00e0
                           0000E0   277 _A	=	0x00e0
                           0000F0   278 _B	=	0x00f0
                                    279 ;--------------------------------------------------------
                                    280 ; special function bits
                                    281 ;--------------------------------------------------------
                                    282 	.area RSEG    (ABS,DATA)
      000000                        283 	.org 0x0000
                           000080   284 _P0_0	=	0x0080
                           000081   285 _P0_1	=	0x0081
                           000082   286 _P0_2	=	0x0082
                           000083   287 _P0_3	=	0x0083
                           000084   288 _P0_4	=	0x0084
                           000085   289 _P0_5	=	0x0085
                           000086   290 _P0_6	=	0x0086
                           000087   291 _P0_7	=	0x0087
                           000088   292 _IT0	=	0x0088
                           000089   293 _IE0	=	0x0089
                           00008A   294 _IT1	=	0x008a
                           00008B   295 _IE1	=	0x008b
                           00008C   296 _TR0	=	0x008c
                           00008D   297 _TF0	=	0x008d
                           00008E   298 _TR1	=	0x008e
                           00008F   299 _TF1	=	0x008f
                           000090   300 _P1_0	=	0x0090
                           000091   301 _P1_1	=	0x0091
                           000092   302 _P1_2	=	0x0092
                           000093   303 _P1_3	=	0x0093
                           000094   304 _P1_4	=	0x0094
                           000095   305 _P1_5	=	0x0095
                           000096   306 _P1_6	=	0x0096
                           000097   307 _P1_7	=	0x0097
                           000090   308 _T2	=	0x0090
                           000091   309 _T2EX	=	0x0091
                           000098   310 _RI	=	0x0098
                           000099   311 _TI	=	0x0099
                           00009A   312 _RB8	=	0x009a
                           00009B   313 _TB8	=	0x009b
                           00009C   314 _REN	=	0x009c
                           00009D   315 _SM2	=	0x009d
                           00009E   316 _SM1	=	0x009e
                           00009F   317 _SM0	=	0x009f
                           0000A0   318 _P2_0	=	0x00a0
                           0000A1   319 _P2_1	=	0x00a1
                           0000A2   320 _P2_2	=	0x00a2
                           0000A3   321 _P2_3	=	0x00a3
                           0000A4   322 _P2_4	=	0x00a4
                           0000A5   323 _P2_5	=	0x00a5
                           0000A6   324 _P2_6	=	0x00a6
                           0000A7   325 _P2_7	=	0x00a7
                           0000A8   326 _EX0	=	0x00a8
                           0000A9   327 _ET0	=	0x00a9
                           0000AA   328 _EX1	=	0x00aa
                           0000AB   329 _ET1	=	0x00ab
                           0000AC   330 _ES	=	0x00ac
                           0000AD   331 _ET2	=	0x00ad
                           0000AF   332 _EA	=	0x00af
                           0000B0   333 _P3_0	=	0x00b0
                           0000B1   334 _P3_1	=	0x00b1
                           0000B2   335 _P3_2	=	0x00b2
                           0000B3   336 _P3_3	=	0x00b3
                           0000B4   337 _P3_4	=	0x00b4
                           0000B5   338 _P3_5	=	0x00b5
                           0000B6   339 _P3_6	=	0x00b6
                           0000B7   340 _P3_7	=	0x00b7
                           0000B0   341 _RXD	=	0x00b0
                           0000B1   342 _TXD	=	0x00b1
                           0000B2   343 _INT0	=	0x00b2
                           0000B3   344 _INT1	=	0x00b3
                           0000B4   345 _T0	=	0x00b4
                           0000B5   346 _T1	=	0x00b5
                           0000B6   347 _WR	=	0x00b6
                           0000B7   348 _RD	=	0x00b7
                           0000B8   349 _PX0	=	0x00b8
                           0000B9   350 _PT0	=	0x00b9
                           0000BA   351 _PX1	=	0x00ba
                           0000BB   352 _PT1	=	0x00bb
                           0000BC   353 _PS	=	0x00bc
                           0000BD   354 _PT2	=	0x00bd
                           0000C8   355 _T2CON_0	=	0x00c8
                           0000C9   356 _T2CON_1	=	0x00c9
                           0000CA   357 _T2CON_2	=	0x00ca
                           0000CB   358 _T2CON_3	=	0x00cb
                           0000CC   359 _T2CON_4	=	0x00cc
                           0000CD   360 _T2CON_5	=	0x00cd
                           0000CE   361 _T2CON_6	=	0x00ce
                           0000CF   362 _T2CON_7	=	0x00cf
                           0000C8   363 _CP_RL2	=	0x00c8
                           0000C9   364 _C_T2	=	0x00c9
                           0000CA   365 _TR2	=	0x00ca
                           0000CB   366 _EXEN2	=	0x00cb
                           0000CC   367 _TCLK	=	0x00cc
                           0000CD   368 _RCLK	=	0x00cd
                           0000CE   369 _EXF2	=	0x00ce
                           0000CF   370 _TF2	=	0x00cf
                           0000D0   371 _P	=	0x00d0
                           0000D1   372 _FL	=	0x00d1
                           0000D2   373 _OV	=	0x00d2
                           0000D3   374 _RS0	=	0x00d3
                           0000D4   375 _RS1	=	0x00d4
                           0000D5   376 _F0	=	0x00d5
                           0000D6   377 _AC	=	0x00d6
                           0000D7   378 _CY	=	0x00d7
                                    379 ;--------------------------------------------------------
                                    380 ; overlayable register banks
                                    381 ;--------------------------------------------------------
                                    382 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        383 	.ds 8
                                    384 ;--------------------------------------------------------
                                    385 ; internal ram data
                                    386 ;--------------------------------------------------------
                                    387 	.area DSEG    (DATA)
      000000                        388 _colloc::
      000000                        389 	.ds 1
      000001                        390 _rowloc::
      000001                        391 	.ds 1
      000002                        392 _lcd_address::
      000002                        393 	.ds 2
      000004                        394 _seg7_address::
      000004                        395 	.ds 2
      000006                        396 _read_ram_address::
      000006                        397 	.ds 2
      000008                        398 _cursor_x::
      000008                        399 	.ds 2
      00000A                        400 _cursor_y::
      00000A                        401 	.ds 2
      00000C                        402 _textsize::
      00000C                        403 	.ds 1
      00000D                        404 _rotation::
      00000D                        405 	.ds 1
      00000E                        406 _textcolor::
      00000E                        407 	.ds 2
      000010                        408 _textbgcolor::
      000010                        409 	.ds 2
      000012                        410 __width::
      000012                        411 	.ds 2
      000014                        412 __height::
      000014                        413 	.ds 2
      000016                        414 _key::
      000016                        415 	.ds 1
      000017                        416 _input16::
      000017                        417 	.ds 2
      000019                        418 _input8::
      000019                        419 	.ds 1
      00001A                        420 _dataType::
      00001A                        421 	.ds 1
      00001B                        422 _dataSize::
      00001B                        423 	.ds 2
      00001D                        424 _validInput::
      00001D                        425 	.ds 1
      00001E                        426 _dataEnd::
      00001E                        427 	.ds 1
      00001F                        428 _scrollEnd::
      00001F                        429 	.ds 1
      000020                        430 _data::
      000020                        431 	.ds 1
      000021                        432 _addr0::
      000021                        433 	.ds 2
      000023                        434 _addr1::
      000023                        435 	.ds 2
      000025                        436 _addr2::
      000025                        437 	.ds 2
      000027                        438 _addr3::
      000027                        439 	.ds 2
      000029                        440 _currAddr0::
      000029                        441 	.ds 2
      00002B                        442 _currAddr1::
      00002B                        443 	.ds 2
      00002D                        444 _byte::
      00002D                        445 	.ds 2
      00002F                        446 _byte1::
      00002F                        447 	.ds 2
      000031                        448 _ASCII::
      000031                        449 	.ds 1
      000032                        450 _count::
      000032                        451 	.ds 2
      000034                        452 _endAddrCalc::
      000034                        453 	.ds 4
      000038                        454 _xCursorHold::
      000038                        455 	.ds 1
      000039                        456 _yCursorHold::
      000039                        457 	.ds 1
      00003A                        458 _textSizeHold::
      00003A                        459 	.ds 1
      00003B                        460 _x::
      00003B                        461 	.ds 1
      00003C                        462 _y::
      00003C                        463 	.ds 1
      00003D                        464 _ts::
      00003D                        465 	.ds 1
      00003E                        466 _received_byte::
      00003E                        467 	.ds 1
      00003F                        468 _received_flag::
      00003F                        469 	.ds 1
      000040                        470 _rtcWrite_PARM_2:
      000040                        471 	.ds 1
      000041                        472 _drawPixel_PARM_2:
      000041                        473 	.ds 2
      000043                        474 _drawPixel_PARM_3:
      000043                        475 	.ds 2
      000045                        476 _fillRect_PARM_2:
      000045                        477 	.ds 2
      000047                        478 _fillRect_PARM_3:
      000047                        479 	.ds 2
      000049                        480 _fillRect_PARM_4:
      000049                        481 	.ds 2
      00004B                        482 _fillRect_PARM_5:
      00004B                        483 	.ds 2
      00004D                        484 _drawChar_PARM_2:
      00004D                        485 	.ds 2
      00004F                        486 _drawChar_PARM_3:
      00004F                        487 	.ds 1
      000050                        488 _drawChar_PARM_4:
      000050                        489 	.ds 2
      000052                        490 _drawChar_PARM_5:
      000052                        491 	.ds 2
      000054                        492 _drawChar_PARM_6:
      000054                        493 	.ds 1
      000055                        494 _drawChar_x_65536_311:
      000055                        495 	.ds 2
      000057                        496 _drawChar_line_196608_315:
      000057                        497 	.ds 1
      000058                        498 _drawChar_sloc1_1_0:
      000058                        499 	.ds 2
                                    500 ;--------------------------------------------------------
                                    501 ; overlayable items in internal ram 
                                    502 ;--------------------------------------------------------
                                    503 	.area	OSEG    (OVR,DATA)
                                    504 	.area	OSEG    (OVR,DATA)
      000000                        505 _writeRegister8_PARM_2:
      000000                        506 	.ds 1
                                    507 	.area	OSEG    (OVR,DATA)
      000000                        508 _writeRegister16_PARM_2:
      000000                        509 	.ds 2
                                    510 	.area	OSEG    (OVR,DATA)
                                    511 	.area	OSEG    (OVR,DATA)
      000000                        512 _rtcCmd_PARM_2:
      000000                        513 	.ds 1
                                    514 	.area	OSEG    (OVR,DATA)
      000000                        515 _setCursor_PARM_2:
      000000                        516 	.ds 2
                                    517 	.area	OSEG    (OVR,DATA)
      000000                        518 _setTextColor_PARM_2:
      000000                        519 	.ds 2
                                    520 	.area	OSEG    (OVR,DATA)
                                    521 	.area	OSEG    (OVR,DATA)
      000000                        522 _setAddress_PARM_2:
      000000                        523 	.ds 2
      000002                        524 _setAddress_PARM_3:
      000002                        525 	.ds 2
      000004                        526 _setAddress_PARM_4:
      000004                        527 	.ds 2
                                    528 	.area	OSEG    (OVR,DATA)
                                    529 	.area	OSEG    (OVR,DATA)
                                    530 	.area	OSEG    (OVR,DATA)
      000000                        531 _RAMwrite_PARM_2:
      000000                        532 	.ds 1
                                    533 	.area	OSEG    (OVR,DATA)
                                    534 	.area	OSEG    (OVR,DATA)
                                    535 ;--------------------------------------------------------
                                    536 ; Stack segment in internal ram 
                                    537 ;--------------------------------------------------------
                                    538 	.area	SSEG
      000000                        539 __start__stack:
      000000                        540 	.ds	1
                                    541 
                                    542 ;--------------------------------------------------------
                                    543 ; indirectly addressable internal ram data
                                    544 ;--------------------------------------------------------
                                    545 	.area ISEG    (DATA)
                                    546 ;--------------------------------------------------------
                                    547 ; absolute internal ram data
                                    548 ;--------------------------------------------------------
                                    549 	.area IABS    (ABS,DATA)
                                    550 	.area IABS    (ABS,DATA)
                                    551 ;--------------------------------------------------------
                                    552 ; bit data
                                    553 ;--------------------------------------------------------
                                    554 	.area BSEG    (BIT)
      000000                        555 _drawChar_sloc0_1_0:
      000000                        556 	.ds 1
                                    557 ;--------------------------------------------------------
                                    558 ; paged external ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area PSEG    (PAG,XDATA)
                                    561 ;--------------------------------------------------------
                                    562 ; external ram data
                                    563 ;--------------------------------------------------------
                                    564 	.area XSEG    (XDATA)
                                    565 ;--------------------------------------------------------
                                    566 ; absolute external ram data
                                    567 ;--------------------------------------------------------
                                    568 	.area XABS    (ABS,XDATA)
                                    569 ;--------------------------------------------------------
                                    570 ; external initialized ram data
                                    571 ;--------------------------------------------------------
                                    572 	.area XISEG   (XDATA)
                                    573 	.area HOME    (CODE)
                                    574 	.area GSINIT0 (CODE)
                                    575 	.area GSINIT1 (CODE)
                                    576 	.area GSINIT2 (CODE)
                                    577 	.area GSINIT3 (CODE)
                                    578 	.area GSINIT4 (CODE)
                                    579 	.area GSINIT5 (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 	.area GSFINAL (CODE)
                                    582 	.area CSEG    (CODE)
                                    583 ;--------------------------------------------------------
                                    584 ; interrupt vector 
                                    585 ;--------------------------------------------------------
                                    586 	.area HOME    (CODE)
      000000                        587 __interrupt_vect:
      000000 02r00r00         [24]  588 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  589 	reti
      000004                        590 	.ds	7
      00000B 32               [24]  591 	reti
      00000C                        592 	.ds	7
      000013 32               [24]  593 	reti
      000014                        594 	.ds	7
      00001B 32               [24]  595 	reti
      00001C                        596 	.ds	7
      000023 02r00r00         [24]  597 	ljmp	_ISR_receive
                                    598 ;--------------------------------------------------------
                                    599 ; global & static initialisations
                                    600 ;--------------------------------------------------------
                                    601 	.area HOME    (CODE)
                                    602 	.area GSINIT  (CODE)
                                    603 	.area GSFINAL (CODE)
                                    604 	.area GSINIT  (CODE)
                                    605 	.globl __sdcc_gsinit_startup
                                    606 	.globl __sdcc_program_startup
                                    607 	.globl __start__stack
                                    608 	.globl __mcs51_genXINIT
                                    609 	.globl __mcs51_genXRAMCLEAR
                                    610 	.globl __mcs51_genRAMCLEAR
                                    611 ;	ECEN4330Lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  612 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  613 	mov	(_lcd_address + 1),#0x40
                                    614 ;	ECEN4330Lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  615 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  616 	mov	(_seg7_address + 1),#0x80
                                    617 ;	ECEN4330Lab7.c:95: unsigned int count = 0;
      00000C E4               [12]  618 	clr	a
      00000D F5*32            [12]  619 	mov	_count,a
      00000F F5*33            [12]  620 	mov	(_count + 1),a
                                    621 ;	ECEN4330Lab7.c:100: volatile unsigned char received_byte = 0;
                                    622 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000011 F5*3E            [12]  623 	mov	_received_byte,a
                                    624 ;	ECEN4330Lab7.c:101: volatile unsigned char received_flag = 0;
                                    625 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      000013 F5*3F            [12]  626 	mov	_received_flag,a
                                    627 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  628 	ljmp	__sdcc_program_startup
                                    629 ;--------------------------------------------------------
                                    630 ; Home
                                    631 ;--------------------------------------------------------
                                    632 	.area HOME    (CODE)
                                    633 	.area HOME    (CODE)
      000026                        634 __sdcc_program_startup:
      000026 02r21rBC         [24]  635 	ljmp	_main
                                    636 ;	return from main will return to caller
                                    637 ;--------------------------------------------------------
                                    638 ; code
                                    639 ;--------------------------------------------------------
                                    640 	.area CSEG    (CODE)
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'ISR_receive'
                                    643 ;------------------------------------------------------------
                                    644 ;	ECEN4330Lab7.c:124: void ISR_receive() __interrupt (4) {
                                    645 ;	-----------------------------------------
                                    646 ;	 function ISR_receive
                                    647 ;	-----------------------------------------
      000000                        648 _ISR_receive:
                           000007   649 	ar7 = 0x07
                           000006   650 	ar6 = 0x06
                           000005   651 	ar5 = 0x05
                           000004   652 	ar4 = 0x04
                           000003   653 	ar3 = 0x03
                           000002   654 	ar2 = 0x02
                           000001   655 	ar1 = 0x01
                           000000   656 	ar0 = 0x00
                                    657 ;	ECEN4330Lab7.c:125: if (RI == 1){
      000000 30 98 08         [24]  658 	jnb	_RI,00103$
                                    659 ;	ECEN4330Lab7.c:126: received_byte = SBUF;
      000003 85 99*3E         [24]  660 	mov	_received_byte,_SBUF
                                    661 ;	ECEN4330Lab7.c:127: RI = 0;
                                    662 ;	assignBit
      000006 C2 98            [12]  663 	clr	_RI
                                    664 ;	ECEN4330Lab7.c:128: received_flag = 1;
      000008 75*3F 01         [24]  665 	mov	_received_flag,#0x01
      00000B                        666 00103$:
                                    667 ;	ECEN4330Lab7.c:130: }
      00000B 32               [24]  668 	reti
                                    669 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    670 ;	eliminated unneeded push/pop not_psw
                                    671 ;	eliminated unneeded push/pop dpl
                                    672 ;	eliminated unneeded push/pop dph
                                    673 ;	eliminated unneeded push/pop b
                                    674 ;	eliminated unneeded push/pop acc
                                    675 ;------------------------------------------------------------
                                    676 ;Allocation info for local variables in function 'UART_Init'
                                    677 ;------------------------------------------------------------
                                    678 ;	ECEN4330Lab7.c:138: void UART_Init(){
                                    679 ;	-----------------------------------------
                                    680 ;	 function UART_Init
                                    681 ;	-----------------------------------------
      00000C                        682 _UART_Init:
                                    683 ;	ECEN4330Lab7.c:139: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      00000C 75 98 50         [24]  684 	mov	_SCON,#0x50
                                    685 ;	ECEN4330Lab7.c:140: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      00000F 75 89 20         [24]  686 	mov	_TMOD,#0x20
                                    687 ;	ECEN4330Lab7.c:141: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      000012 75 8D FD         [24]  688 	mov	_TH1,#0xfd
                                    689 ;	ECEN4330Lab7.c:142: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    690 ;	assignBit
      000015 D2 8E            [12]  691 	setb	_TR1
                                    692 ;	ECEN4330Lab7.c:143: ES  = 1;      // Enable Serial Interrupt
                                    693 ;	assignBit
      000017 D2 AC            [12]  694 	setb	_ES
                                    695 ;	ECEN4330Lab7.c:144: EA  = 1;      // Enable Global Interrupt bit
                                    696 ;	assignBit
      000019 D2 AF            [12]  697 	setb	_EA
                                    698 ;	ECEN4330Lab7.c:145: }
      00001B 22               [24]  699 	ret
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'UART_transmit'
                                    702 ;------------------------------------------------------------
                                    703 ;	ECEN4330Lab7.c:153: void UART_transmit(){
                                    704 ;	-----------------------------------------
                                    705 ;	 function UART_transmit
                                    706 ;	-----------------------------------------
      00001C                        707 _UART_transmit:
                                    708 ;	ECEN4330Lab7.c:154: SBUF = byte;
      00001C 85*2D 99         [24]  709 	mov	_SBUF,_byte
                                    710 ;	ECEN4330Lab7.c:155: while(TI == 1);
      00001F                        711 00101$:
      00001F 20 99 FD         [24]  712 	jb	_TI,00101$
                                    713 ;	ECEN4330Lab7.c:156: TI = 0;
                                    714 ;	assignBit
      000022 C2 99            [12]  715 	clr	_TI
                                    716 ;	ECEN4330Lab7.c:157: }
      000024 22               [24]  717 	ret
                                    718 ;------------------------------------------------------------
                                    719 ;Allocation info for local variables in function 'delay'
                                    720 ;------------------------------------------------------------
                                    721 ;d                         Allocated to registers r6 r7 
                                    722 ;i                         Allocated to registers r4 r5 
                                    723 ;j                         Allocated to registers r2 r3 
                                    724 ;------------------------------------------------------------
                                    725 ;	ECEN4330Lab7.c:191: void delay (int d) /// x 1ms
                                    726 ;	-----------------------------------------
                                    727 ;	 function delay
                                    728 ;	-----------------------------------------
      000025                        729 _delay:
      000025 AE 82            [24]  730 	mov	r6,dpl
      000027 AF 83            [24]  731 	mov	r7,dph
                                    732 ;	ECEN4330Lab7.c:194: for (i=0;i<d;i++)
      000029 7C 00            [12]  733 	mov	r4,#0x00
      00002B 7D 00            [12]  734 	mov	r5,#0x00
      00002D                        735 00107$:
      00002D C3               [12]  736 	clr	c
      00002E EC               [12]  737 	mov	a,r4
      00002F 9E               [12]  738 	subb	a,r6
      000030 ED               [12]  739 	mov	a,r5
      000031 64 80            [12]  740 	xrl	a,#0x80
      000033 8F F0            [24]  741 	mov	b,r7
      000035 63 F0 80         [24]  742 	xrl	b,#0x80
      000038 95 F0            [12]  743 	subb	a,b
      00003A 50 14            [24]  744 	jnc	00109$
                                    745 ;	ECEN4330Lab7.c:196: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  746 	mov	r2,#0xe8
      00003E 7B 03            [12]  747 	mov	r3,#0x03
      000040                        748 00105$:
      000040 1A               [12]  749 	dec	r2
      000041 BA FF 01         [24]  750 	cjne	r2,#0xff,00130$
      000044 1B               [12]  751 	dec	r3
      000045                        752 00130$:
      000045 EA               [12]  753 	mov	a,r2
      000046 4B               [12]  754 	orl	a,r3
      000047 70 F7            [24]  755 	jnz	00105$
                                    756 ;	ECEN4330Lab7.c:194: for (i=0;i<d;i++)
      000049 0C               [12]  757 	inc	r4
      00004A BC 00 E0         [24]  758 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  759 	inc	r5
      00004E 80 DD            [24]  760 	sjmp	00107$
      000050                        761 00109$:
                                    762 ;	ECEN4330Lab7.c:198: }
      000050 22               [24]  763 	ret
                                    764 ;------------------------------------------------------------
                                    765 ;Allocation info for local variables in function 'writeRegister8'
                                    766 ;------------------------------------------------------------
                                    767 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    768 ;a                         Allocated to registers r7 
                                    769 ;------------------------------------------------------------
                                    770 ;	ECEN4330Lab7.c:206: void writeRegister8(u8 a, u8 d) {
                                    771 ;	-----------------------------------------
                                    772 ;	 function writeRegister8
                                    773 ;	-----------------------------------------
      000051                        774 _writeRegister8:
      000051 AF 82            [24]  775 	mov	r7,dpl
                                    776 ;	ECEN4330Lab7.c:207: CD = __CMD__;
                                    777 ;	assignBit
      000053 C2 B5            [12]  778 	clr	_P3_5
                                    779 ;	ECEN4330Lab7.c:208: write8(a);
                                    780 ;	assignBit
      000055 D2 B4            [12]  781 	setb	_P3_4
      000057 85*02 82         [24]  782 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  783 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  784 	mov	a,r7
      00005E F0               [24]  785 	movx	@dptr,a
                                    786 ;	assignBit
      00005F C2 B4            [12]  787 	clr	_P3_4
                                    788 ;	ECEN4330Lab7.c:209: CD = __DATA__;
                                    789 ;	assignBit
      000061 D2 B5            [12]  790 	setb	_P3_5
                                    791 ;	ECEN4330Lab7.c:210: write8(d);
                                    792 ;	assignBit
      000063 D2 B4            [12]  793 	setb	_P3_4
      000065 85*02 82         [24]  794 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  795 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  796 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  797 	movx	@dptr,a
                                    798 ;	assignBit
      00006E C2 B4            [12]  799 	clr	_P3_4
                                    800 ;	ECEN4330Lab7.c:211: }
      000070 22               [24]  801 	ret
                                    802 ;------------------------------------------------------------
                                    803 ;Allocation info for local variables in function 'writeRegister16'
                                    804 ;------------------------------------------------------------
                                    805 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    806 ;a                         Allocated to registers r6 r7 
                                    807 ;hi                        Allocated to registers r6 r7 
                                    808 ;lo                        Allocated to registers r4 r5 
                                    809 ;------------------------------------------------------------
                                    810 ;	ECEN4330Lab7.c:219: void writeRegister16(u16 a, u16 d){
                                    811 ;	-----------------------------------------
                                    812 ;	 function writeRegister16
                                    813 ;	-----------------------------------------
      000071                        814 _writeRegister16:
      000071 AE 82            [24]  815 	mov	r6,dpl
      000073 AF 83            [24]  816 	mov	r7,dph
                                    817 ;	ECEN4330Lab7.c:221: hi = (a) >> 8;
      000075 8F 04            [24]  818 	mov	ar4,r7
                                    819 ;	ECEN4330Lab7.c:222: lo = (a);
                                    820 ;	ECEN4330Lab7.c:223: write8Reg(hi);
                                    821 ;	assignBit
      000077 C2 B5            [12]  822 	clr	_P3_5
                                    823 ;	assignBit
      000079 D2 B4            [12]  824 	setb	_P3_4
      00007B 85*02 82         [24]  825 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  826 	mov	dph,(_lcd_address + 1)
      000081 EC               [12]  827 	mov	a,r4
      000082 F0               [24]  828 	movx	@dptr,a
                                    829 ;	assignBit
      000083 C2 B4            [12]  830 	clr	_P3_4
                                    831 ;	ECEN4330Lab7.c:224: write8Reg(lo);
                                    832 ;	assignBit
      000085 C2 B5            [12]  833 	clr	_P3_5
                                    834 ;	assignBit
      000087 D2 B4            [12]  835 	setb	_P3_4
      000089 85*02 82         [24]  836 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  837 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  838 	mov	a,r6
      000090 F0               [24]  839 	movx	@dptr,a
                                    840 ;	assignBit
      000091 C2 B4            [12]  841 	clr	_P3_4
                                    842 ;	ECEN4330Lab7.c:225: hi = (d) >> 8;
      000093 AE*01            [24]  843 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                    844 ;	ECEN4330Lab7.c:226: lo = (d);
      000095 AC*00            [24]  845 	mov	r4,_writeRegister16_PARM_2
                                    846 ;	ECEN4330Lab7.c:227: CD = 1 ;
                                    847 ;	assignBit
      000097 D2 B5            [12]  848 	setb	_P3_5
                                    849 ;	ECEN4330Lab7.c:228: write8Data(hi);
                                    850 ;	assignBit
      000099 D2 B5            [12]  851 	setb	_P3_5
                                    852 ;	assignBit
      00009B D2 B4            [12]  853 	setb	_P3_4
      00009D 85*02 82         [24]  854 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  855 	mov	dph,(_lcd_address + 1)
      0000A3 EE               [12]  856 	mov	a,r6
      0000A4 F0               [24]  857 	movx	@dptr,a
                                    858 ;	assignBit
      0000A5 C2 B4            [12]  859 	clr	_P3_4
                                    860 ;	ECEN4330Lab7.c:229: write8Data(lo);
                                    861 ;	assignBit
      0000A7 D2 B5            [12]  862 	setb	_P3_5
                                    863 ;	assignBit
      0000A9 D2 B4            [12]  864 	setb	_P3_4
      0000AB 85*02 82         [24]  865 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  866 	mov	dph,(_lcd_address + 1)
      0000B1 EC               [12]  867 	mov	a,r4
      0000B2 F0               [24]  868 	movx	@dptr,a
                                    869 ;	assignBit
      0000B3 C2 B4            [12]  870 	clr	_P3_4
                                    871 ;	ECEN4330Lab7.c:230: }
      0000B5 22               [24]  872 	ret
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function 'rtcInit'
                                    875 ;------------------------------------------------------------
                                    876 ;i                         Allocated with name '_rtcInit_i_65536_63'
                                    877 ;------------------------------------------------------------
                                    878 ;	ECEN4330Lab7.c:252: void rtcInit(void) {
                                    879 ;	-----------------------------------------
                                    880 ;	 function rtcInit
                                    881 ;	-----------------------------------------
      0000B6                        882 _rtcInit:
                                    883 ;	ECEN4330Lab7.c:255: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      0000B6 75*00 07         [24]  884 	mov	_rtcCmd_PARM_2,#0x07
      0000B9 90 00 0F         [24]  885 	mov	dptr,#0x000f
      0000BC 12r00rFC         [24]  886 	lcall	_rtcCmd
                                    887 ;	ECEN4330Lab7.c:258: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000BF 7E 00            [12]  888 	mov	r6,#0x00
      0000C1 7F 00            [12]  889 	mov	r7,#0x00
      0000C3                        890 00102$:
                                    891 ;	ECEN4330Lab7.c:259: rtcWrite(i, 0x00);
      0000C3 75*40 00         [24]  892 	mov	_rtcWrite_PARM_2,#0x00
      0000C6 8E 82            [24]  893 	mov	dpl,r6
      0000C8 8F 83            [24]  894 	mov	dph,r7
      0000CA C0 07            [24]  895 	push	ar7
      0000CC C0 06            [24]  896 	push	ar6
      0000CE 12r01r05         [24]  897 	lcall	_rtcWrite
      0000D1 D0 06            [24]  898 	pop	ar6
      0000D3 D0 07            [24]  899 	pop	ar7
                                    900 ;	ECEN4330Lab7.c:258: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000D5 0E               [12]  901 	inc	r6
      0000D6 BE 00 01         [24]  902 	cjne	r6,#0x00,00115$
      0000D9 0F               [12]  903 	inc	r7
      0000DA                        904 00115$:
      0000DA C3               [12]  905 	clr	c
      0000DB EE               [12]  906 	mov	a,r6
      0000DC 94 0D            [12]  907 	subb	a,#0x0d
      0000DE EF               [12]  908 	mov	a,r7
      0000DF 94 00            [12]  909 	subb	a,#0x00
      0000E1 40 E0            [24]  910 	jc	00102$
                                    911 ;	ECEN4330Lab7.c:262: rtcCmd(__REG_F__, __HR_24__);
      0000E3 75*00 04         [24]  912 	mov	_rtcCmd_PARM_2,#0x04
      0000E6 90 00 0F         [24]  913 	mov	dptr,#0x000f
                                    914 ;	ECEN4330Lab7.c:263: }
      0000E9 02r00rFC         [24]  915 	ljmp	_rtcCmd
                                    916 ;------------------------------------------------------------
                                    917 ;Allocation info for local variables in function 'rtcBusy'
                                    918 ;------------------------------------------------------------
                                    919 ;__1310720001              Allocated to registers 
                                    920 ;map_address               Allocated to registers 
                                    921 ;__1310720002              Allocated to registers 
                                    922 ;map_address               Allocated to registers 
                                    923 ;------------------------------------------------------------
                                    924 ;	ECEN4330Lab7.c:271: void rtcBusy(void) {
                                    925 ;	-----------------------------------------
                                    926 ;	 function rtcBusy
                                    927 ;	-----------------------------------------
      0000EC                        928 _rtcBusy:
                                    929 ;	ECEN4330Lab7.c:273: while((ioread8(map_address) & 0x02));
      0000EC                        930 00101$:
                                    931 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                    932 ;	assignBit
      0000EC D2 B4            [12]  933 	setb	_P3_4
                                    934 ;	ECEN4330Lab7.c:180: data = *map_address;
      0000EE 90 00 0D         [24]  935 	mov	dptr,#0x000d
      0000F1 E0               [24]  936 	movx	a,@dptr
      0000F2 F5*20            [12]  937 	mov	_data,a
                                    938 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                    939 ;	assignBit
      0000F4 C2 B4            [12]  940 	clr	_P3_4
                                    941 ;	ECEN4330Lab7.c:182: return data;   
      0000F6 E5*20            [12]  942 	mov	a,_data
                                    943 ;	ECEN4330Lab7.c:273: while((ioread8(map_address) & 0x02));
      0000F8 20 E1 F1         [24]  944 	jb	acc.1,00101$
                                    945 ;	ECEN4330Lab7.c:274: }
      0000FB 22               [24]  946 	ret
                                    947 ;------------------------------------------------------------
                                    948 ;Allocation info for local variables in function 'rtcCmd'
                                    949 ;------------------------------------------------------------
                                    950 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                    951 ;addr                      Allocated to registers r6 r7 
                                    952 ;map_address               Allocated to registers 
                                    953 ;__1310720004              Allocated to registers 
                                    954 ;__1310720005              Allocated to registers r7 
                                    955 ;map_address               Allocated to registers 
                                    956 ;d                         Allocated to registers 
                                    957 ;------------------------------------------------------------
                                    958 ;	ECEN4330Lab7.c:282: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                    959 ;	-----------------------------------------
                                    960 ;	 function rtcCmd
                                    961 ;	-----------------------------------------
      0000FC                        962 _rtcCmd:
                                    963 ;	ECEN4330Lab7.c:283: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                    964 ;	ECEN4330Lab7.c:284: iowrite8(map_address, d);
      0000FC AF*00            [24]  965 	mov	r7,_rtcCmd_PARM_2
                                    966 ;	ECEN4330Lab7.c:166: IOM = 1;
                                    967 ;	assignBit
      0000FE D2 B4            [12]  968 	setb	_P3_4
                                    969 ;	ECEN4330Lab7.c:167: *map_address = d;
      000100 EF               [12]  970 	mov	a,r7
      000101 F0               [24]  971 	movx	@dptr,a
                                    972 ;	ECEN4330Lab7.c:168: IOM = 0;
                                    973 ;	assignBit
      000102 C2 B4            [12]  974 	clr	_P3_4
                                    975 ;	ECEN4330Lab7.c:284: iowrite8(map_address, d);
                                    976 ;	ECEN4330Lab7.c:285: }
      000104 22               [24]  977 	ret
                                    978 ;------------------------------------------------------------
                                    979 ;Allocation info for local variables in function 'rtcWrite'
                                    980 ;------------------------------------------------------------
                                    981 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                    982 ;addr                      Allocated to registers r6 r7 
                                    983 ;map_address               Allocated to registers r6 r7 
                                    984 ;__1310720007              Allocated to registers 
                                    985 ;__1310720008              Allocated to registers 
                                    986 ;addr                      Allocated to registers 
                                    987 ;d                         Allocated to registers 
                                    988 ;map_address               Allocated to registers 
                                    989 ;__1310720004              Allocated to registers 
                                    990 ;__1310720005              Allocated to registers 
                                    991 ;map_address               Allocated to registers 
                                    992 ;d                         Allocated to registers 
                                    993 ;__1310720010              Allocated to registers 
                                    994 ;__1310720011              Allocated to registers 
                                    995 ;map_address               Allocated to registers 
                                    996 ;d                         Allocated to registers 
                                    997 ;__1310720013              Allocated to registers 
                                    998 ;__1310720014              Allocated to registers r7 
                                    999 ;addr                      Allocated to registers 
                                   1000 ;d                         Allocated to registers 
                                   1001 ;map_address               Allocated to registers 
                                   1002 ;__1310720004              Allocated to registers 
                                   1003 ;__1310720005              Allocated to registers 
                                   1004 ;map_address               Allocated to registers 
                                   1005 ;d                         Allocated to registers 
                                   1006 ;------------------------------------------------------------
                                   1007 ;	ECEN4330Lab7.c:293: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function rtcWrite
                                   1010 ;	-----------------------------------------
      000105                       1011 _rtcWrite:
      000105 AE 82            [24] 1012 	mov	r6,dpl
      000107 AF 83            [24] 1013 	mov	r7,dph
                                   1014 ;	ECEN4330Lab7.c:294: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1015 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1016 ;	assignBit
      000109 D2 B4            [12] 1017 	setb	_P3_4
                                   1018 ;	ECEN4330Lab7.c:167: *map_address = d;
      00010B 90 00 0D         [24] 1019 	mov	dptr,#0x000d
      00010E 74 01            [12] 1020 	mov	a,#0x01
      000110 F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1023 ;	assignBit
      000111 C2 B4            [12] 1024 	clr	_P3_4
                                   1025 ;	ECEN4330Lab7.c:296: rtcBusy();
      000113 C0 07            [24] 1026 	push	ar7
      000115 C0 06            [24] 1027 	push	ar6
      000117 12r00rEC         [24] 1028 	lcall	_rtcBusy
      00011A D0 06            [24] 1029 	pop	ar6
      00011C D0 07            [24] 1030 	pop	ar7
                                   1031 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1032 ;	assignBit
      00011E D2 B4            [12] 1033 	setb	_P3_4
                                   1034 ;	ECEN4330Lab7.c:167: *map_address = d;
      000120 8E 82            [24] 1035 	mov	dpl,r6
      000122 8F 83            [24] 1036 	mov	dph,r7
      000124 E4               [12] 1037 	clr	a
      000125 F0               [24] 1038 	movx	@dptr,a
                                   1039 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1040 ;	assignBit
      000126 C2 B4            [12] 1041 	clr	_P3_4
                                   1042 ;	ECEN4330Lab7.c:298: rtcCmd(__REG_D__, d);
      000128 AF*40            [24] 1043 	mov	r7,_rtcWrite_PARM_2
                                   1044 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1045 ;	assignBit
      00012A D2 B4            [12] 1046 	setb	_P3_4
                                   1047 ;	ECEN4330Lab7.c:167: *map_address = d;
      00012C 90 00 0D         [24] 1048 	mov	dptr,#0x000d
      00012F EF               [12] 1049 	mov	a,r7
      000130 F0               [24] 1050 	movx	@dptr,a
                                   1051 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1052 ;	assignBit
      000131 C2 B4            [12] 1053 	clr	_P3_4
                                   1054 ;	ECEN4330Lab7.c:298: rtcCmd(__REG_D__, d);
                                   1055 ;	ECEN4330Lab7.c:299: }
      000133 22               [24] 1056 	ret
                                   1057 ;------------------------------------------------------------
                                   1058 ;Allocation info for local variables in function 'rtcRead'
                                   1059 ;------------------------------------------------------------
                                   1060 ;addr                      Allocated to registers r6 r7 
                                   1061 ;__1310720019              Allocated to registers 
                                   1062 ;map_address               Allocated to registers r6 r7 
                                   1063 ;__1310720016              Allocated to registers 
                                   1064 ;__1310720017              Allocated to registers 
                                   1065 ;addr                      Allocated to registers 
                                   1066 ;d                         Allocated to registers 
                                   1067 ;map_address               Allocated to registers 
                                   1068 ;__1310720004              Allocated to registers 
                                   1069 ;__1310720005              Allocated to registers 
                                   1070 ;map_address               Allocated to registers 
                                   1071 ;d                         Allocated to registers 
                                   1072 ;__1310720020              Allocated to registers 
                                   1073 ;map_address               Allocated to registers 
                                   1074 ;__1310720022              Allocated to registers 
                                   1075 ;__1310720023              Allocated to registers 
                                   1076 ;addr                      Allocated to registers 
                                   1077 ;d                         Allocated to registers 
                                   1078 ;map_address               Allocated to registers 
                                   1079 ;__1310720004              Allocated to registers 
                                   1080 ;__1310720005              Allocated to registers 
                                   1081 ;map_address               Allocated to registers 
                                   1082 ;d                         Allocated to registers 
                                   1083 ;------------------------------------------------------------
                                   1084 ;	ECEN4330Lab7.c:308: inline unsigned char rtcRead(unsigned int addr) {
                                   1085 ;	-----------------------------------------
                                   1086 ;	 function rtcRead
                                   1087 ;	-----------------------------------------
      000134                       1088 _rtcRead:
      000134 AE 82            [24] 1089 	mov	r6,dpl
      000136 AF 83            [24] 1090 	mov	r7,dph
                                   1091 ;	ECEN4330Lab7.c:309: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1092 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1093 ;	assignBit
      000138 D2 B4            [12] 1094 	setb	_P3_4
                                   1095 ;	ECEN4330Lab7.c:167: *map_address = d;
      00013A 90 00 0D         [24] 1096 	mov	dptr,#0x000d
      00013D 74 01            [12] 1097 	mov	a,#0x01
      00013F F0               [24] 1098 	movx	@dptr,a
                                   1099 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1100 ;	assignBit
      000140 C2 B4            [12] 1101 	clr	_P3_4
                                   1102 ;	ECEN4330Lab7.c:311: rtcBusy();
      000142 C0 07            [24] 1103 	push	ar7
      000144 C0 06            [24] 1104 	push	ar6
      000146 12r00rEC         [24] 1105 	lcall	_rtcBusy
      000149 D0 06            [24] 1106 	pop	ar6
      00014B D0 07            [24] 1107 	pop	ar7
                                   1108 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1109 ;	assignBit
      00014D D2 B4            [12] 1110 	setb	_P3_4
                                   1111 ;	ECEN4330Lab7.c:180: data = *map_address;
      00014F 8E 82            [24] 1112 	mov	dpl,r6
      000151 8F 83            [24] 1113 	mov	dph,r7
      000153 E0               [24] 1114 	movx	a,@dptr
      000154 F5*20            [12] 1115 	mov	_data,a
                                   1116 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1117 ;	assignBit
      000156 C2 B4            [12] 1118 	clr	_P3_4
                                   1119 ;	ECEN4330Lab7.c:182: return data;   
                                   1120 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      000158 E5*20            [12] 1121 	mov	a,_data
      00015A 54 0F            [12] 1122 	anl	a,#0x0f
      00015C 44 30            [12] 1123 	orl	a,#0x30
      00015E F5*20            [12] 1124 	mov	_data,a
                                   1125 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1126 ;	assignBit
      000160 D2 B4            [12] 1127 	setb	_P3_4
                                   1128 ;	ECEN4330Lab7.c:167: *map_address = d;
      000162 90 00 0D         [24] 1129 	mov	dptr,#0x000d
      000165 E4               [12] 1130 	clr	a
      000166 F0               [24] 1131 	movx	@dptr,a
                                   1132 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1133 ;	assignBit
      000167 C2 B4            [12] 1134 	clr	_P3_4
                                   1135 ;	ECEN4330Lab7.c:316: return data;
      000169 85*20 82         [24] 1136 	mov	dpl,_data
                                   1137 ;	ECEN4330Lab7.c:317: }
      00016C 22               [24] 1138 	ret
                                   1139 ;------------------------------------------------------------
                                   1140 ;Allocation info for local variables in function 'rtcPrint'
                                   1141 ;------------------------------------------------------------
                                   1142 ;__1310720040              Allocated to registers 
                                   1143 ;__1310720037              Allocated to registers 
                                   1144 ;__1310720034              Allocated to registers 
                                   1145 ;__1310720031              Allocated to registers 
                                   1146 ;__1310720028              Allocated to registers 
                                   1147 ;__1310720025              Allocated to registers 
                                   1148 ;t                         Allocated to registers 
                                   1149 ;__1310720026              Allocated to registers 
                                   1150 ;addr                      Allocated to registers 
                                   1151 ;__1310720019              Allocated to registers 
                                   1152 ;map_address               Allocated to registers 
                                   1153 ;__1310720016              Allocated to registers 
                                   1154 ;__1310720017              Allocated to registers 
                                   1155 ;addr                      Allocated to registers 
                                   1156 ;d                         Allocated to registers 
                                   1157 ;map_address               Allocated to registers 
                                   1158 ;__1310720004              Allocated to registers 
                                   1159 ;__1310720005              Allocated to registers 
                                   1160 ;map_address               Allocated to registers 
                                   1161 ;d                         Allocated to registers 
                                   1162 ;__1310720020              Allocated to registers 
                                   1163 ;map_address               Allocated to registers 
                                   1164 ;__1310720022              Allocated to registers 
                                   1165 ;__1310720023              Allocated to registers 
                                   1166 ;addr                      Allocated to registers 
                                   1167 ;d                         Allocated to registers 
                                   1168 ;map_address               Allocated to registers 
                                   1169 ;__1310720004              Allocated to registers 
                                   1170 ;__1310720005              Allocated to registers 
                                   1171 ;map_address               Allocated to registers 
                                   1172 ;d                         Allocated to registers 
                                   1173 ;__1310720029              Allocated to registers 
                                   1174 ;addr                      Allocated to registers 
                                   1175 ;__1310720019              Allocated to registers 
                                   1176 ;map_address               Allocated to registers 
                                   1177 ;__1310720016              Allocated to registers 
                                   1178 ;__1310720017              Allocated to registers 
                                   1179 ;addr                      Allocated to registers 
                                   1180 ;d                         Allocated to registers 
                                   1181 ;map_address               Allocated to registers 
                                   1182 ;__1310720004              Allocated to registers 
                                   1183 ;__1310720005              Allocated to registers 
                                   1184 ;map_address               Allocated to registers 
                                   1185 ;d                         Allocated to registers 
                                   1186 ;__1310720020              Allocated to registers 
                                   1187 ;map_address               Allocated to registers 
                                   1188 ;__1310720022              Allocated to registers 
                                   1189 ;__1310720023              Allocated to registers 
                                   1190 ;addr                      Allocated to registers 
                                   1191 ;d                         Allocated to registers 
                                   1192 ;map_address               Allocated to registers 
                                   1193 ;__1310720004              Allocated to registers 
                                   1194 ;__1310720005              Allocated to registers 
                                   1195 ;map_address               Allocated to registers 
                                   1196 ;d                         Allocated to registers 
                                   1197 ;__1310720032              Allocated to registers 
                                   1198 ;addr                      Allocated to registers 
                                   1199 ;__1310720019              Allocated to registers 
                                   1200 ;map_address               Allocated to registers 
                                   1201 ;__1310720016              Allocated to registers 
                                   1202 ;__1310720017              Allocated to registers 
                                   1203 ;addr                      Allocated to registers 
                                   1204 ;d                         Allocated to registers 
                                   1205 ;map_address               Allocated to registers 
                                   1206 ;__1310720004              Allocated to registers 
                                   1207 ;__1310720005              Allocated to registers 
                                   1208 ;map_address               Allocated to registers 
                                   1209 ;d                         Allocated to registers 
                                   1210 ;__1310720020              Allocated to registers 
                                   1211 ;map_address               Allocated to registers 
                                   1212 ;__1310720022              Allocated to registers 
                                   1213 ;__1310720023              Allocated to registers 
                                   1214 ;addr                      Allocated to registers 
                                   1215 ;d                         Allocated to registers 
                                   1216 ;map_address               Allocated to registers 
                                   1217 ;__1310720004              Allocated to registers 
                                   1218 ;__1310720005              Allocated to registers 
                                   1219 ;map_address               Allocated to registers 
                                   1220 ;d                         Allocated to registers 
                                   1221 ;__1310720035              Allocated to registers 
                                   1222 ;addr                      Allocated to registers 
                                   1223 ;__1310720019              Allocated to registers 
                                   1224 ;map_address               Allocated to registers 
                                   1225 ;__1310720016              Allocated to registers 
                                   1226 ;__1310720017              Allocated to registers 
                                   1227 ;addr                      Allocated to registers 
                                   1228 ;d                         Allocated to registers 
                                   1229 ;map_address               Allocated to registers 
                                   1230 ;__1310720004              Allocated to registers 
                                   1231 ;__1310720005              Allocated to registers 
                                   1232 ;map_address               Allocated to registers 
                                   1233 ;d                         Allocated to registers 
                                   1234 ;__1310720020              Allocated to registers 
                                   1235 ;map_address               Allocated to registers 
                                   1236 ;__1310720022              Allocated to registers 
                                   1237 ;__1310720023              Allocated to registers 
                                   1238 ;addr                      Allocated to registers 
                                   1239 ;d                         Allocated to registers 
                                   1240 ;map_address               Allocated to registers 
                                   1241 ;__1310720004              Allocated to registers 
                                   1242 ;__1310720005              Allocated to registers 
                                   1243 ;map_address               Allocated to registers 
                                   1244 ;d                         Allocated to registers 
                                   1245 ;__1310720038              Allocated to registers 
                                   1246 ;addr                      Allocated to registers 
                                   1247 ;__1310720019              Allocated to registers 
                                   1248 ;map_address               Allocated to registers 
                                   1249 ;__1310720016              Allocated to registers 
                                   1250 ;__1310720017              Allocated to registers 
                                   1251 ;addr                      Allocated to registers 
                                   1252 ;d                         Allocated to registers 
                                   1253 ;map_address               Allocated to registers 
                                   1254 ;__1310720004              Allocated to registers 
                                   1255 ;__1310720005              Allocated to registers 
                                   1256 ;map_address               Allocated to registers 
                                   1257 ;d                         Allocated to registers 
                                   1258 ;__1310720020              Allocated to registers 
                                   1259 ;map_address               Allocated to registers 
                                   1260 ;__1310720022              Allocated to registers 
                                   1261 ;__1310720023              Allocated to registers 
                                   1262 ;addr                      Allocated to registers 
                                   1263 ;d                         Allocated to registers 
                                   1264 ;map_address               Allocated to registers 
                                   1265 ;__1310720004              Allocated to registers 
                                   1266 ;__1310720005              Allocated to registers 
                                   1267 ;map_address               Allocated to registers 
                                   1268 ;d                         Allocated to registers 
                                   1269 ;__1310720041              Allocated to registers 
                                   1270 ;addr                      Allocated to registers 
                                   1271 ;__1310720019              Allocated to registers 
                                   1272 ;map_address               Allocated to registers 
                                   1273 ;__1310720016              Allocated to registers 
                                   1274 ;__1310720017              Allocated to registers 
                                   1275 ;addr                      Allocated to registers 
                                   1276 ;d                         Allocated to registers 
                                   1277 ;map_address               Allocated to registers 
                                   1278 ;__1310720004              Allocated to registers 
                                   1279 ;__1310720005              Allocated to registers 
                                   1280 ;map_address               Allocated to registers 
                                   1281 ;d                         Allocated to registers 
                                   1282 ;__1310720020              Allocated to registers 
                                   1283 ;map_address               Allocated to registers 
                                   1284 ;__1310720022              Allocated to registers 
                                   1285 ;__1310720023              Allocated to registers 
                                   1286 ;addr                      Allocated to registers 
                                   1287 ;d                         Allocated to registers 
                                   1288 ;map_address               Allocated to registers 
                                   1289 ;__1310720004              Allocated to registers 
                                   1290 ;__1310720005              Allocated to registers 
                                   1291 ;map_address               Allocated to registers 
                                   1292 ;d                         Allocated to registers 
                                   1293 ;------------------------------------------------------------
                                   1294 ;	ECEN4330Lab7.c:326: void rtcPrint(void) {
                                   1295 ;	-----------------------------------------
                                   1296 ;	 function rtcPrint
                                   1297 ;	-----------------------------------------
      00016D                       1298 _rtcPrint:
                                   1299 ;	ECEN4330Lab7.c:329: xCursorHold = cursor_x;
      00016D 85*08*38         [24] 1300 	mov	_xCursorHold,_cursor_x
                                   1301 ;	ECEN4330Lab7.c:330: yCursorHold = cursor_y;
      000170 85*0A*39         [24] 1302 	mov	_yCursorHold,_cursor_y
                                   1303 ;	ECEN4330Lab7.c:331: textSizeHold = textsize;
      000173 85*0C*3A         [24] 1304 	mov	_textSizeHold,_textsize
                                   1305 ;	ECEN4330Lab7.c:333: setTextColor(GRAY, BLACK);
      000176 E4               [12] 1306 	clr	a
      000177 F5*00            [12] 1307 	mov	_setTextColor_PARM_2,a
      000179 F5*01            [12] 1308 	mov	(_setTextColor_PARM_2 + 1),a
      00017B 90 D6 BA         [24] 1309 	mov	dptr,#0xd6ba
      00017E 12r02rD6         [24] 1310 	lcall	_setTextColor
                                   1311 ;	ECEN4330Lab7.c:334: setTextSize(2);
      000181 75 82 02         [24] 1312 	mov	dpl,#0x02
      000184 12r02rE3         [24] 1313 	lcall	_setTextSize
                                   1314 ;	ECEN4330Lab7.c:335: setCursor(132, 304);
      000187 75*00 30         [24] 1315 	mov	_setCursor_PARM_2,#0x30
      00018A 75*01 01         [24] 1316 	mov	(_setCursor_PARM_2 + 1),#0x01
      00018D 90 00 84         [24] 1317 	mov	dptr,#0x0084
      000190 12r02rC9         [24] 1318 	lcall	_setCursor
                                   1319 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1320 ;	assignBit
      000193 D2 B4            [12] 1321 	setb	_P3_4
                                   1322 ;	ECEN4330Lab7.c:167: *map_address = d;
      000195 90 00 0D         [24] 1323 	mov	dptr,#0x000d
      000198 74 01            [12] 1324 	mov	a,#0x01
      00019A F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1327 ;	assignBit
      00019B C2 B4            [12] 1328 	clr	_P3_4
                                   1329 ;	ECEN4330Lab7.c:311: rtcBusy();
      00019D 12r00rEC         [24] 1330 	lcall	_rtcBusy
                                   1331 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1332 ;	assignBit
      0001A0 D2 B4            [12] 1333 	setb	_P3_4
                                   1334 ;	ECEN4330Lab7.c:180: data = *map_address;
      0001A2 90 00 05         [24] 1335 	mov	dptr,#0x0005
      0001A5 E0               [24] 1336 	movx	a,@dptr
      0001A6 F5*20            [12] 1337 	mov	_data,a
                                   1338 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1339 ;	assignBit
      0001A8 C2 B4            [12] 1340 	clr	_P3_4
                                   1341 ;	ECEN4330Lab7.c:182: return data;   
                                   1342 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001AA E5*20            [12] 1343 	mov	a,_data
      0001AC 54 0F            [12] 1344 	anl	a,#0x0f
      0001AE 44 30            [12] 1345 	orl	a,#0x30
      0001B0 F5*20            [12] 1346 	mov	_data,a
                                   1347 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1348 ;	assignBit
      0001B2 D2 B4            [12] 1349 	setb	_P3_4
                                   1350 ;	ECEN4330Lab7.c:167: *map_address = d;
      0001B4 90 00 0D         [24] 1351 	mov	dptr,#0x000d
      0001B7 E4               [12] 1352 	clr	a
      0001B8 F0               [24] 1353 	movx	@dptr,a
                                   1354 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1355 ;	assignBit
      0001B9 C2 B4            [12] 1356 	clr	_P3_4
                                   1357 ;	ECEN4330Lab7.c:316: return data;
      0001BB 85*20 82         [24] 1358 	mov	dpl,_data
                                   1359 ;	ECEN4330Lab7.c:338: write(t);
      0001BE 12r09r5F         [24] 1360 	lcall	_write
                                   1361 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1362 ;	assignBit
      0001C1 D2 B4            [12] 1363 	setb	_P3_4
                                   1364 ;	ECEN4330Lab7.c:167: *map_address = d;
      0001C3 90 00 0D         [24] 1365 	mov	dptr,#0x000d
      0001C6 74 01            [12] 1366 	mov	a,#0x01
      0001C8 F0               [24] 1367 	movx	@dptr,a
                                   1368 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1369 ;	assignBit
      0001C9 C2 B4            [12] 1370 	clr	_P3_4
                                   1371 ;	ECEN4330Lab7.c:311: rtcBusy();
      0001CB 12r00rEC         [24] 1372 	lcall	_rtcBusy
                                   1373 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1374 ;	assignBit
      0001CE D2 B4            [12] 1375 	setb	_P3_4
                                   1376 ;	ECEN4330Lab7.c:180: data = *map_address;
      0001D0 90 00 04         [24] 1377 	mov	dptr,#0x0004
      0001D3 E0               [24] 1378 	movx	a,@dptr
      0001D4 F5*20            [12] 1379 	mov	_data,a
                                   1380 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1381 ;	assignBit
      0001D6 C2 B4            [12] 1382 	clr	_P3_4
                                   1383 ;	ECEN4330Lab7.c:182: return data;   
                                   1384 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001D8 E5*20            [12] 1385 	mov	a,_data
      0001DA 54 0F            [12] 1386 	anl	a,#0x0f
      0001DC 44 30            [12] 1387 	orl	a,#0x30
      0001DE F5*20            [12] 1388 	mov	_data,a
                                   1389 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1390 ;	assignBit
      0001E0 D2 B4            [12] 1391 	setb	_P3_4
                                   1392 ;	ECEN4330Lab7.c:167: *map_address = d;
      0001E2 90 00 0D         [24] 1393 	mov	dptr,#0x000d
      0001E5 E4               [12] 1394 	clr	a
      0001E6 F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1397 ;	assignBit
      0001E7 C2 B4            [12] 1398 	clr	_P3_4
                                   1399 ;	ECEN4330Lab7.c:316: return data;
      0001E9 85*20 82         [24] 1400 	mov	dpl,_data
                                   1401 ;	ECEN4330Lab7.c:340: write(t);
      0001EC 12r09r5F         [24] 1402 	lcall	_write
                                   1403 ;	ECEN4330Lab7.c:341: LCD_string_write(":");
      0001EF 90r05r0B         [24] 1404 	mov	dptr,#___str_0
      0001F2 75 F0 80         [24] 1405 	mov	b,#0x80
      0001F5 12r09rC5         [24] 1406 	lcall	_LCD_string_write
                                   1407 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1408 ;	assignBit
      0001F8 D2 B4            [12] 1409 	setb	_P3_4
                                   1410 ;	ECEN4330Lab7.c:167: *map_address = d;
      0001FA 90 00 0D         [24] 1411 	mov	dptr,#0x000d
      0001FD 74 01            [12] 1412 	mov	a,#0x01
      0001FF F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1415 ;	assignBit
      000200 C2 B4            [12] 1416 	clr	_P3_4
                                   1417 ;	ECEN4330Lab7.c:311: rtcBusy();
      000202 12r00rEC         [24] 1418 	lcall	_rtcBusy
                                   1419 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1420 ;	assignBit
      000205 D2 B4            [12] 1421 	setb	_P3_4
                                   1422 ;	ECEN4330Lab7.c:180: data = *map_address;
      000207 90 00 03         [24] 1423 	mov	dptr,#0x0003
      00020A E0               [24] 1424 	movx	a,@dptr
      00020B F5*20            [12] 1425 	mov	_data,a
                                   1426 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1427 ;	assignBit
      00020D C2 B4            [12] 1428 	clr	_P3_4
                                   1429 ;	ECEN4330Lab7.c:182: return data;   
                                   1430 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      00020F E5*20            [12] 1431 	mov	a,_data
      000211 54 0F            [12] 1432 	anl	a,#0x0f
      000213 44 30            [12] 1433 	orl	a,#0x30
      000215 F5*20            [12] 1434 	mov	_data,a
                                   1435 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1436 ;	assignBit
      000217 D2 B4            [12] 1437 	setb	_P3_4
                                   1438 ;	ECEN4330Lab7.c:167: *map_address = d;
      000219 90 00 0D         [24] 1439 	mov	dptr,#0x000d
      00021C E4               [12] 1440 	clr	a
      00021D F0               [24] 1441 	movx	@dptr,a
                                   1442 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1443 ;	assignBit
      00021E C2 B4            [12] 1444 	clr	_P3_4
                                   1445 ;	ECEN4330Lab7.c:316: return data;
      000220 85*20 82         [24] 1446 	mov	dpl,_data
                                   1447 ;	ECEN4330Lab7.c:343: write(t);
      000223 12r09r5F         [24] 1448 	lcall	_write
                                   1449 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1450 ;	assignBit
      000226 D2 B4            [12] 1451 	setb	_P3_4
                                   1452 ;	ECEN4330Lab7.c:167: *map_address = d;
      000228 90 00 0D         [24] 1453 	mov	dptr,#0x000d
      00022B 74 01            [12] 1454 	mov	a,#0x01
      00022D F0               [24] 1455 	movx	@dptr,a
                                   1456 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1457 ;	assignBit
      00022E C2 B4            [12] 1458 	clr	_P3_4
                                   1459 ;	ECEN4330Lab7.c:311: rtcBusy();
      000230 12r00rEC         [24] 1460 	lcall	_rtcBusy
                                   1461 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1462 ;	assignBit
      000233 D2 B4            [12] 1463 	setb	_P3_4
                                   1464 ;	ECEN4330Lab7.c:180: data = *map_address;
      000235 90 00 02         [24] 1465 	mov	dptr,#0x0002
      000238 E0               [24] 1466 	movx	a,@dptr
      000239 F5*20            [12] 1467 	mov	_data,a
                                   1468 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1469 ;	assignBit
      00023B C2 B4            [12] 1470 	clr	_P3_4
                                   1471 ;	ECEN4330Lab7.c:182: return data;   
                                   1472 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      00023D E5*20            [12] 1473 	mov	a,_data
      00023F 54 0F            [12] 1474 	anl	a,#0x0f
      000241 44 30            [12] 1475 	orl	a,#0x30
      000243 F5*20            [12] 1476 	mov	_data,a
                                   1477 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1478 ;	assignBit
      000245 D2 B4            [12] 1479 	setb	_P3_4
                                   1480 ;	ECEN4330Lab7.c:167: *map_address = d;
      000247 90 00 0D         [24] 1481 	mov	dptr,#0x000d
      00024A E4               [12] 1482 	clr	a
      00024B F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1485 ;	assignBit
      00024C C2 B4            [12] 1486 	clr	_P3_4
                                   1487 ;	ECEN4330Lab7.c:316: return data;
      00024E 85*20 82         [24] 1488 	mov	dpl,_data
                                   1489 ;	ECEN4330Lab7.c:345: write(t);
      000251 12r09r5F         [24] 1490 	lcall	_write
                                   1491 ;	ECEN4330Lab7.c:346: LCD_string_write(":");
      000254 90r05r0B         [24] 1492 	mov	dptr,#___str_0
      000257 75 F0 80         [24] 1493 	mov	b,#0x80
      00025A 12r09rC5         [24] 1494 	lcall	_LCD_string_write
                                   1495 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1496 ;	assignBit
      00025D D2 B4            [12] 1497 	setb	_P3_4
                                   1498 ;	ECEN4330Lab7.c:167: *map_address = d;
      00025F 90 00 0D         [24] 1499 	mov	dptr,#0x000d
      000262 74 01            [12] 1500 	mov	a,#0x01
      000264 F0               [24] 1501 	movx	@dptr,a
                                   1502 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1503 ;	assignBit
      000265 C2 B4            [12] 1504 	clr	_P3_4
                                   1505 ;	ECEN4330Lab7.c:311: rtcBusy();
      000267 12r00rEC         [24] 1506 	lcall	_rtcBusy
                                   1507 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1508 ;	assignBit
      00026A D2 B4            [12] 1509 	setb	_P3_4
                                   1510 ;	ECEN4330Lab7.c:180: data = *map_address;
      00026C 90 00 01         [24] 1511 	mov	dptr,#0x0001
      00026F E0               [24] 1512 	movx	a,@dptr
      000270 F5*20            [12] 1513 	mov	_data,a
                                   1514 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1515 ;	assignBit
      000272 C2 B4            [12] 1516 	clr	_P3_4
                                   1517 ;	ECEN4330Lab7.c:182: return data;   
                                   1518 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      000274 E5*20            [12] 1519 	mov	a,_data
      000276 54 0F            [12] 1520 	anl	a,#0x0f
      000278 44 30            [12] 1521 	orl	a,#0x30
      00027A F5*20            [12] 1522 	mov	_data,a
                                   1523 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1524 ;	assignBit
      00027C D2 B4            [12] 1525 	setb	_P3_4
                                   1526 ;	ECEN4330Lab7.c:167: *map_address = d;
      00027E 90 00 0D         [24] 1527 	mov	dptr,#0x000d
      000281 E4               [12] 1528 	clr	a
      000282 F0               [24] 1529 	movx	@dptr,a
                                   1530 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1531 ;	assignBit
      000283 C2 B4            [12] 1532 	clr	_P3_4
                                   1533 ;	ECEN4330Lab7.c:316: return data;
      000285 85*20 82         [24] 1534 	mov	dpl,_data
                                   1535 ;	ECEN4330Lab7.c:348: write(t);
      000288 12r09r5F         [24] 1536 	lcall	_write
                                   1537 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1538 ;	assignBit
      00028B D2 B4            [12] 1539 	setb	_P3_4
                                   1540 ;	ECEN4330Lab7.c:167: *map_address = d;
      00028D 90 00 0D         [24] 1541 	mov	dptr,#0x000d
      000290 74 01            [12] 1542 	mov	a,#0x01
      000292 F0               [24] 1543 	movx	@dptr,a
                                   1544 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1545 ;	assignBit
      000293 C2 B4            [12] 1546 	clr	_P3_4
                                   1547 ;	ECEN4330Lab7.c:311: rtcBusy();
      000295 12r00rEC         [24] 1548 	lcall	_rtcBusy
                                   1549 ;	ECEN4330Lab7.c:179: IOM = 1;                            
                                   1550 ;	assignBit
      000298 D2 B4            [12] 1551 	setb	_P3_4
                                   1552 ;	ECEN4330Lab7.c:180: data = *map_address;
      00029A 90 00 00         [24] 1553 	mov	dptr,#0x0000
      00029D E0               [24] 1554 	movx	a,@dptr
      00029E F5*20            [12] 1555 	mov	_data,a
                                   1556 ;	ECEN4330Lab7.c:181: IOM = 0;    
                                   1557 ;	assignBit
      0002A0 C2 B4            [12] 1558 	clr	_P3_4
                                   1559 ;	ECEN4330Lab7.c:182: return data;   
                                   1560 ;	ECEN4330Lab7.c:314: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002A2 E5*20            [12] 1561 	mov	a,_data
      0002A4 54 0F            [12] 1562 	anl	a,#0x0f
      0002A6 44 30            [12] 1563 	orl	a,#0x30
      0002A8 F5*20            [12] 1564 	mov	_data,a
                                   1565 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   1566 ;	assignBit
      0002AA D2 B4            [12] 1567 	setb	_P3_4
                                   1568 ;	ECEN4330Lab7.c:167: *map_address = d;
      0002AC 90 00 0D         [24] 1569 	mov	dptr,#0x000d
      0002AF E4               [12] 1570 	clr	a
      0002B0 F0               [24] 1571 	movx	@dptr,a
                                   1572 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   1573 ;	assignBit
      0002B1 C2 B4            [12] 1574 	clr	_P3_4
                                   1575 ;	ECEN4330Lab7.c:316: return data;
      0002B3 85*20 82         [24] 1576 	mov	dpl,_data
                                   1577 ;	ECEN4330Lab7.c:350: write(t);
      0002B6 12r09r5F         [24] 1578 	lcall	_write
                                   1579 ;	ECEN4330Lab7.c:352: cursor_x = xCursorHold;
      0002B9 85*38*08         [24] 1580 	mov	_cursor_x,_xCursorHold
      0002BC 75*09 00         [24] 1581 	mov	(_cursor_x + 1),#0x00
                                   1582 ;	ECEN4330Lab7.c:353: cursor_y = yCursorHold;
      0002BF 85*39*0A         [24] 1583 	mov	_cursor_y,_yCursorHold
      0002C2 75*0B 00         [24] 1584 	mov	(_cursor_y + 1),#0x00
                                   1585 ;	ECEN4330Lab7.c:354: textsize = textSizeHold;
      0002C5 85*3A*0C         [24] 1586 	mov	_textsize,_textSizeHold
                                   1587 ;	ECEN4330Lab7.c:355: }
      0002C8 22               [24] 1588 	ret
                                   1589 ;------------------------------------------------------------
                                   1590 ;Allocation info for local variables in function 'setCursor'
                                   1591 ;------------------------------------------------------------
                                   1592 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1593 ;x                         Allocated to registers 
                                   1594 ;------------------------------------------------------------
                                   1595 ;	ECEN4330Lab7.c:375: void setCursor(u16 x, u16 y){
                                   1596 ;	-----------------------------------------
                                   1597 ;	 function setCursor
                                   1598 ;	-----------------------------------------
      0002C9                       1599 _setCursor:
      0002C9 85 82*08         [24] 1600 	mov	_cursor_x,dpl
      0002CC 85 83*09         [24] 1601 	mov	(_cursor_x + 1),dph
                                   1602 ;	ECEN4330Lab7.c:377: cursor_y = y;
      0002CF 85*00*0A         [24] 1603 	mov	_cursor_y,_setCursor_PARM_2
      0002D2 85*01*0B         [24] 1604 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1605 ;	ECEN4330Lab7.c:378: }
      0002D5 22               [24] 1606 	ret
                                   1607 ;------------------------------------------------------------
                                   1608 ;Allocation info for local variables in function 'setTextColor'
                                   1609 ;------------------------------------------------------------
                                   1610 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1611 ;x                         Allocated to registers 
                                   1612 ;------------------------------------------------------------
                                   1613 ;	ECEN4330Lab7.c:386: void setTextColor(u16 x, u16 y){
                                   1614 ;	-----------------------------------------
                                   1615 ;	 function setTextColor
                                   1616 ;	-----------------------------------------
      0002D6                       1617 _setTextColor:
      0002D6 85 82*0E         [24] 1618 	mov	_textcolor,dpl
      0002D9 85 83*0F         [24] 1619 	mov	(_textcolor + 1),dph
                                   1620 ;	ECEN4330Lab7.c:388: textbgcolor = y;
      0002DC 85*00*10         [24] 1621 	mov	_textbgcolor,_setTextColor_PARM_2
      0002DF 85*01*11         [24] 1622 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1623 ;	ECEN4330Lab7.c:389: }
      0002E2 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'setTextSize'
                                   1627 ;------------------------------------------------------------
                                   1628 ;s                         Allocated to registers r7 
                                   1629 ;------------------------------------------------------------
                                   1630 ;	ECEN4330Lab7.c:397: void setTextSize(u8 s){
                                   1631 ;	-----------------------------------------
                                   1632 ;	 function setTextSize
                                   1633 ;	-----------------------------------------
      0002E3                       1634 _setTextSize:
                                   1635 ;	ECEN4330Lab7.c:398: if (s > 8) return;
      0002E3 E5 82            [12] 1636 	mov	a,dpl
      0002E5 FF               [12] 1637 	mov	r7,a
      0002E6 24 F7            [12] 1638 	add	a,#0xff - 0x08
      0002E8 50 01            [24] 1639 	jnc	00102$
      0002EA 22               [24] 1640 	ret
      0002EB                       1641 00102$:
                                   1642 ;	ECEN4330Lab7.c:399: textsize = (s>0) ? s : 1 ;
      0002EB EF               [12] 1643 	mov	a,r7
      0002EC 60 06            [24] 1644 	jz	00105$
      0002EE 8F 06            [24] 1645 	mov	ar6,r7
      0002F0 7F 00            [12] 1646 	mov	r7,#0x00
      0002F2 80 04            [24] 1647 	sjmp	00106$
      0002F4                       1648 00105$:
      0002F4 7E 01            [12] 1649 	mov	r6,#0x01
      0002F6 7F 00            [12] 1650 	mov	r7,#0x00
      0002F8                       1651 00106$:
      0002F8 8E*0C            [24] 1652 	mov	_textsize,r6
                                   1653 ;	ECEN4330Lab7.c:400: }
      0002FA 22               [24] 1654 	ret
                                   1655 ;------------------------------------------------------------
                                   1656 ;Allocation info for local variables in function 'setRotation'
                                   1657 ;------------------------------------------------------------
                                   1658 ;flag                      Allocated to registers r7 
                                   1659 ;------------------------------------------------------------
                                   1660 ;	ECEN4330Lab7.c:408: void setRotation(u8 flag){
                                   1661 ;	-----------------------------------------
                                   1662 ;	 function setRotation
                                   1663 ;	-----------------------------------------
      0002FB                       1664 _setRotation:
                                   1665 ;	ECEN4330Lab7.c:409: switch(flag) {
      0002FB E5 82            [12] 1666 	mov	a,dpl
      0002FD FF               [12] 1667 	mov	r7,a
      0002FE 24 FC            [12] 1668 	add	a,#0xff - 0x03
      000300 40 4E            [24] 1669 	jc	00105$
      000302 EF               [12] 1670 	mov	a,r7
      000303 2F               [12] 1671 	add	a,r7
                                   1672 ;	ECEN4330Lab7.c:410: case 0:
      000304 90r03r08         [24] 1673 	mov	dptr,#00115$
      000307 73               [24] 1674 	jmp	@a+dptr
      000308                       1675 00115$:
      000308 80 06            [24] 1676 	sjmp	00101$
      00030A 80 14            [24] 1677 	sjmp	00102$
      00030C 80 22            [24] 1678 	sjmp	00103$
      00030E 80 30            [24] 1679 	sjmp	00104$
      000310                       1680 00101$:
                                   1681 ;	ECEN4330Lab7.c:411: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000310 7F 48            [12] 1682 	mov	r7,#0x48
                                   1683 ;	ECEN4330Lab7.c:412: _width = TFTWIDTH;
      000312 75*12 F0         [24] 1684 	mov	__width,#0xf0
      000315 75*13 00         [24] 1685 	mov	(__width + 1),#0x00
                                   1686 ;	ECEN4330Lab7.c:413: _height = TFTHEIGHT;
      000318 75*14 40         [24] 1687 	mov	__height,#0x40
      00031B 75*15 01         [24] 1688 	mov	(__height + 1),#0x01
                                   1689 ;	ECEN4330Lab7.c:414: break;
                                   1690 ;	ECEN4330Lab7.c:415: case 1:
      00031E 80 3E            [24] 1691 	sjmp	00106$
      000320                       1692 00102$:
                                   1693 ;	ECEN4330Lab7.c:416: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000320 7F 28            [12] 1694 	mov	r7,#0x28
                                   1695 ;	ECEN4330Lab7.c:417: _width = TFTHEIGHT;
      000322 75*12 40         [24] 1696 	mov	__width,#0x40
      000325 75*13 01         [24] 1697 	mov	(__width + 1),#0x01
                                   1698 ;	ECEN4330Lab7.c:418: _height = TFTWIDTH;
      000328 75*14 F0         [24] 1699 	mov	__height,#0xf0
      00032B 75*15 00         [24] 1700 	mov	(__height + 1),#0x00
                                   1701 ;	ECEN4330Lab7.c:419: break;
                                   1702 ;	ECEN4330Lab7.c:420: case 2:
      00032E 80 2E            [24] 1703 	sjmp	00106$
      000330                       1704 00103$:
                                   1705 ;	ECEN4330Lab7.c:421: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000330 7F 88            [12] 1706 	mov	r7,#0x88
                                   1707 ;	ECEN4330Lab7.c:422: _width = TFTWIDTH;
      000332 75*12 F0         [24] 1708 	mov	__width,#0xf0
      000335 75*13 00         [24] 1709 	mov	(__width + 1),#0x00
                                   1710 ;	ECEN4330Lab7.c:423: _height = TFTHEIGHT;
      000338 75*14 40         [24] 1711 	mov	__height,#0x40
      00033B 75*15 01         [24] 1712 	mov	(__height + 1),#0x01
                                   1713 ;	ECEN4330Lab7.c:424: break;
                                   1714 ;	ECEN4330Lab7.c:425: case 3:
      00033E 80 1E            [24] 1715 	sjmp	00106$
      000340                       1716 00104$:
                                   1717 ;	ECEN4330Lab7.c:426: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000340 7F E8            [12] 1718 	mov	r7,#0xe8
                                   1719 ;	ECEN4330Lab7.c:427: _width = TFTHEIGHT;
      000342 75*12 40         [24] 1720 	mov	__width,#0x40
      000345 75*13 01         [24] 1721 	mov	(__width + 1),#0x01
                                   1722 ;	ECEN4330Lab7.c:428: _height = TFTWIDTH;
      000348 75*14 F0         [24] 1723 	mov	__height,#0xf0
      00034B 75*15 00         [24] 1724 	mov	(__height + 1),#0x00
                                   1725 ;	ECEN4330Lab7.c:429: break;
                                   1726 ;	ECEN4330Lab7.c:430: default:
      00034E 80 0E            [24] 1727 	sjmp	00106$
      000350                       1728 00105$:
                                   1729 ;	ECEN4330Lab7.c:431: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000350 7F 48            [12] 1730 	mov	r7,#0x48
                                   1731 ;	ECEN4330Lab7.c:432: _width = TFTWIDTH;
      000352 75*12 F0         [24] 1732 	mov	__width,#0xf0
      000355 75*13 00         [24] 1733 	mov	(__width + 1),#0x00
                                   1734 ;	ECEN4330Lab7.c:433: _height = TFTHEIGHT;
      000358 75*14 40         [24] 1735 	mov	__height,#0x40
      00035B 75*15 01         [24] 1736 	mov	(__height + 1),#0x01
                                   1737 ;	ECEN4330Lab7.c:435: }
      00035E                       1738 00106$:
                                   1739 ;	ECEN4330Lab7.c:436: writeRegister8(ILI9341_MEMCONTROL, flag);
      00035E 8F*00            [24] 1740 	mov	_writeRegister8_PARM_2,r7
      000360 75 82 36         [24] 1741 	mov	dpl,#0x36
                                   1742 ;	ECEN4330Lab7.c:437: }
      000363 02r00r51         [24] 1743 	ljmp	_writeRegister8
                                   1744 ;------------------------------------------------------------
                                   1745 ;Allocation info for local variables in function 'setAddress'
                                   1746 ;------------------------------------------------------------
                                   1747 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1748 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1749 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1750 ;x1                        Allocated to registers r6 r7 
                                   1751 ;------------------------------------------------------------
                                   1752 ;	ECEN4330Lab7.c:446: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   1753 ;	-----------------------------------------
                                   1754 ;	 function setAddress
                                   1755 ;	-----------------------------------------
      000366                       1756 _setAddress:
      000366 AE 82            [24] 1757 	mov	r6,dpl
      000368 AF 83            [24] 1758 	mov	r7,dph
                                   1759 ;	ECEN4330Lab7.c:447: write8Reg(0x2A);
                                   1760 ;	assignBit
      00036A C2 B5            [12] 1761 	clr	_P3_5
                                   1762 ;	assignBit
      00036C D2 B4            [12] 1763 	setb	_P3_4
      00036E 85*02 82         [24] 1764 	mov	dpl,_lcd_address
      000371 85*03 83         [24] 1765 	mov	dph,(_lcd_address + 1)
      000374 74 2A            [12] 1766 	mov	a,#0x2a
      000376 F0               [24] 1767 	movx	@dptr,a
                                   1768 ;	assignBit
      000377 C2 B4            [12] 1769 	clr	_P3_4
                                   1770 ;	ECEN4330Lab7.c:448: write8Data(x1 >> 8);
                                   1771 ;	assignBit
      000379 D2 B5            [12] 1772 	setb	_P3_5
                                   1773 ;	assignBit
      00037B D2 B4            [12] 1774 	setb	_P3_4
      00037D 85*02 82         [24] 1775 	mov	dpl,_lcd_address
      000380 85*03 83         [24] 1776 	mov	dph,(_lcd_address + 1)
      000383 8F 05            [24] 1777 	mov	ar5,r7
      000385 ED               [12] 1778 	mov	a,r5
      000386 F0               [24] 1779 	movx	@dptr,a
                                   1780 ;	assignBit
      000387 C2 B4            [12] 1781 	clr	_P3_4
                                   1782 ;	ECEN4330Lab7.c:449: write8Data(x1);
                                   1783 ;	assignBit
      000389 D2 B5            [12] 1784 	setb	_P3_5
                                   1785 ;	assignBit
      00038B D2 B4            [12] 1786 	setb	_P3_4
      00038D 85*02 82         [24] 1787 	mov	dpl,_lcd_address
      000390 85*03 83         [24] 1788 	mov	dph,(_lcd_address + 1)
      000393 EE               [12] 1789 	mov	a,r6
      000394 F0               [24] 1790 	movx	@dptr,a
                                   1791 ;	assignBit
      000395 C2 B4            [12] 1792 	clr	_P3_4
                                   1793 ;	ECEN4330Lab7.c:450: write8Data(x2 >> 8);
                                   1794 ;	assignBit
      000397 D2 B5            [12] 1795 	setb	_P3_5
                                   1796 ;	assignBit
      000399 D2 B4            [12] 1797 	setb	_P3_4
      00039B 85*02 82         [24] 1798 	mov	dpl,_lcd_address
      00039E 85*03 83         [24] 1799 	mov	dph,(_lcd_address + 1)
      0003A1 E5*03            [12] 1800 	mov	a,(_setAddress_PARM_3 + 1)
      0003A3 F0               [24] 1801 	movx	@dptr,a
                                   1802 ;	assignBit
      0003A4 C2 B4            [12] 1803 	clr	_P3_4
                                   1804 ;	ECEN4330Lab7.c:451: write8Data(x2);
                                   1805 ;	assignBit
      0003A6 D2 B5            [12] 1806 	setb	_P3_5
                                   1807 ;	assignBit
      0003A8 D2 B4            [12] 1808 	setb	_P3_4
      0003AA 85*02 82         [24] 1809 	mov	dpl,_lcd_address
      0003AD 85*03 83         [24] 1810 	mov	dph,(_lcd_address + 1)
      0003B0 E5*02            [12] 1811 	mov	a,_setAddress_PARM_3
      0003B2 F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	assignBit
      0003B3 C2 B4            [12] 1814 	clr	_P3_4
                                   1815 ;	ECEN4330Lab7.c:452: write8Reg(0x2B);
                                   1816 ;	assignBit
      0003B5 C2 B5            [12] 1817 	clr	_P3_5
                                   1818 ;	assignBit
      0003B7 D2 B4            [12] 1819 	setb	_P3_4
      0003B9 85*02 82         [24] 1820 	mov	dpl,_lcd_address
      0003BC 85*03 83         [24] 1821 	mov	dph,(_lcd_address + 1)
      0003BF 74 2B            [12] 1822 	mov	a,#0x2b
      0003C1 F0               [24] 1823 	movx	@dptr,a
                                   1824 ;	assignBit
      0003C2 C2 B4            [12] 1825 	clr	_P3_4
                                   1826 ;	ECEN4330Lab7.c:453: write8Data(y1 >> 8);
                                   1827 ;	assignBit
      0003C4 D2 B5            [12] 1828 	setb	_P3_5
                                   1829 ;	assignBit
      0003C6 D2 B4            [12] 1830 	setb	_P3_4
      0003C8 85*02 82         [24] 1831 	mov	dpl,_lcd_address
      0003CB 85*03 83         [24] 1832 	mov	dph,(_lcd_address + 1)
      0003CE E5*01            [12] 1833 	mov	a,(_setAddress_PARM_2 + 1)
      0003D0 F0               [24] 1834 	movx	@dptr,a
                                   1835 ;	assignBit
      0003D1 C2 B4            [12] 1836 	clr	_P3_4
                                   1837 ;	ECEN4330Lab7.c:454: write8Data(y1);
                                   1838 ;	assignBit
      0003D3 D2 B5            [12] 1839 	setb	_P3_5
                                   1840 ;	assignBit
      0003D5 D2 B4            [12] 1841 	setb	_P3_4
      0003D7 85*02 82         [24] 1842 	mov	dpl,_lcd_address
      0003DA 85*03 83         [24] 1843 	mov	dph,(_lcd_address + 1)
      0003DD E5*00            [12] 1844 	mov	a,_setAddress_PARM_2
      0003DF F0               [24] 1845 	movx	@dptr,a
                                   1846 ;	assignBit
      0003E0 C2 B4            [12] 1847 	clr	_P3_4
                                   1848 ;	ECEN4330Lab7.c:455: write8Data(y2 >> 8);
                                   1849 ;	assignBit
      0003E2 D2 B5            [12] 1850 	setb	_P3_5
                                   1851 ;	assignBit
      0003E4 D2 B4            [12] 1852 	setb	_P3_4
      0003E6 85*02 82         [24] 1853 	mov	dpl,_lcd_address
      0003E9 85*03 83         [24] 1854 	mov	dph,(_lcd_address + 1)
      0003EC E5*05            [12] 1855 	mov	a,(_setAddress_PARM_4 + 1)
      0003EE F0               [24] 1856 	movx	@dptr,a
                                   1857 ;	assignBit
      0003EF C2 B4            [12] 1858 	clr	_P3_4
                                   1859 ;	ECEN4330Lab7.c:456: write8Data(y2);
                                   1860 ;	assignBit
      0003F1 D2 B5            [12] 1861 	setb	_P3_5
                                   1862 ;	assignBit
      0003F3 D2 B4            [12] 1863 	setb	_P3_4
      0003F5 85*02 82         [24] 1864 	mov	dpl,_lcd_address
      0003F8 85*03 83         [24] 1865 	mov	dph,(_lcd_address + 1)
      0003FB E5*04            [12] 1866 	mov	a,_setAddress_PARM_4
      0003FD F0               [24] 1867 	movx	@dptr,a
                                   1868 ;	assignBit
      0003FE C2 B4            [12] 1869 	clr	_P3_4
                                   1870 ;	ECEN4330Lab7.c:457: }
      000400 22               [24] 1871 	ret
                                   1872 ;------------------------------------------------------------
                                   1873 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1874 ;------------------------------------------------------------
                                   1875 ;	ECEN4330Lab7.c:465: void TFT_LCD_INIT(void){
                                   1876 ;	-----------------------------------------
                                   1877 ;	 function TFT_LCD_INIT
                                   1878 ;	-----------------------------------------
      000401                       1879 _TFT_LCD_INIT:
                                   1880 ;	ECEN4330Lab7.c:466: _width = TFTWIDTH;
      000401 75*12 F0         [24] 1881 	mov	__width,#0xf0
      000404 75*13 00         [24] 1882 	mov	(__width + 1),#0x00
                                   1883 ;	ECEN4330Lab7.c:467: _height = TFTHEIGHT;
      000407 75*14 40         [24] 1884 	mov	__height,#0x40
      00040A 75*15 01         [24] 1885 	mov	(__height + 1),#0x01
                                   1886 ;	ECEN4330Lab7.c:469: IOM = 0;
                                   1887 ;	assignBit
      00040D C2 B4            [12] 1888 	clr	_P3_4
                                   1889 ;	ECEN4330Lab7.c:470: CD = 1;
                                   1890 ;	assignBit
      00040F D2 B5            [12] 1891 	setb	_P3_5
                                   1892 ;	ECEN4330Lab7.c:472: write8Reg(0x00);
                                   1893 ;	assignBit
      000411 C2 B5            [12] 1894 	clr	_P3_5
                                   1895 ;	assignBit
      000413 D2 B4            [12] 1896 	setb	_P3_4
      000415 85*02 82         [24] 1897 	mov	dpl,_lcd_address
      000418 85*03 83         [24] 1898 	mov	dph,(_lcd_address + 1)
      00041B E4               [12] 1899 	clr	a
      00041C F0               [24] 1900 	movx	@dptr,a
                                   1901 ;	assignBit
      00041D C2 B4            [12] 1902 	clr	_P3_4
                                   1903 ;	ECEN4330Lab7.c:473: write8Data(0x00);
                                   1904 ;	assignBit
      00041F D2 B5            [12] 1905 	setb	_P3_5
                                   1906 ;	assignBit
      000421 D2 B4            [12] 1907 	setb	_P3_4
      000423 85*02 82         [24] 1908 	mov	dpl,_lcd_address
      000426 85*03 83         [24] 1909 	mov	dph,(_lcd_address + 1)
      000429 E4               [12] 1910 	clr	a
      00042A F0               [24] 1911 	movx	@dptr,a
                                   1912 ;	assignBit
      00042B C2 B4            [12] 1913 	clr	_P3_4
                                   1914 ;	ECEN4330Lab7.c:474: write8Data(0x00);
                                   1915 ;	assignBit
      00042D D2 B5            [12] 1916 	setb	_P3_5
                                   1917 ;	assignBit
      00042F D2 B4            [12] 1918 	setb	_P3_4
      000431 85*02 82         [24] 1919 	mov	dpl,_lcd_address
      000434 85*03 83         [24] 1920 	mov	dph,(_lcd_address + 1)
      000437 E4               [12] 1921 	clr	a
      000438 F0               [24] 1922 	movx	@dptr,a
                                   1923 ;	assignBit
      000439 C2 B4            [12] 1924 	clr	_P3_4
                                   1925 ;	ECEN4330Lab7.c:475: write8Data(0x00);
                                   1926 ;	assignBit
      00043B D2 B5            [12] 1927 	setb	_P3_5
                                   1928 ;	assignBit
      00043D D2 B4            [12] 1929 	setb	_P3_4
      00043F 85*02 82         [24] 1930 	mov	dpl,_lcd_address
      000442 85*03 83         [24] 1931 	mov	dph,(_lcd_address + 1)
      000445 E4               [12] 1932 	clr	a
      000446 F0               [24] 1933 	movx	@dptr,a
                                   1934 ;	assignBit
      000447 C2 B4            [12] 1935 	clr	_P3_4
                                   1936 ;	ECEN4330Lab7.c:476: delay(200);
      000449 90 00 C8         [24] 1937 	mov	dptr,#0x00c8
      00044C 12r00r25         [24] 1938 	lcall	_delay
                                   1939 ;	ECEN4330Lab7.c:478: writeRegister8(ILI9341_SOFTRESET, 0);
      00044F 75*00 00         [24] 1940 	mov	_writeRegister8_PARM_2,#0x00
      000452 75 82 01         [24] 1941 	mov	dpl,#0x01
      000455 12r00r51         [24] 1942 	lcall	_writeRegister8
                                   1943 ;	ECEN4330Lab7.c:479: delay(50);
      000458 90 00 32         [24] 1944 	mov	dptr,#0x0032
      00045B 12r00r25         [24] 1945 	lcall	_delay
                                   1946 ;	ECEN4330Lab7.c:481: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00045E 75*00 00         [24] 1947 	mov	_writeRegister8_PARM_2,#0x00
      000461 75 82 28         [24] 1948 	mov	dpl,#0x28
      000464 12r00r51         [24] 1949 	lcall	_writeRegister8
                                   1950 ;	ECEN4330Lab7.c:482: delay(10);
      000467 90 00 0A         [24] 1951 	mov	dptr,#0x000a
      00046A 12r00r25         [24] 1952 	lcall	_delay
                                   1953 ;	ECEN4330Lab7.c:484: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      00046D 75*00 23         [24] 1954 	mov	_writeRegister8_PARM_2,#0x23
      000470 75 82 C0         [24] 1955 	mov	dpl,#0xc0
      000473 12r00r51         [24] 1956 	lcall	_writeRegister8
                                   1957 ;	ECEN4330Lab7.c:485: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000476 75*00 11         [24] 1958 	mov	_writeRegister8_PARM_2,#0x11
      000479 75 82 C1         [24] 1959 	mov	dpl,#0xc1
      00047C 12r00r51         [24] 1960 	lcall	_writeRegister8
                                   1961 ;	ECEN4330Lab7.c:486: write8Reg(ILI9341_VCOMCONTROL1);
                                   1962 ;	assignBit
      00047F C2 B5            [12] 1963 	clr	_P3_5
                                   1964 ;	assignBit
      000481 D2 B4            [12] 1965 	setb	_P3_4
      000483 85*02 82         [24] 1966 	mov	dpl,_lcd_address
      000486 85*03 83         [24] 1967 	mov	dph,(_lcd_address + 1)
      000489 74 C5            [12] 1968 	mov	a,#0xc5
      00048B F0               [24] 1969 	movx	@dptr,a
                                   1970 ;	assignBit
      00048C C2 B4            [12] 1971 	clr	_P3_4
                                   1972 ;	ECEN4330Lab7.c:487: write8Data(0x3d);
                                   1973 ;	assignBit
      00048E D2 B5            [12] 1974 	setb	_P3_5
                                   1975 ;	assignBit
      000490 D2 B4            [12] 1976 	setb	_P3_4
      000492 85*02 82         [24] 1977 	mov	dpl,_lcd_address
      000495 85*03 83         [24] 1978 	mov	dph,(_lcd_address + 1)
      000498 74 3D            [12] 1979 	mov	a,#0x3d
      00049A F0               [24] 1980 	movx	@dptr,a
                                   1981 ;	assignBit
      00049B C2 B4            [12] 1982 	clr	_P3_4
                                   1983 ;	ECEN4330Lab7.c:488: write8Data(0x30);
                                   1984 ;	assignBit
      00049D D2 B5            [12] 1985 	setb	_P3_5
                                   1986 ;	assignBit
      00049F D2 B4            [12] 1987 	setb	_P3_4
      0004A1 85*02 82         [24] 1988 	mov	dpl,_lcd_address
      0004A4 85*03 83         [24] 1989 	mov	dph,(_lcd_address + 1)
      0004A7 74 30            [12] 1990 	mov	a,#0x30
      0004A9 F0               [24] 1991 	movx	@dptr,a
                                   1992 ;	assignBit
      0004AA C2 B4            [12] 1993 	clr	_P3_4
                                   1994 ;	ECEN4330Lab7.c:489: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0004AC 75*00 AA         [24] 1995 	mov	_writeRegister8_PARM_2,#0xaa
      0004AF 75 82 C7         [24] 1996 	mov	dpl,#0xc7
      0004B2 12r00r51         [24] 1997 	lcall	_writeRegister8
                                   1998 ;	ECEN4330Lab7.c:490: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0004B5 75*00 88         [24] 1999 	mov	_writeRegister8_PARM_2,#0x88
      0004B8 75 82 36         [24] 2000 	mov	dpl,#0x36
      0004BB 12r00r51         [24] 2001 	lcall	_writeRegister8
                                   2002 ;	ECEN4330Lab7.c:491: write8Reg(ILI9341_PIXELFORMAT);
                                   2003 ;	assignBit
      0004BE C2 B5            [12] 2004 	clr	_P3_5
                                   2005 ;	assignBit
      0004C0 D2 B4            [12] 2006 	setb	_P3_4
      0004C2 85*02 82         [24] 2007 	mov	dpl,_lcd_address
      0004C5 85*03 83         [24] 2008 	mov	dph,(_lcd_address + 1)
      0004C8 74 3A            [12] 2009 	mov	a,#0x3a
      0004CA F0               [24] 2010 	movx	@dptr,a
                                   2011 ;	assignBit
      0004CB C2 B4            [12] 2012 	clr	_P3_4
                                   2013 ;	ECEN4330Lab7.c:492: write8Data(0x55);
                                   2014 ;	assignBit
      0004CD D2 B5            [12] 2015 	setb	_P3_5
                                   2016 ;	assignBit
      0004CF D2 B4            [12] 2017 	setb	_P3_4
      0004D1 85*02 82         [24] 2018 	mov	dpl,_lcd_address
      0004D4 85*03 83         [24] 2019 	mov	dph,(_lcd_address + 1)
      0004D7 74 55            [12] 2020 	mov	a,#0x55
      0004D9 F0               [24] 2021 	movx	@dptr,a
                                   2022 ;	assignBit
      0004DA C2 B4            [12] 2023 	clr	_P3_4
                                   2024 ;	ECEN4330Lab7.c:493: write8Data(0x00);
                                   2025 ;	assignBit
      0004DC D2 B5            [12] 2026 	setb	_P3_5
                                   2027 ;	assignBit
      0004DE D2 B4            [12] 2028 	setb	_P3_4
      0004E0 85*02 82         [24] 2029 	mov	dpl,_lcd_address
      0004E3 85*03 83         [24] 2030 	mov	dph,(_lcd_address + 1)
      0004E6 E4               [12] 2031 	clr	a
      0004E7 F0               [24] 2032 	movx	@dptr,a
                                   2033 ;	assignBit
      0004E8 C2 B4            [12] 2034 	clr	_P3_4
                                   2035 ;	ECEN4330Lab7.c:494: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0004EA 75*00 1B         [24] 2036 	mov	_writeRegister16_PARM_2,#0x1b
      0004ED 75*01 00         [24] 2037 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0004F0 90 00 B1         [24] 2038 	mov	dptr,#0x00b1
      0004F3 12r00r71         [24] 2039 	lcall	_writeRegister16
                                   2040 ;	ECEN4330Lab7.c:495: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0004F6 75*00 07         [24] 2041 	mov	_writeRegister8_PARM_2,#0x07
      0004F9 75 82 B7         [24] 2042 	mov	dpl,#0xb7
      0004FC 12r00r51         [24] 2043 	lcall	_writeRegister8
                                   2044 ;	ECEN4330Lab7.c:496: writeRegister8(ILI9341_SLEEPOUT, 0);
      0004FF 75*00 00         [24] 2045 	mov	_writeRegister8_PARM_2,#0x00
      000502 75 82 11         [24] 2046 	mov	dpl,#0x11
      000505 12r00r51         [24] 2047 	lcall	_writeRegister8
                                   2048 ;	ECEN4330Lab7.c:497: delay(150);
      000508 90 00 96         [24] 2049 	mov	dptr,#0x0096
      00050B 12r00r25         [24] 2050 	lcall	_delay
                                   2051 ;	ECEN4330Lab7.c:499: writeRegister8(ILI9341_DISPLAYON, 0);
      00050E 75*00 00         [24] 2052 	mov	_writeRegister8_PARM_2,#0x00
      000511 75 82 29         [24] 2053 	mov	dpl,#0x29
      000514 12r00r51         [24] 2054 	lcall	_writeRegister8
                                   2055 ;	ECEN4330Lab7.c:500: delay(500);
      000517 90 01 F4         [24] 2056 	mov	dptr,#0x01f4
      00051A 12r00r25         [24] 2057 	lcall	_delay
                                   2058 ;	ECEN4330Lab7.c:502: setAddress(0,0,_width-1,_height-1);
      00051D E5*12            [12] 2059 	mov	a,__width
      00051F 24 FF            [12] 2060 	add	a,#0xff
      000521 F5*02            [12] 2061 	mov	_setAddress_PARM_3,a
      000523 E5*13            [12] 2062 	mov	a,(__width + 1)
      000525 34 FF            [12] 2063 	addc	a,#0xff
      000527 F5*03            [12] 2064 	mov	(_setAddress_PARM_3 + 1),a
      000529 E5*14            [12] 2065 	mov	a,__height
      00052B 24 FF            [12] 2066 	add	a,#0xff
      00052D F5*04            [12] 2067 	mov	_setAddress_PARM_4,a
      00052F E5*15            [12] 2068 	mov	a,(__height + 1)
      000531 34 FF            [12] 2069 	addc	a,#0xff
      000533 F5*05            [12] 2070 	mov	(_setAddress_PARM_4 + 1),a
      000535 E4               [12] 2071 	clr	a
      000536 F5*00            [12] 2072 	mov	_setAddress_PARM_2,a
      000538 F5*01            [12] 2073 	mov	(_setAddress_PARM_2 + 1),a
      00053A 90 00 00         [24] 2074 	mov	dptr,#0x0000
                                   2075 ;	ECEN4330Lab7.c:503: }
      00053D 02r03r66         [24] 2076 	ljmp	_setAddress
                                   2077 ;------------------------------------------------------------
                                   2078 ;Allocation info for local variables in function 'drawPixel'
                                   2079 ;------------------------------------------------------------
                                   2080 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2081 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2082 ;x3                        Allocated to registers r6 r7 
                                   2083 ;------------------------------------------------------------
                                   2084 ;	ECEN4330Lab7.c:511: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2085 ;	-----------------------------------------
                                   2086 ;	 function drawPixel
                                   2087 ;	-----------------------------------------
      000540                       2088 _drawPixel:
      000540 AE 82            [24] 2089 	mov	r6,dpl
      000542 AF 83            [24] 2090 	mov	r7,dph
                                   2091 ;	ECEN4330Lab7.c:513: setAddress(x3,y3,x3+1,y3+1);
      000544 74 01            [12] 2092 	mov	a,#0x01
      000546 2E               [12] 2093 	add	a,r6
      000547 F5*02            [12] 2094 	mov	_setAddress_PARM_3,a
      000549 E4               [12] 2095 	clr	a
      00054A 3F               [12] 2096 	addc	a,r7
      00054B F5*03            [12] 2097 	mov	(_setAddress_PARM_3 + 1),a
      00054D 74 01            [12] 2098 	mov	a,#0x01
      00054F 25*41            [12] 2099 	add	a,_drawPixel_PARM_2
      000551 F5*04            [12] 2100 	mov	_setAddress_PARM_4,a
      000553 E4               [12] 2101 	clr	a
      000554 35*42            [12] 2102 	addc	a,(_drawPixel_PARM_2 + 1)
      000556 F5*05            [12] 2103 	mov	(_setAddress_PARM_4 + 1),a
      000558 85*41*00         [24] 2104 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00055B 85*42*01         [24] 2105 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      00055E 8E 82            [24] 2106 	mov	dpl,r6
      000560 8F 83            [24] 2107 	mov	dph,r7
      000562 12r03r66         [24] 2108 	lcall	_setAddress
                                   2109 ;	ECEN4330Lab7.c:514: CD=0; 
                                   2110 ;	assignBit
      000565 C2 B5            [12] 2111 	clr	_P3_5
                                   2112 ;	ECEN4330Lab7.c:515: write8(0x2C);
                                   2113 ;	assignBit
      000567 D2 B4            [12] 2114 	setb	_P3_4
      000569 85*02 82         [24] 2115 	mov	dpl,_lcd_address
      00056C 85*03 83         [24] 2116 	mov	dph,(_lcd_address + 1)
      00056F 74 2C            [12] 2117 	mov	a,#0x2c
      000571 F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	assignBit
      000572 C2 B4            [12] 2120 	clr	_P3_4
                                   2121 ;	ECEN4330Lab7.c:516: CD = 1;
                                   2122 ;	assignBit
      000574 D2 B5            [12] 2123 	setb	_P3_5
                                   2124 ;	ECEN4330Lab7.c:517: write8(color1>>8);
                                   2125 ;	assignBit
      000576 D2 B4            [12] 2126 	setb	_P3_4
      000578 85*02 82         [24] 2127 	mov	dpl,_lcd_address
      00057B 85*03 83         [24] 2128 	mov	dph,(_lcd_address + 1)
      00057E E5*44            [12] 2129 	mov	a,(_drawPixel_PARM_3 + 1)
      000580 F0               [24] 2130 	movx	@dptr,a
                                   2131 ;	assignBit
      000581 C2 B4            [12] 2132 	clr	_P3_4
                                   2133 ;	ECEN4330Lab7.c:518: write8(color1);
                                   2134 ;	assignBit
      000583 D2 B4            [12] 2135 	setb	_P3_4
      000585 85*02 82         [24] 2136 	mov	dpl,_lcd_address
      000588 85*03 83         [24] 2137 	mov	dph,(_lcd_address + 1)
      00058B E5*43            [12] 2138 	mov	a,_drawPixel_PARM_3
      00058D F0               [24] 2139 	movx	@dptr,a
                                   2140 ;	assignBit
      00058E C2 B4            [12] 2141 	clr	_P3_4
                                   2142 ;	ECEN4330Lab7.c:519: }
      000590 22               [24] 2143 	ret
                                   2144 ;------------------------------------------------------------
                                   2145 ;Allocation info for local variables in function 'fillRect'
                                   2146 ;------------------------------------------------------------
                                   2147 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2148 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2149 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2150 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2151 ;x                         Allocated to registers 
                                   2152 ;------------------------------------------------------------
                                   2153 ;	ECEN4330Lab7.c:527: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2154 ;	-----------------------------------------
                                   2155 ;	 function fillRect
                                   2156 ;	-----------------------------------------
      000591                       2157 _fillRect:
      000591 AE 82            [24] 2158 	mov	r6,dpl
      000593 AF 83            [24] 2159 	mov	r7,dph
                                   2160 ;	ECEN4330Lab7.c:528: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000595 C3               [12] 2161 	clr	c
      000596 EE               [12] 2162 	mov	a,r6
      000597 94 F0            [12] 2163 	subb	a,#0xf0
      000599 EF               [12] 2164 	mov	a,r7
      00059A 94 00            [12] 2165 	subb	a,#0x00
      00059C 50 0B            [24] 2166 	jnc	00101$
      00059E C3               [12] 2167 	clr	c
      00059F E5*45            [12] 2168 	mov	a,_fillRect_PARM_2
      0005A1 94 40            [12] 2169 	subb	a,#0x40
      0005A3 E5*46            [12] 2170 	mov	a,(_fillRect_PARM_2 + 1)
      0005A5 94 01            [12] 2171 	subb	a,#0x01
      0005A7 40 01            [24] 2172 	jc	00102$
      0005A9                       2173 00101$:
                                   2174 ;	ECEN4330Lab7.c:530: return;
      0005A9 22               [24] 2175 	ret
      0005AA                       2176 00102$:
                                   2177 ;	ECEN4330Lab7.c:533: if ((x+w-1) >= TFTWIDTH)
      0005AA E5*47            [12] 2178 	mov	a,_fillRect_PARM_3
      0005AC 2E               [12] 2179 	add	a,r6
      0005AD FC               [12] 2180 	mov	r4,a
      0005AE E5*48            [12] 2181 	mov	a,(_fillRect_PARM_3 + 1)
      0005B0 3F               [12] 2182 	addc	a,r7
      0005B1 FD               [12] 2183 	mov	r5,a
      0005B2 1C               [12] 2184 	dec	r4
      0005B3 BC FF 01         [24] 2185 	cjne	r4,#0xff,00161$
      0005B6 1D               [12] 2186 	dec	r5
      0005B7                       2187 00161$:
      0005B7 C3               [12] 2188 	clr	c
      0005B8 EC               [12] 2189 	mov	a,r4
      0005B9 94 F0            [12] 2190 	subb	a,#0xf0
      0005BB ED               [12] 2191 	mov	a,r5
      0005BC 94 00            [12] 2192 	subb	a,#0x00
      0005BE 40 0A            [24] 2193 	jc	00105$
                                   2194 ;	ECEN4330Lab7.c:535: w = TFTWIDTH-x;
      0005C0 74 F0            [12] 2195 	mov	a,#0xf0
      0005C2 C3               [12] 2196 	clr	c
      0005C3 9E               [12] 2197 	subb	a,r6
      0005C4 F5*47            [12] 2198 	mov	_fillRect_PARM_3,a
      0005C6 E4               [12] 2199 	clr	a
      0005C7 9F               [12] 2200 	subb	a,r7
      0005C8 F5*48            [12] 2201 	mov	(_fillRect_PARM_3 + 1),a
      0005CA                       2202 00105$:
                                   2203 ;	ECEN4330Lab7.c:538: if ((y+h-1) >= TFTHEIGHT)
      0005CA E5*49            [12] 2204 	mov	a,_fillRect_PARM_4
      0005CC 25*45            [12] 2205 	add	a,_fillRect_PARM_2
      0005CE FC               [12] 2206 	mov	r4,a
      0005CF E5*4A            [12] 2207 	mov	a,(_fillRect_PARM_4 + 1)
      0005D1 35*46            [12] 2208 	addc	a,(_fillRect_PARM_2 + 1)
      0005D3 FD               [12] 2209 	mov	r5,a
      0005D4 1C               [12] 2210 	dec	r4
      0005D5 BC FF 01         [24] 2211 	cjne	r4,#0xff,00163$
      0005D8 1D               [12] 2212 	dec	r5
      0005D9                       2213 00163$:
      0005D9 C3               [12] 2214 	clr	c
      0005DA EC               [12] 2215 	mov	a,r4
      0005DB 94 40            [12] 2216 	subb	a,#0x40
      0005DD ED               [12] 2217 	mov	a,r5
      0005DE 94 01            [12] 2218 	subb	a,#0x01
      0005E0 40 0D            [24] 2219 	jc	00107$
                                   2220 ;	ECEN4330Lab7.c:540: h = TFTHEIGHT-y;
      0005E2 74 40            [12] 2221 	mov	a,#0x40
      0005E4 C3               [12] 2222 	clr	c
      0005E5 95*45            [12] 2223 	subb	a,_fillRect_PARM_2
      0005E7 F5*49            [12] 2224 	mov	_fillRect_PARM_4,a
      0005E9 74 01            [12] 2225 	mov	a,#0x01
      0005EB 95*46            [12] 2226 	subb	a,(_fillRect_PARM_2 + 1)
      0005ED F5*4A            [12] 2227 	mov	(_fillRect_PARM_4 + 1),a
      0005EF                       2228 00107$:
                                   2229 ;	ECEN4330Lab7.c:543: setAddress(x, y, x+w-1, y+h-1);
      0005EF E5*47            [12] 2230 	mov	a,_fillRect_PARM_3
      0005F1 2E               [12] 2231 	add	a,r6
      0005F2 FC               [12] 2232 	mov	r4,a
      0005F3 E5*48            [12] 2233 	mov	a,(_fillRect_PARM_3 + 1)
      0005F5 3F               [12] 2234 	addc	a,r7
      0005F6 FD               [12] 2235 	mov	r5,a
      0005F7 EC               [12] 2236 	mov	a,r4
      0005F8 24 FF            [12] 2237 	add	a,#0xff
      0005FA F5*02            [12] 2238 	mov	_setAddress_PARM_3,a
      0005FC ED               [12] 2239 	mov	a,r5
      0005FD 34 FF            [12] 2240 	addc	a,#0xff
      0005FF F5*03            [12] 2241 	mov	(_setAddress_PARM_3 + 1),a
      000601 E5*49            [12] 2242 	mov	a,_fillRect_PARM_4
      000603 25*45            [12] 2243 	add	a,_fillRect_PARM_2
      000605 FC               [12] 2244 	mov	r4,a
      000606 E5*4A            [12] 2245 	mov	a,(_fillRect_PARM_4 + 1)
      000608 35*46            [12] 2246 	addc	a,(_fillRect_PARM_2 + 1)
      00060A FD               [12] 2247 	mov	r5,a
      00060B EC               [12] 2248 	mov	a,r4
      00060C 24 FF            [12] 2249 	add	a,#0xff
      00060E F5*04            [12] 2250 	mov	_setAddress_PARM_4,a
      000610 ED               [12] 2251 	mov	a,r5
      000611 34 FF            [12] 2252 	addc	a,#0xff
      000613 F5*05            [12] 2253 	mov	(_setAddress_PARM_4 + 1),a
      000615 85*45*00         [24] 2254 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000618 85*46*01         [24] 2255 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      00061B 8E 82            [24] 2256 	mov	dpl,r6
      00061D 8F 83            [24] 2257 	mov	dph,r7
      00061F 12r03r66         [24] 2258 	lcall	_setAddress
                                   2259 ;	ECEN4330Lab7.c:544: write8Reg(0x2C);
                                   2260 ;	assignBit
      000622 C2 B5            [12] 2261 	clr	_P3_5
                                   2262 ;	assignBit
      000624 D2 B4            [12] 2263 	setb	_P3_4
      000626 85*02 82         [24] 2264 	mov	dpl,_lcd_address
      000629 85*03 83         [24] 2265 	mov	dph,(_lcd_address + 1)
      00062C 74 2C            [12] 2266 	mov	a,#0x2c
      00062E F0               [24] 2267 	movx	@dptr,a
                                   2268 ;	assignBit
      00062F C2 B4            [12] 2269 	clr	_P3_4
                                   2270 ;	ECEN4330Lab7.c:545: CD = 1;
                                   2271 ;	assignBit
      000631 D2 B5            [12] 2272 	setb	_P3_5
                                   2273 ;	ECEN4330Lab7.c:546: for(y=h; y>0; y--)
      000633 AF*4C            [24] 2274 	mov	r7,(_fillRect_PARM_5 + 1)
      000635 AD*49            [24] 2275 	mov	r5,_fillRect_PARM_4
      000637 AE*4A            [24] 2276 	mov	r6,(_fillRect_PARM_4 + 1)
      000639                       2277 00114$:
      000639 ED               [12] 2278 	mov	a,r5
      00063A 4E               [12] 2279 	orl	a,r6
      00063B 60 30            [24] 2280 	jz	00116$
                                   2281 ;	ECEN4330Lab7.c:548: for(x=w; x>0; x--)
      00063D AB*47            [24] 2282 	mov	r3,_fillRect_PARM_3
      00063F AC*48            [24] 2283 	mov	r4,(_fillRect_PARM_3 + 1)
      000641                       2284 00111$:
      000641 EB               [12] 2285 	mov	a,r3
      000642 4C               [12] 2286 	orl	a,r4
      000643 60 21            [24] 2287 	jz	00115$
                                   2288 ;	ECEN4330Lab7.c:550: write8(color>>8); 
                                   2289 ;	assignBit
      000645 D2 B4            [12] 2290 	setb	_P3_4
      000647 85*02 82         [24] 2291 	mov	dpl,_lcd_address
      00064A 85*03 83         [24] 2292 	mov	dph,(_lcd_address + 1)
      00064D EF               [12] 2293 	mov	a,r7
      00064E F0               [24] 2294 	movx	@dptr,a
                                   2295 ;	assignBit
      00064F C2 B4            [12] 2296 	clr	_P3_4
                                   2297 ;	ECEN4330Lab7.c:551: write8(color);
                                   2298 ;	assignBit
      000651 D2 B4            [12] 2299 	setb	_P3_4
      000653 85*02 82         [24] 2300 	mov	dpl,_lcd_address
      000656 85*03 83         [24] 2301 	mov	dph,(_lcd_address + 1)
      000659 E5*4B            [12] 2302 	mov	a,_fillRect_PARM_5
      00065B FA               [12] 2303 	mov	r2,a
      00065C F0               [24] 2304 	movx	@dptr,a
                                   2305 ;	assignBit
      00065D C2 B4            [12] 2306 	clr	_P3_4
                                   2307 ;	ECEN4330Lab7.c:548: for(x=w; x>0; x--)
      00065F 1B               [12] 2308 	dec	r3
      000660 BB FF 01         [24] 2309 	cjne	r3,#0xff,00167$
      000663 1C               [12] 2310 	dec	r4
      000664                       2311 00167$:
      000664 80 DB            [24] 2312 	sjmp	00111$
      000666                       2313 00115$:
                                   2314 ;	ECEN4330Lab7.c:546: for(y=h; y>0; y--)
      000666 1D               [12] 2315 	dec	r5
      000667 BD FF 01         [24] 2316 	cjne	r5,#0xff,00168$
      00066A 1E               [12] 2317 	dec	r6
      00066B                       2318 00168$:
      00066B 80 CC            [24] 2319 	sjmp	00114$
      00066D                       2320 00116$:
                                   2321 ;	ECEN4330Lab7.c:554: }
      00066D 22               [24] 2322 	ret
                                   2323 ;------------------------------------------------------------
                                   2324 ;Allocation info for local variables in function 'fillScreen'
                                   2325 ;------------------------------------------------------------
                                   2326 ;Color                     Allocated to registers r6 r7 
                                   2327 ;len                       Allocated to registers 
                                   2328 ;blocks                    Allocated to registers r4 r7 
                                   2329 ;i                         Allocated to registers r3 
                                   2330 ;hi                        Allocated to registers r5 
                                   2331 ;lo                        Allocated to registers r6 
                                   2332 ;------------------------------------------------------------
                                   2333 ;	ECEN4330Lab7.c:562: void fillScreen(unsigned int Color){
                                   2334 ;	-----------------------------------------
                                   2335 ;	 function fillScreen
                                   2336 ;	-----------------------------------------
      00066E                       2337 _fillScreen:
      00066E AE 82            [24] 2338 	mov	r6,dpl
      000670 AF 83            [24] 2339 	mov	r7,dph
                                   2340 ;	ECEN4330Lab7.c:565: unsigned char  i, hi = Color >> 8, lo = Color;
      000672 8F 05            [24] 2341 	mov	ar5,r7
                                   2342 ;	ECEN4330Lab7.c:568: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      000674 E4               [12] 2343 	clr	a
      000675 F5*00            [12] 2344 	mov	_setAddress_PARM_2,a
      000677 F5*01            [12] 2345 	mov	(_setAddress_PARM_2 + 1),a
      000679 75*02 EF         [24] 2346 	mov	_setAddress_PARM_3,#0xef
                                   2347 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      00067C F5*03            [12] 2348 	mov	(_setAddress_PARM_3 + 1),a
      00067E 75*04 3F         [24] 2349 	mov	_setAddress_PARM_4,#0x3f
      000681 75*05 01         [24] 2350 	mov	(_setAddress_PARM_4 + 1),#0x01
      000684 90 00 00         [24] 2351 	mov	dptr,#0x0000
      000687 C0 06            [24] 2352 	push	ar6
      000689 C0 05            [24] 2353 	push	ar5
      00068B 12r03r66         [24] 2354 	lcall	_setAddress
      00068E D0 05            [24] 2355 	pop	ar5
      000690 D0 06            [24] 2356 	pop	ar6
                                   2357 ;	ECEN4330Lab7.c:569: write8Reg(0x2C);
                                   2358 ;	assignBit
      000692 C2 B5            [12] 2359 	clr	_P3_5
                                   2360 ;	assignBit
      000694 D2 B4            [12] 2361 	setb	_P3_4
      000696 85*02 82         [24] 2362 	mov	dpl,_lcd_address
      000699 85*03 83         [24] 2363 	mov	dph,(_lcd_address + 1)
      00069C 74 2C            [12] 2364 	mov	a,#0x2c
      00069E F0               [24] 2365 	movx	@dptr,a
                                   2366 ;	assignBit
      00069F C2 B4            [12] 2367 	clr	_P3_4
                                   2368 ;	ECEN4330Lab7.c:570: CD = 1;
                                   2369 ;	assignBit
      0006A1 D2 B5            [12] 2370 	setb	_P3_5
                                   2371 ;	ECEN4330Lab7.c:571: write8(hi); 
                                   2372 ;	assignBit
      0006A3 D2 B4            [12] 2373 	setb	_P3_4
      0006A5 85*02 82         [24] 2374 	mov	dpl,_lcd_address
      0006A8 85*03 83         [24] 2375 	mov	dph,(_lcd_address + 1)
      0006AB ED               [12] 2376 	mov	a,r5
      0006AC F0               [24] 2377 	movx	@dptr,a
                                   2378 ;	assignBit
      0006AD C2 B4            [12] 2379 	clr	_P3_4
                                   2380 ;	ECEN4330Lab7.c:572: write8(lo);
                                   2381 ;	assignBit
      0006AF D2 B4            [12] 2382 	setb	_P3_4
      0006B1 85*02 82         [24] 2383 	mov	dpl,_lcd_address
      0006B4 85*03 83         [24] 2384 	mov	dph,(_lcd_address + 1)
      0006B7 EE               [12] 2385 	mov	a,r6
      0006B8 F0               [24] 2386 	movx	@dptr,a
                                   2387 ;	assignBit
      0006B9 C2 B4            [12] 2388 	clr	_P3_4
                                   2389 ;	ECEN4330Lab7.c:574: while(blocks--) {
      0006BB 7C B0            [12] 2390 	mov	r4,#0xb0
      0006BD 7F 04            [12] 2391 	mov	r7,#0x04
      0006BF                       2392 00104$:
      0006BF 8C 02            [24] 2393 	mov	ar2,r4
      0006C1 8F 03            [24] 2394 	mov	ar3,r7
      0006C3 1C               [12] 2395 	dec	r4
      0006C4 BC FF 01         [24] 2396 	cjne	r4,#0xff,00140$
      0006C7 1F               [12] 2397 	dec	r7
      0006C8                       2398 00140$:
      0006C8 EA               [12] 2399 	mov	a,r2
      0006C9 4B               [12] 2400 	orl	a,r3
      0006CA 60 66            [24] 2401 	jz	00106$
                                   2402 ;	ECEN4330Lab7.c:576: do {
      0006CC 7B 10            [12] 2403 	mov	r3,#0x10
      0006CE                       2404 00101$:
                                   2405 ;	ECEN4330Lab7.c:577: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2406 ;	assignBit
      0006CE D2 B4            [12] 2407 	setb	_P3_4
      0006D0 85*02 82         [24] 2408 	mov	dpl,_lcd_address
      0006D3 85*03 83         [24] 2409 	mov	dph,(_lcd_address + 1)
      0006D6 ED               [12] 2410 	mov	a,r5
      0006D7 F0               [24] 2411 	movx	@dptr,a
                                   2412 ;	assignBit
      0006D8 C2 B4            [12] 2413 	clr	_P3_4
                                   2414 ;	assignBit
      0006DA D2 B4            [12] 2415 	setb	_P3_4
      0006DC 85*02 82         [24] 2416 	mov	dpl,_lcd_address
      0006DF 85*03 83         [24] 2417 	mov	dph,(_lcd_address + 1)
      0006E2 EE               [12] 2418 	mov	a,r6
      0006E3 F0               [24] 2419 	movx	@dptr,a
                                   2420 ;	assignBit
      0006E4 C2 B4            [12] 2421 	clr	_P3_4
                                   2422 ;	assignBit
      0006E6 D2 B4            [12] 2423 	setb	_P3_4
      0006E8 85*02 82         [24] 2424 	mov	dpl,_lcd_address
      0006EB 85*03 83         [24] 2425 	mov	dph,(_lcd_address + 1)
      0006EE ED               [12] 2426 	mov	a,r5
      0006EF F0               [24] 2427 	movx	@dptr,a
                                   2428 ;	assignBit
      0006F0 C2 B4            [12] 2429 	clr	_P3_4
                                   2430 ;	assignBit
      0006F2 D2 B4            [12] 2431 	setb	_P3_4
      0006F4 85*02 82         [24] 2432 	mov	dpl,_lcd_address
      0006F7 85*03 83         [24] 2433 	mov	dph,(_lcd_address + 1)
      0006FA EE               [12] 2434 	mov	a,r6
      0006FB F0               [24] 2435 	movx	@dptr,a
                                   2436 ;	assignBit
      0006FC C2 B4            [12] 2437 	clr	_P3_4
                                   2438 ;	ECEN4330Lab7.c:578: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2439 ;	assignBit
      0006FE D2 B4            [12] 2440 	setb	_P3_4
      000700 85*02 82         [24] 2441 	mov	dpl,_lcd_address
      000703 85*03 83         [24] 2442 	mov	dph,(_lcd_address + 1)
      000706 ED               [12] 2443 	mov	a,r5
      000707 F0               [24] 2444 	movx	@dptr,a
                                   2445 ;	assignBit
      000708 C2 B4            [12] 2446 	clr	_P3_4
                                   2447 ;	assignBit
      00070A D2 B4            [12] 2448 	setb	_P3_4
      00070C 85*02 82         [24] 2449 	mov	dpl,_lcd_address
      00070F 85*03 83         [24] 2450 	mov	dph,(_lcd_address + 1)
      000712 EE               [12] 2451 	mov	a,r6
      000713 F0               [24] 2452 	movx	@dptr,a
                                   2453 ;	assignBit
      000714 C2 B4            [12] 2454 	clr	_P3_4
                                   2455 ;	assignBit
      000716 D2 B4            [12] 2456 	setb	_P3_4
      000718 85*02 82         [24] 2457 	mov	dpl,_lcd_address
      00071B 85*03 83         [24] 2458 	mov	dph,(_lcd_address + 1)
      00071E ED               [12] 2459 	mov	a,r5
      00071F F0               [24] 2460 	movx	@dptr,a
                                   2461 ;	assignBit
      000720 C2 B4            [12] 2462 	clr	_P3_4
                                   2463 ;	assignBit
      000722 D2 B4            [12] 2464 	setb	_P3_4
      000724 85*02 82         [24] 2465 	mov	dpl,_lcd_address
      000727 85*03 83         [24] 2466 	mov	dph,(_lcd_address + 1)
      00072A EE               [12] 2467 	mov	a,r6
      00072B F0               [24] 2468 	movx	@dptr,a
                                   2469 ;	assignBit
      00072C C2 B4            [12] 2470 	clr	_P3_4
                                   2471 ;	ECEN4330Lab7.c:579: } while(--i);
      00072E DB 9E            [24] 2472 	djnz	r3,00101$
      000730 80 8D            [24] 2473 	sjmp	00104$
      000732                       2474 00106$:
                                   2475 ;	ECEN4330Lab7.c:581: for(i = (char)len & 63; i--; ) {
      000732 7F 3F            [12] 2476 	mov	r7,#0x3f
      000734                       2477 00109$:
      000734 8F 04            [24] 2478 	mov	ar4,r7
      000736 1F               [12] 2479 	dec	r7
      000737 EC               [12] 2480 	mov	a,r4
      000738 60 1A            [24] 2481 	jz	00111$
                                   2482 ;	ECEN4330Lab7.c:582: write8(hi); 
                                   2483 ;	assignBit
      00073A D2 B4            [12] 2484 	setb	_P3_4
      00073C 85*02 82         [24] 2485 	mov	dpl,_lcd_address
      00073F 85*03 83         [24] 2486 	mov	dph,(_lcd_address + 1)
      000742 ED               [12] 2487 	mov	a,r5
      000743 F0               [24] 2488 	movx	@dptr,a
                                   2489 ;	assignBit
      000744 C2 B4            [12] 2490 	clr	_P3_4
                                   2491 ;	ECEN4330Lab7.c:583: write8(lo);
                                   2492 ;	assignBit
      000746 D2 B4            [12] 2493 	setb	_P3_4
      000748 85*02 82         [24] 2494 	mov	dpl,_lcd_address
      00074B 85*03 83         [24] 2495 	mov	dph,(_lcd_address + 1)
      00074E EE               [12] 2496 	mov	a,r6
      00074F F0               [24] 2497 	movx	@dptr,a
                                   2498 ;	assignBit
      000750 C2 B4            [12] 2499 	clr	_P3_4
      000752 80 E0            [24] 2500 	sjmp	00109$
      000754                       2501 00111$:
                                   2502 ;	ECEN4330Lab7.c:585: }
      000754 22               [24] 2503 	ret
                                   2504 ;------------------------------------------------------------
                                   2505 ;Allocation info for local variables in function 'drawChar'
                                   2506 ;------------------------------------------------------------
                                   2507 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2508 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2509 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2510 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2511 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2512 ;x                         Allocated with name '_drawChar_x_65536_311'
                                   2513 ;i                         Allocated to registers r3 
                                   2514 ;line                      Allocated with name '_drawChar_line_196608_315'
                                   2515 ;j                         Allocated to registers r2 
                                   2516 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2517 ;------------------------------------------------------------
                                   2518 ;	ECEN4330Lab7.c:593: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2519 ;	-----------------------------------------
                                   2520 ;	 function drawChar
                                   2521 ;	-----------------------------------------
      000755                       2522 _drawChar:
      000755 85 82*55         [24] 2523 	mov	_drawChar_x_65536_311,dpl
      000758 85 83*56         [24] 2524 	mov	(_drawChar_x_65536_311 + 1),dph
                                   2525 ;	ECEN4330Lab7.c:594: if ((x >=TFTWIDTH) || // Clip right
      00075B C3               [12] 2526 	clr	c
      00075C E5*55            [12] 2527 	mov	a,_drawChar_x_65536_311
      00075E 94 F0            [12] 2528 	subb	a,#0xf0
      000760 E5*56            [12] 2529 	mov	a,(_drawChar_x_65536_311 + 1)
      000762 64 80            [12] 2530 	xrl	a,#0x80
      000764 94 80            [12] 2531 	subb	a,#0x80
      000766 50 59            [24] 2532 	jnc	00101$
                                   2533 ;	ECEN4330Lab7.c:595: (y >=TFTHEIGHT)           || // Clip bottom
      000768 C3               [12] 2534 	clr	c
      000769 E5*4D            [12] 2535 	mov	a,_drawChar_PARM_2
      00076B 94 40            [12] 2536 	subb	a,#0x40
      00076D E5*4E            [12] 2537 	mov	a,(_drawChar_PARM_2 + 1)
      00076F 64 80            [12] 2538 	xrl	a,#0x80
      000771 94 81            [12] 2539 	subb	a,#0x81
      000773 50 4C            [24] 2540 	jnc	00101$
                                   2541 ;	ECEN4330Lab7.c:596: ((x + 6 * size - 1) < 0) || // Clip left
      000775 AC*54            [24] 2542 	mov	r4,_drawChar_PARM_6
      000777 7D 00            [12] 2543 	mov	r5,#0x00
      000779 8C*00            [24] 2544 	mov	__mulint_PARM_2,r4
      00077B 8D*01            [24] 2545 	mov	(__mulint_PARM_2 + 1),r5
      00077D 90 00 06         [24] 2546 	mov	dptr,#0x0006
      000780 C0 05            [24] 2547 	push	ar5
      000782 C0 04            [24] 2548 	push	ar4
      000784 12r00r00         [24] 2549 	lcall	__mulint
      000787 AA 82            [24] 2550 	mov	r2,dpl
      000789 AB 83            [24] 2551 	mov	r3,dph
      00078B D0 04            [24] 2552 	pop	ar4
      00078D D0 05            [24] 2553 	pop	ar5
      00078F EA               [12] 2554 	mov	a,r2
      000790 25*55            [12] 2555 	add	a,_drawChar_x_65536_311
      000792 FA               [12] 2556 	mov	r2,a
      000793 EB               [12] 2557 	mov	a,r3
      000794 35*56            [12] 2558 	addc	a,(_drawChar_x_65536_311 + 1)
      000796 FB               [12] 2559 	mov	r3,a
      000797 1A               [12] 2560 	dec	r2
      000798 BA FF 01         [24] 2561 	cjne	r2,#0xff,00182$
      00079B 1B               [12] 2562 	dec	r3
      00079C                       2563 00182$:
      00079C EB               [12] 2564 	mov	a,r3
      00079D 20 E7 21         [24] 2565 	jb	acc.7,00101$
                                   2566 ;	ECEN4330Lab7.c:597: ((y + 8 * size - 1) < 0))   // Clip top
      0007A0 ED               [12] 2567 	mov	a,r5
      0007A1 C4               [12] 2568 	swap	a
      0007A2 03               [12] 2569 	rr	a
      0007A3 54 F8            [12] 2570 	anl	a,#0xf8
      0007A5 CC               [12] 2571 	xch	a,r4
      0007A6 C4               [12] 2572 	swap	a
      0007A7 03               [12] 2573 	rr	a
      0007A8 CC               [12] 2574 	xch	a,r4
      0007A9 6C               [12] 2575 	xrl	a,r4
      0007AA CC               [12] 2576 	xch	a,r4
      0007AB 54 F8            [12] 2577 	anl	a,#0xf8
      0007AD CC               [12] 2578 	xch	a,r4
      0007AE 6C               [12] 2579 	xrl	a,r4
      0007AF FD               [12] 2580 	mov	r5,a
      0007B0 EC               [12] 2581 	mov	a,r4
      0007B1 25*4D            [12] 2582 	add	a,_drawChar_PARM_2
      0007B3 FC               [12] 2583 	mov	r4,a
      0007B4 ED               [12] 2584 	mov	a,r5
      0007B5 35*4E            [12] 2585 	addc	a,(_drawChar_PARM_2 + 1)
      0007B7 FD               [12] 2586 	mov	r5,a
      0007B8 1C               [12] 2587 	dec	r4
      0007B9 BC FF 01         [24] 2588 	cjne	r4,#0xff,00184$
      0007BC 1D               [12] 2589 	dec	r5
      0007BD                       2590 00184$:
      0007BD ED               [12] 2591 	mov	a,r5
      0007BE 30 E7 01         [24] 2592 	jnb	acc.7,00141$
      0007C1                       2593 00101$:
                                   2594 ;	ECEN4330Lab7.c:599: return;
      0007C1 22               [24] 2595 	ret
                                   2596 ;	ECEN4330Lab7.c:602: for (char i=0; i<6; i++ )
      0007C2                       2597 00141$:
      0007C2 74 01            [12] 2598 	mov	a,#0x01
      0007C4 B5*54 04         [24] 2599 	cjne	a,_drawChar_PARM_6,00186$
      0007C7 74 01            [12] 2600 	mov	a,#0x01
      0007C9 80 01            [24] 2601 	sjmp	00187$
      0007CB                       2602 00186$:
      0007CB E4               [12] 2603 	clr	a
      0007CC                       2604 00187$:
      0007CC FD               [12] 2605 	mov	r5,a
      0007CD FC               [12] 2606 	mov	r4,a
      0007CE E5*50            [12] 2607 	mov	a,_drawChar_PARM_4
      0007D0 B5*52 08         [24] 2608 	cjne	a,_drawChar_PARM_5,00188$
      0007D3 E5*51            [12] 2609 	mov	a,(_drawChar_PARM_4 + 1)
      0007D5 B5*53 03         [24] 2610 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      0007D8 D3               [12] 2611 	setb	c
      0007D9 80 01            [24] 2612 	sjmp	00189$
      0007DB                       2613 00188$:
      0007DB C3               [12] 2614 	clr	c
      0007DC                       2615 00189$:
      0007DC 92*00            [24] 2616 	mov	_drawChar_sloc0_1_0,c
      0007DE 7B 00            [12] 2617 	mov	r3,#0x00
      0007E0                       2618 00126$:
      0007E0 BB 06 00         [24] 2619 	cjne	r3,#0x06,00190$
      0007E3                       2620 00190$:
      0007E3 40 01            [24] 2621 	jc	00191$
      0007E5 22               [24] 2622 	ret
      0007E6                       2623 00191$:
                                   2624 ;	ECEN4330Lab7.c:606: if (i == 5)
      0007E6 BB 05 05         [24] 2625 	cjne	r3,#0x05,00107$
                                   2626 ;	ECEN4330Lab7.c:608: line = 0x0;
      0007E9 75*57 00         [24] 2627 	mov	_drawChar_line_196608_315,#0x00
      0007EC 80 30            [24] 2628 	sjmp	00140$
      0007EE                       2629 00107$:
                                   2630 ;	ECEN4330Lab7.c:612: line = pgm_read_byte(font+(c*5)+i);
      0007EE 85*4F*00         [24] 2631 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0007F1 75*01 00         [24] 2632 	mov	(__mulint_PARM_2 + 1),#0x00
      0007F4 90 00 05         [24] 2633 	mov	dptr,#0x0005
      0007F7 C0 05            [24] 2634 	push	ar5
      0007F9 C0 04            [24] 2635 	push	ar4
      0007FB C0 03            [24] 2636 	push	ar3
      0007FD 12r00r00         [24] 2637 	lcall	__mulint
      000800 A8 82            [24] 2638 	mov	r0,dpl
      000802 A9 83            [24] 2639 	mov	r1,dph
      000804 D0 03            [24] 2640 	pop	ar3
      000806 D0 04            [24] 2641 	pop	ar4
      000808 D0 05            [24] 2642 	pop	ar5
      00080A E8               [12] 2643 	mov	a,r0
      00080B 24r00            [12] 2644 	add	a,#_font
      00080D F8               [12] 2645 	mov	r0,a
      00080E E9               [12] 2646 	mov	a,r1
      00080F 34s00            [12] 2647 	addc	a,#(_font >> 8)
      000811 F9               [12] 2648 	mov	r1,a
      000812 EB               [12] 2649 	mov	a,r3
      000813 28               [12] 2650 	add	a,r0
      000814 F5 82            [12] 2651 	mov	dpl,a
      000816 E4               [12] 2652 	clr	a
      000817 39               [12] 2653 	addc	a,r1
      000818 F5 83            [12] 2654 	mov	dph,a
      00081A E4               [12] 2655 	clr	a
      00081B 93               [24] 2656 	movc	a,@a+dptr
      00081C F5*57            [12] 2657 	mov	_drawChar_line_196608_315,a
                                   2658 ;	ECEN4330Lab7.c:615: for (char j = 0; j<8; j++)
      00081E                       2659 00140$:
      00081E 8B F0            [24] 2660 	mov	b,r3
      000820 E5*54            [12] 2661 	mov	a,_drawChar_PARM_6
      000822 A4               [48] 2662 	mul	ab
      000823 25*55            [12] 2663 	add	a,_drawChar_x_65536_311
      000825 F8               [12] 2664 	mov	r0,a
      000826 E5*56            [12] 2665 	mov	a,(_drawChar_x_65536_311 + 1)
      000828 35 F0            [12] 2666 	addc	a,b
      00082A F9               [12] 2667 	mov	r1,a
      00082B 88*58            [24] 2668 	mov	_drawChar_sloc1_1_0,r0
      00082D 89*59            [24] 2669 	mov	(_drawChar_sloc1_1_0 + 1),r1
      00082F 7A 00            [12] 2670 	mov	r2,#0x00
      000831                       2671 00123$:
      000831 BA 08 00         [24] 2672 	cjne	r2,#0x08,00194$
      000834                       2673 00194$:
      000834 40 03            [24] 2674 	jc	00195$
      000836 02r09r5B         [24] 2675 	ljmp	00127$
      000839                       2676 00195$:
                                   2677 ;	ECEN4330Lab7.c:617: if (line & 0x1)
      000839 E5*57            [12] 2678 	mov	a,_drawChar_line_196608_315
      00083B 20 E0 03         [24] 2679 	jb	acc.0,00196$
      00083E 02r08rC9         [24] 2680 	ljmp	00118$
      000841                       2681 00196$:
                                   2682 ;	ECEN4330Lab7.c:619: if (size == 1) // default size
      000841 ED               [12] 2683 	mov	a,r5
      000842 60 40            [24] 2684 	jz	00110$
                                   2685 ;	ECEN4330Lab7.c:621: drawPixel(x+i, y+j, color);
      000844 8B 06            [24] 2686 	mov	ar6,r3
      000846 7F 00            [12] 2687 	mov	r7,#0x00
      000848 EE               [12] 2688 	mov	a,r6
      000849 25*55            [12] 2689 	add	a,_drawChar_x_65536_311
      00084B F5 82            [12] 2690 	mov	dpl,a
      00084D EF               [12] 2691 	mov	a,r7
      00084E 35*56            [12] 2692 	addc	a,(_drawChar_x_65536_311 + 1)
      000850 F5 83            [12] 2693 	mov	dph,a
      000852 8A 06            [24] 2694 	mov	ar6,r2
      000854 7F 00            [12] 2695 	mov	r7,#0x00
      000856 EE               [12] 2696 	mov	a,r6
      000857 25*4D            [12] 2697 	add	a,_drawChar_PARM_2
      000859 F5*41            [12] 2698 	mov	_drawPixel_PARM_2,a
      00085B EF               [12] 2699 	mov	a,r7
      00085C 35*4E            [12] 2700 	addc	a,(_drawChar_PARM_2 + 1)
      00085E F5*42            [12] 2701 	mov	(_drawPixel_PARM_2 + 1),a
      000860 85*50*43         [24] 2702 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000863 85*51*44         [24] 2703 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000866 C0 05            [24] 2704 	push	ar5
      000868 C0 04            [24] 2705 	push	ar4
      00086A C0 03            [24] 2706 	push	ar3
      00086C C0 02            [24] 2707 	push	ar2
      00086E C0 01            [24] 2708 	push	ar1
      000870 C0 00            [24] 2709 	push	ar0
      000872 12r05r40         [24] 2710 	lcall	_drawPixel
      000875 D0 00            [24] 2711 	pop	ar0
      000877 D0 01            [24] 2712 	pop	ar1
      000879 D0 02            [24] 2713 	pop	ar2
      00087B D0 03            [24] 2714 	pop	ar3
      00087D D0 04            [24] 2715 	pop	ar4
      00087F D0 05            [24] 2716 	pop	ar5
      000881 02r09r51         [24] 2717 	ljmp	00119$
      000884                       2718 00110$:
                                   2719 ;	ECEN4330Lab7.c:624: fillRect(x+(i*size), y+(j*size), size, size, color);
      000884 8A F0            [24] 2720 	mov	b,r2
      000886 E5*54            [12] 2721 	mov	a,_drawChar_PARM_6
      000888 A4               [48] 2722 	mul	ab
      000889 25*4D            [12] 2723 	add	a,_drawChar_PARM_2
      00088B F5*45            [12] 2724 	mov	_fillRect_PARM_2,a
      00088D E5*4E            [12] 2725 	mov	a,(_drawChar_PARM_2 + 1)
      00088F 35 F0            [12] 2726 	addc	a,b
      000891 F5*46            [12] 2727 	mov	(_fillRect_PARM_2 + 1),a
      000893 AE*54            [24] 2728 	mov	r6,_drawChar_PARM_6
      000895 7F 00            [12] 2729 	mov	r7,#0x00
      000897 8E*47            [24] 2730 	mov	_fillRect_PARM_3,r6
      000899 8F*48            [24] 2731 	mov	(_fillRect_PARM_3 + 1),r7
      00089B 8E*49            [24] 2732 	mov	_fillRect_PARM_4,r6
      00089D 8F*4A            [24] 2733 	mov	(_fillRect_PARM_4 + 1),r7
      00089F 85*50*4B         [24] 2734 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      0008A2 85*51*4C         [24] 2735 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      0008A5 85*58 82         [24] 2736 	mov	dpl,_drawChar_sloc1_1_0
      0008A8 85*59 83         [24] 2737 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      0008AB C0 05            [24] 2738 	push	ar5
      0008AD C0 04            [24] 2739 	push	ar4
      0008AF C0 03            [24] 2740 	push	ar3
      0008B1 C0 02            [24] 2741 	push	ar2
      0008B3 C0 01            [24] 2742 	push	ar1
      0008B5 C0 00            [24] 2743 	push	ar0
      0008B7 12r05r91         [24] 2744 	lcall	_fillRect
      0008BA D0 00            [24] 2745 	pop	ar0
      0008BC D0 01            [24] 2746 	pop	ar1
      0008BE D0 02            [24] 2747 	pop	ar2
      0008C0 D0 03            [24] 2748 	pop	ar3
      0008C2 D0 04            [24] 2749 	pop	ar4
      0008C4 D0 05            [24] 2750 	pop	ar5
      0008C6 02r09r51         [24] 2751 	ljmp	00119$
      0008C9                       2752 00118$:
                                   2753 ;	ECEN4330Lab7.c:626: } else if (bg != color)
      0008C9 30*00 03         [24] 2754 	jnb	_drawChar_sloc0_1_0,00198$
      0008CC 02r09r51         [24] 2755 	ljmp	00119$
      0008CF                       2756 00198$:
                                   2757 ;	ECEN4330Lab7.c:628: if (size == 1) // default size
      0008CF EC               [12] 2758 	mov	a,r4
      0008D0 60 3F            [24] 2759 	jz	00113$
                                   2760 ;	ECEN4330Lab7.c:630: drawPixel(x+i, y+j, bg);
      0008D2 8B 06            [24] 2761 	mov	ar6,r3
      0008D4 7F 00            [12] 2762 	mov	r7,#0x00
      0008D6 EE               [12] 2763 	mov	a,r6
      0008D7 25*55            [12] 2764 	add	a,_drawChar_x_65536_311
      0008D9 F5 82            [12] 2765 	mov	dpl,a
      0008DB EF               [12] 2766 	mov	a,r7
      0008DC 35*56            [12] 2767 	addc	a,(_drawChar_x_65536_311 + 1)
      0008DE F5 83            [12] 2768 	mov	dph,a
      0008E0 8A 06            [24] 2769 	mov	ar6,r2
      0008E2 7F 00            [12] 2770 	mov	r7,#0x00
      0008E4 EE               [12] 2771 	mov	a,r6
      0008E5 25*4D            [12] 2772 	add	a,_drawChar_PARM_2
      0008E7 F5*41            [12] 2773 	mov	_drawPixel_PARM_2,a
      0008E9 EF               [12] 2774 	mov	a,r7
      0008EA 35*4E            [12] 2775 	addc	a,(_drawChar_PARM_2 + 1)
      0008EC F5*42            [12] 2776 	mov	(_drawPixel_PARM_2 + 1),a
      0008EE 85*52*43         [24] 2777 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      0008F1 85*53*44         [24] 2778 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      0008F4 C0 05            [24] 2779 	push	ar5
      0008F6 C0 04            [24] 2780 	push	ar4
      0008F8 C0 03            [24] 2781 	push	ar3
      0008FA C0 02            [24] 2782 	push	ar2
      0008FC C0 01            [24] 2783 	push	ar1
      0008FE C0 00            [24] 2784 	push	ar0
      000900 12r05r40         [24] 2785 	lcall	_drawPixel
      000903 D0 00            [24] 2786 	pop	ar0
      000905 D0 01            [24] 2787 	pop	ar1
      000907 D0 02            [24] 2788 	pop	ar2
      000909 D0 03            [24] 2789 	pop	ar3
      00090B D0 04            [24] 2790 	pop	ar4
      00090D D0 05            [24] 2791 	pop	ar5
      00090F 80 40            [24] 2792 	sjmp	00119$
      000911                       2793 00113$:
                                   2794 ;	ECEN4330Lab7.c:634: fillRect(x+i*size, y+j*size, size, size, bg);
      000911 8A F0            [24] 2795 	mov	b,r2
      000913 E5*54            [12] 2796 	mov	a,_drawChar_PARM_6
      000915 A4               [48] 2797 	mul	ab
      000916 25*4D            [12] 2798 	add	a,_drawChar_PARM_2
      000918 F5*45            [12] 2799 	mov	_fillRect_PARM_2,a
      00091A E5*4E            [12] 2800 	mov	a,(_drawChar_PARM_2 + 1)
      00091C 35 F0            [12] 2801 	addc	a,b
      00091E F5*46            [12] 2802 	mov	(_fillRect_PARM_2 + 1),a
      000920 AE*54            [24] 2803 	mov	r6,_drawChar_PARM_6
      000922 7F 00            [12] 2804 	mov	r7,#0x00
      000924 8E*47            [24] 2805 	mov	_fillRect_PARM_3,r6
      000926 8F*48            [24] 2806 	mov	(_fillRect_PARM_3 + 1),r7
      000928 8E*49            [24] 2807 	mov	_fillRect_PARM_4,r6
      00092A 8F*4A            [24] 2808 	mov	(_fillRect_PARM_4 + 1),r7
      00092C 85*52*4B         [24] 2809 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      00092F 85*53*4C         [24] 2810 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000932 88 82            [24] 2811 	mov	dpl,r0
      000934 89 83            [24] 2812 	mov	dph,r1
      000936 C0 05            [24] 2813 	push	ar5
      000938 C0 04            [24] 2814 	push	ar4
      00093A C0 03            [24] 2815 	push	ar3
      00093C C0 02            [24] 2816 	push	ar2
      00093E C0 01            [24] 2817 	push	ar1
      000940 C0 00            [24] 2818 	push	ar0
      000942 12r05r91         [24] 2819 	lcall	_fillRect
      000945 D0 00            [24] 2820 	pop	ar0
      000947 D0 01            [24] 2821 	pop	ar1
      000949 D0 02            [24] 2822 	pop	ar2
      00094B D0 03            [24] 2823 	pop	ar3
      00094D D0 04            [24] 2824 	pop	ar4
      00094F D0 05            [24] 2825 	pop	ar5
      000951                       2826 00119$:
                                   2827 ;	ECEN4330Lab7.c:638: line >>= 1;
      000951 E5*57            [12] 2828 	mov	a,_drawChar_line_196608_315
      000953 C3               [12] 2829 	clr	c
      000954 13               [12] 2830 	rrc	a
      000955 F5*57            [12] 2831 	mov	_drawChar_line_196608_315,a
                                   2832 ;	ECEN4330Lab7.c:615: for (char j = 0; j<8; j++)
      000957 0A               [12] 2833 	inc	r2
      000958 02r08r31         [24] 2834 	ljmp	00123$
      00095B                       2835 00127$:
                                   2836 ;	ECEN4330Lab7.c:602: for (char i=0; i<6; i++ )
      00095B 0B               [12] 2837 	inc	r3
                                   2838 ;	ECEN4330Lab7.c:642: }
      00095C 02r07rE0         [24] 2839 	ljmp	00126$
                                   2840 ;------------------------------------------------------------
                                   2841 ;Allocation info for local variables in function 'write'
                                   2842 ;------------------------------------------------------------
                                   2843 ;c                         Allocated to registers r7 
                                   2844 ;------------------------------------------------------------
                                   2845 ;	ECEN4330Lab7.c:650: void write(u8 c)
                                   2846 ;	-----------------------------------------
                                   2847 ;	 function write
                                   2848 ;	-----------------------------------------
      00095F                       2849 _write:
      00095F AF 82            [24] 2850 	mov	r7,dpl
                                   2851 ;	ECEN4330Lab7.c:652: if (c == '\n')
      000961 BF 0A 22         [24] 2852 	cjne	r7,#0x0a,00105$
                                   2853 ;	ECEN4330Lab7.c:654: cursor_y += textsize*8;
      000964 AD*0C            [24] 2854 	mov	r5,_textsize
      000966 E4               [12] 2855 	clr	a
      000967 C4               [12] 2856 	swap	a
      000968 03               [12] 2857 	rr	a
      000969 54 F8            [12] 2858 	anl	a,#0xf8
      00096B CD               [12] 2859 	xch	a,r5
      00096C C4               [12] 2860 	swap	a
      00096D 03               [12] 2861 	rr	a
      00096E CD               [12] 2862 	xch	a,r5
      00096F 6D               [12] 2863 	xrl	a,r5
      000970 CD               [12] 2864 	xch	a,r5
      000971 54 F8            [12] 2865 	anl	a,#0xf8
      000973 CD               [12] 2866 	xch	a,r5
      000974 6D               [12] 2867 	xrl	a,r5
      000975 FE               [12] 2868 	mov	r6,a
      000976 ED               [12] 2869 	mov	a,r5
      000977 25*0A            [12] 2870 	add	a,_cursor_y
      000979 F5*0A            [12] 2871 	mov	_cursor_y,a
      00097B EE               [12] 2872 	mov	a,r6
      00097C 35*0B            [12] 2873 	addc	a,(_cursor_y + 1)
      00097E F5*0B            [12] 2874 	mov	(_cursor_y + 1),a
                                   2875 ;	ECEN4330Lab7.c:655: cursor_x  = 0;
      000980 E4               [12] 2876 	clr	a
      000981 F5*08            [12] 2877 	mov	_cursor_x,a
      000983 F5*09            [12] 2878 	mov	(_cursor_x + 1),a
      000985 22               [24] 2879 	ret
      000986                       2880 00105$:
                                   2881 ;	ECEN4330Lab7.c:657: else if (c == '\r')
      000986 BF 0D 01         [24] 2882 	cjne	r7,#0x0d,00119$
      000989 22               [24] 2883 	ret
      00098A                       2884 00119$:
                                   2885 ;	ECEN4330Lab7.c:663: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      00098A 85*0A*4D         [24] 2886 	mov	_drawChar_PARM_2,_cursor_y
      00098D 85*0B*4E         [24] 2887 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000990 8F*4F            [24] 2888 	mov	_drawChar_PARM_3,r7
      000992 85*0E*50         [24] 2889 	mov	_drawChar_PARM_4,_textcolor
      000995 85*0F*51         [24] 2890 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000998 85*10*52         [24] 2891 	mov	_drawChar_PARM_5,_textbgcolor
      00099B 85*11*53         [24] 2892 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      00099E 85*0C*54         [24] 2893 	mov	_drawChar_PARM_6,_textsize
      0009A1 85*08 82         [24] 2894 	mov	dpl,_cursor_x
      0009A4 85*09 83         [24] 2895 	mov	dph,(_cursor_x + 1)
      0009A7 12r07r55         [24] 2896 	lcall	_drawChar
                                   2897 ;	ECEN4330Lab7.c:664: cursor_x += textsize*6;
      0009AA 85*0C*00         [24] 2898 	mov	__mulint_PARM_2,_textsize
      0009AD 75*01 00         [24] 2899 	mov	(__mulint_PARM_2 + 1),#0x00
      0009B0 90 00 06         [24] 2900 	mov	dptr,#0x0006
      0009B3 12r00r00         [24] 2901 	lcall	__mulint
      0009B6 AE 82            [24] 2902 	mov	r6,dpl
      0009B8 AF 83            [24] 2903 	mov	r7,dph
      0009BA EE               [12] 2904 	mov	a,r6
      0009BB 25*08            [12] 2905 	add	a,_cursor_x
      0009BD F5*08            [12] 2906 	mov	_cursor_x,a
      0009BF EF               [12] 2907 	mov	a,r7
      0009C0 35*09            [12] 2908 	addc	a,(_cursor_x + 1)
      0009C2 F5*09            [12] 2909 	mov	(_cursor_x + 1),a
                                   2910 ;	ECEN4330Lab7.c:666: }
      0009C4 22               [24] 2911 	ret
                                   2912 ;------------------------------------------------------------
                                   2913 ;Allocation info for local variables in function 'LCD_string_write'
                                   2914 ;------------------------------------------------------------
                                   2915 ;str                       Allocated to registers r5 r6 r7 
                                   2916 ;i                         Allocated to registers r3 r4 
                                   2917 ;------------------------------------------------------------
                                   2918 ;	ECEN4330Lab7.c:674: void LCD_string_write(char *str)
                                   2919 ;	-----------------------------------------
                                   2920 ;	 function LCD_string_write
                                   2921 ;	-----------------------------------------
      0009C5                       2922 _LCD_string_write:
      0009C5 AD 82            [24] 2923 	mov	r5,dpl
      0009C7 AE 83            [24] 2924 	mov	r6,dph
      0009C9 AF F0            [24] 2925 	mov	r7,b
                                   2926 ;	ECEN4330Lab7.c:677: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009CB 7B 00            [12] 2927 	mov	r3,#0x00
      0009CD 7C 00            [12] 2928 	mov	r4,#0x00
      0009CF                       2929 00103$:
      0009CF EB               [12] 2930 	mov	a,r3
      0009D0 2D               [12] 2931 	add	a,r5
      0009D1 F8               [12] 2932 	mov	r0,a
      0009D2 EC               [12] 2933 	mov	a,r4
      0009D3 3E               [12] 2934 	addc	a,r6
      0009D4 F9               [12] 2935 	mov	r1,a
      0009D5 8F 02            [24] 2936 	mov	ar2,r7
      0009D7 88 82            [24] 2937 	mov	dpl,r0
      0009D9 89 83            [24] 2938 	mov	dph,r1
      0009DB 8A F0            [24] 2939 	mov	b,r2
      0009DD 12r00r00         [24] 2940 	lcall	__gptrget
      0009E0 FA               [12] 2941 	mov	r2,a
      0009E1 60 20            [24] 2942 	jz	00105$
                                   2943 ;	ECEN4330Lab7.c:679: write(str[i]);  /* Call transmit data function */
      0009E3 8A 82            [24] 2944 	mov	dpl,r2
      0009E5 C0 07            [24] 2945 	push	ar7
      0009E7 C0 06            [24] 2946 	push	ar6
      0009E9 C0 05            [24] 2947 	push	ar5
      0009EB C0 04            [24] 2948 	push	ar4
      0009ED C0 03            [24] 2949 	push	ar3
      0009EF 12r09r5F         [24] 2950 	lcall	_write
      0009F2 D0 03            [24] 2951 	pop	ar3
      0009F4 D0 04            [24] 2952 	pop	ar4
      0009F6 D0 05            [24] 2953 	pop	ar5
      0009F8 D0 06            [24] 2954 	pop	ar6
      0009FA D0 07            [24] 2955 	pop	ar7
                                   2956 ;	ECEN4330Lab7.c:677: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009FC 0B               [12] 2957 	inc	r3
      0009FD BB 00 CF         [24] 2958 	cjne	r3,#0x00,00103$
      000A00 0C               [12] 2959 	inc	r4
      000A01 80 CC            [24] 2960 	sjmp	00103$
      000A03                       2961 00105$:
                                   2962 ;	ECEN4330Lab7.c:681: }
      000A03 22               [24] 2963 	ret
                                   2964 ;------------------------------------------------------------
                                   2965 ;Allocation info for local variables in function 'keyDetect'
                                   2966 ;------------------------------------------------------------
                                   2967 ;	ECEN4330Lab7.c:689: unsigned char keyDetect(){
                                   2968 ;	-----------------------------------------
                                   2969 ;	 function keyDetect
                                   2970 ;	-----------------------------------------
      000A04                       2971 _keyDetect:
                                   2972 ;	ECEN4330Lab7.c:690: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000A04 75 90 F0         [24] 2973 	mov	_P1,#0xf0
                                   2974 ;	ECEN4330Lab7.c:691: received_flag = 0;
      000A07 75*3F 00         [24] 2975 	mov	_received_flag,#0x00
                                   2976 ;	ECEN4330Lab7.c:692: do
      000A0A                       2977 00102$:
                                   2978 ;	ECEN4330Lab7.c:694: __KEYPAD_PORT__ = 0xF0;
      000A0A 75 90 F0         [24] 2979 	mov	_P1,#0xf0
                                   2980 ;	ECEN4330Lab7.c:695: colloc = __KEYPAD_PORT__;
      000A0D 85 90*00         [24] 2981 	mov	_colloc,_P1
                                   2982 ;	ECEN4330Lab7.c:696: colloc&= 0xF0;  /* mask port for column read only */
      000A10 53*00 F0         [24] 2983 	anl	_colloc,#0xf0
                                   2984 ;	ECEN4330Lab7.c:697: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000A13 74 F0            [12] 2985 	mov	a,#0xf0
      000A15 B5*00 02         [24] 2986 	cjne	a,_colloc,00190$
      000A18 80 04            [24] 2987 	sjmp	00106$
      000A1A                       2988 00190$:
      000A1A E5*3F            [12] 2989 	mov	a,_received_flag
      000A1C 60 EC            [24] 2990 	jz	00102$
                                   2991 ;	ECEN4330Lab7.c:701: do
      000A1E                       2992 00106$:
                                   2993 ;	ECEN4330Lab7.c:704: rtcPrint();
      000A1E 12r01r6D         [24] 2994 	lcall	_rtcPrint
                                   2995 ;	ECEN4330Lab7.c:705: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000A21 E5 90            [12] 2996 	mov	a,_P1
      000A23 54 F0            [12] 2997 	anl	a,#0xf0
      000A25 F5*00            [12] 2998 	mov	_colloc,a
                                   2999 ;	ECEN4330Lab7.c:706: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000A27 74 F0            [12] 3000 	mov	a,#0xf0
      000A29 B5*00 04         [24] 3001 	cjne	a,_colloc,00108$
      000A2C E5*3F            [12] 3002 	mov	a,_received_flag
      000A2E 60 EE            [24] 3003 	jz	00106$
      000A30                       3004 00108$:
                                   3005 ;	ECEN4330Lab7.c:708: delay(1);
      000A30 90 00 01         [24] 3006 	mov	dptr,#0x0001
      000A33 12r00r25         [24] 3007 	lcall	_delay
                                   3008 ;	ECEN4330Lab7.c:709: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A36 E5 90            [12] 3009 	mov	a,_P1
      000A38 54 F0            [12] 3010 	anl	a,#0xf0
      000A3A F5*00            [12] 3011 	mov	_colloc,a
                                   3012 ;	ECEN4330Lab7.c:710: }while(colloc == 0xF0 && received_flag == 0);
      000A3C 74 F0            [12] 3013 	mov	a,#0xf0
      000A3E B5*00 04         [24] 3014 	cjne	a,_colloc,00112$
      000A41 E5*3F            [12] 3015 	mov	a,_received_flag
      000A43 60 D9            [24] 3016 	jz	00106$
      000A45                       3017 00112$:
                                   3018 ;	ECEN4330Lab7.c:712: if(received_flag == 0){
      000A45 E5*3F            [12] 3019 	mov	a,_received_flag
      000A47 60 03            [24] 3020 	jz	00198$
      000A49 02r0Br0D         [24] 3021 	ljmp	00134$
      000A4C                       3022 00198$:
                                   3023 ;	ECEN4330Lab7.c:713: while(1)
      000A4C                       3024 00122$:
                                   3025 ;	ECEN4330Lab7.c:716: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000A4C 75 90 FE         [24] 3026 	mov	_P1,#0xfe
                                   3027 ;	ECEN4330Lab7.c:717: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A4F E5 90            [12] 3028 	mov	a,_P1
      000A51 54 F0            [12] 3029 	anl	a,#0xf0
      000A53 F5*00            [12] 3030 	mov	_colloc,a
                                   3031 ;	ECEN4330Lab7.c:718: if(colloc != 0xF0)
      000A55 74 F0            [12] 3032 	mov	a,#0xf0
      000A57 B5*00 02         [24] 3033 	cjne	a,_colloc,00199$
      000A5A 80 05            [24] 3034 	sjmp	00114$
      000A5C                       3035 00199$:
                                   3036 ;	ECEN4330Lab7.c:720: rowloc = 0;
      000A5C 75*01 00         [24] 3037 	mov	_rowloc,#0x00
                                   3038 ;	ECEN4330Lab7.c:721: break;
      000A5F 80 3D            [24] 3039 	sjmp	00123$
      000A61                       3040 00114$:
                                   3041 ;	ECEN4330Lab7.c:724: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000A61 75 90 FD         [24] 3042 	mov	_P1,#0xfd
                                   3043 ;	ECEN4330Lab7.c:725: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A64 E5 90            [12] 3044 	mov	a,_P1
      000A66 54 F0            [12] 3045 	anl	a,#0xf0
      000A68 F5*00            [12] 3046 	mov	_colloc,a
                                   3047 ;	ECEN4330Lab7.c:726: if(colloc != 0xF0)
      000A6A 74 F0            [12] 3048 	mov	a,#0xf0
      000A6C B5*00 02         [24] 3049 	cjne	a,_colloc,00200$
      000A6F 80 05            [24] 3050 	sjmp	00116$
      000A71                       3051 00200$:
                                   3052 ;	ECEN4330Lab7.c:728: rowloc = 1;
      000A71 75*01 01         [24] 3053 	mov	_rowloc,#0x01
                                   3054 ;	ECEN4330Lab7.c:729: break;
      000A74 80 28            [24] 3055 	sjmp	00123$
      000A76                       3056 00116$:
                                   3057 ;	ECEN4330Lab7.c:732: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000A76 75 90 FB         [24] 3058 	mov	_P1,#0xfb
                                   3059 ;	ECEN4330Lab7.c:733: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A79 E5 90            [12] 3060 	mov	a,_P1
      000A7B 54 F0            [12] 3061 	anl	a,#0xf0
      000A7D F5*00            [12] 3062 	mov	_colloc,a
                                   3063 ;	ECEN4330Lab7.c:734: if(colloc != 0xF0)
      000A7F 74 F0            [12] 3064 	mov	a,#0xf0
      000A81 B5*00 02         [24] 3065 	cjne	a,_colloc,00201$
      000A84 80 05            [24] 3066 	sjmp	00118$
      000A86                       3067 00201$:
                                   3068 ;	ECEN4330Lab7.c:736: rowloc = 2;
      000A86 75*01 02         [24] 3069 	mov	_rowloc,#0x02
                                   3070 ;	ECEN4330Lab7.c:737: break;
      000A89 80 13            [24] 3071 	sjmp	00123$
      000A8B                       3072 00118$:
                                   3073 ;	ECEN4330Lab7.c:740: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000A8B 75 90 F7         [24] 3074 	mov	_P1,#0xf7
                                   3075 ;	ECEN4330Lab7.c:741: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A8E E5 90            [12] 3076 	mov	a,_P1
      000A90 54 F0            [12] 3077 	anl	a,#0xf0
      000A92 F5*00            [12] 3078 	mov	_colloc,a
                                   3079 ;	ECEN4330Lab7.c:742: if(colloc != 0xF0)
      000A94 74 F0            [12] 3080 	mov	a,#0xf0
      000A96 B5*00 02         [24] 3081 	cjne	a,_colloc,00202$
      000A99 80 B1            [24] 3082 	sjmp	00122$
      000A9B                       3083 00202$:
                                   3084 ;	ECEN4330Lab7.c:744: rowloc = 3;
      000A9B 75*01 03         [24] 3085 	mov	_rowloc,#0x03
                                   3086 ;	ECEN4330Lab7.c:745: break;
      000A9E                       3087 00123$:
                                   3088 ;	ECEN4330Lab7.c:749: if(colloc == 0xE0)
      000A9E 74 E0            [12] 3089 	mov	a,#0xe0
      000AA0 B5*00 15         [24] 3090 	cjne	a,_colloc,00131$
                                   3091 ;	ECEN4330Lab7.c:751: return(keypad[rowloc][0]);
      000AA3 E5*01            [12] 3092 	mov	a,_rowloc
      000AA5 75 F0 04         [24] 3093 	mov	b,#0x04
      000AA8 A4               [48] 3094 	mul	ab
      000AA9 24rFB            [12] 3095 	add	a,#_keypad
      000AAB F5 82            [12] 3096 	mov	dpl,a
      000AAD 74s04            [12] 3097 	mov	a,#(_keypad >> 8)
      000AAF 35 F0            [12] 3098 	addc	a,b
      000AB1 F5 83            [12] 3099 	mov	dph,a
      000AB3 E4               [12] 3100 	clr	a
      000AB4 93               [24] 3101 	movc	a,@a+dptr
      000AB5 F5 82            [12] 3102 	mov	dpl,a
      000AB7 22               [24] 3103 	ret
      000AB8                       3104 00131$:
                                   3105 ;	ECEN4330Lab7.c:753: else if(colloc == 0xD0)
      000AB8 74 D0            [12] 3106 	mov	a,#0xd0
      000ABA B5*00 18         [24] 3107 	cjne	a,_colloc,00128$
                                   3108 ;	ECEN4330Lab7.c:755: return(keypad[rowloc][1]);
      000ABD E5*01            [12] 3109 	mov	a,_rowloc
      000ABF 75 F0 04         [24] 3110 	mov	b,#0x04
      000AC2 A4               [48] 3111 	mul	ab
      000AC3 24rFB            [12] 3112 	add	a,#_keypad
      000AC5 FE               [12] 3113 	mov	r6,a
      000AC6 74s04            [12] 3114 	mov	a,#(_keypad >> 8)
      000AC8 35 F0            [12] 3115 	addc	a,b
      000ACA FF               [12] 3116 	mov	r7,a
      000ACB 8E 82            [24] 3117 	mov	dpl,r6
      000ACD 8F 83            [24] 3118 	mov	dph,r7
      000ACF A3               [24] 3119 	inc	dptr
      000AD0 E4               [12] 3120 	clr	a
      000AD1 93               [24] 3121 	movc	a,@a+dptr
      000AD2 F5 82            [12] 3122 	mov	dpl,a
      000AD4 22               [24] 3123 	ret
      000AD5                       3124 00128$:
                                   3125 ;	ECEN4330Lab7.c:757: else if(colloc == 0xB0)
      000AD5 74 B0            [12] 3126 	mov	a,#0xb0
      000AD7 B5*00 19         [24] 3127 	cjne	a,_colloc,00125$
                                   3128 ;	ECEN4330Lab7.c:759: return(keypad[rowloc][2]);
      000ADA E5*01            [12] 3129 	mov	a,_rowloc
      000ADC 75 F0 04         [24] 3130 	mov	b,#0x04
      000ADF A4               [48] 3131 	mul	ab
      000AE0 24rFB            [12] 3132 	add	a,#_keypad
      000AE2 FE               [12] 3133 	mov	r6,a
      000AE3 74s04            [12] 3134 	mov	a,#(_keypad >> 8)
      000AE5 35 F0            [12] 3135 	addc	a,b
      000AE7 FF               [12] 3136 	mov	r7,a
      000AE8 8E 82            [24] 3137 	mov	dpl,r6
      000AEA 8F 83            [24] 3138 	mov	dph,r7
      000AEC A3               [24] 3139 	inc	dptr
      000AED A3               [24] 3140 	inc	dptr
      000AEE E4               [12] 3141 	clr	a
      000AEF 93               [24] 3142 	movc	a,@a+dptr
      000AF0 F5 82            [12] 3143 	mov	dpl,a
      000AF2 22               [24] 3144 	ret
      000AF3                       3145 00125$:
                                   3146 ;	ECEN4330Lab7.c:763: return(keypad[rowloc][3]);
      000AF3 E5*01            [12] 3147 	mov	a,_rowloc
      000AF5 75 F0 04         [24] 3148 	mov	b,#0x04
      000AF8 A4               [48] 3149 	mul	ab
      000AF9 24rFB            [12] 3150 	add	a,#_keypad
      000AFB FE               [12] 3151 	mov	r6,a
      000AFC 74s04            [12] 3152 	mov	a,#(_keypad >> 8)
      000AFE 35 F0            [12] 3153 	addc	a,b
      000B00 FF               [12] 3154 	mov	r7,a
      000B01 8E 82            [24] 3155 	mov	dpl,r6
      000B03 8F 83            [24] 3156 	mov	dph,r7
      000B05 A3               [24] 3157 	inc	dptr
      000B06 A3               [24] 3158 	inc	dptr
      000B07 A3               [24] 3159 	inc	dptr
      000B08 E4               [12] 3160 	clr	a
      000B09 93               [24] 3161 	movc	a,@a+dptr
      000B0A F5 82            [12] 3162 	mov	dpl,a
      000B0C 22               [24] 3163 	ret
      000B0D                       3164 00134$:
                                   3165 ;	ECEN4330Lab7.c:767: received_flag = 0;
      000B0D 75*3F 00         [24] 3166 	mov	_received_flag,#0x00
                                   3167 ;	ECEN4330Lab7.c:768: return received_byte - 0x40;
      000B10 E5*3E            [12] 3168 	mov	a,_received_byte
      000B12 24 C0            [12] 3169 	add	a,#0xc0
      000B14 F5 82            [12] 3170 	mov	dpl,a
                                   3171 ;	ECEN4330Lab7.c:770: }
      000B16 22               [24] 3172 	ret
                                   3173 ;------------------------------------------------------------
                                   3174 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3175 ;------------------------------------------------------------
                                   3176 ;a                         Allocated to registers r7 
                                   3177 ;h                         Allocated to registers r7 
                                   3178 ;------------------------------------------------------------
                                   3179 ;	ECEN4330Lab7.c:778: unsigned char ASCIItoHEX(unsigned char a){
                                   3180 ;	-----------------------------------------
                                   3181 ;	 function ASCIItoHEX
                                   3182 ;	-----------------------------------------
      000B17                       3183 _ASCIItoHEX:
      000B17 AF 82            [24] 3184 	mov	r7,dpl
                                   3185 ;	ECEN4330Lab7.c:781: switch (a)
      000B19 BF 30 00         [24] 3186 	cjne	r7,#0x30,00129$
      000B1C                       3187 00129$:
      000B1C 50 03            [24] 3188 	jnc	00130$
      000B1E 02r0BrA8         [24] 3189 	ljmp	00117$
      000B21                       3190 00130$:
      000B21 EF               [12] 3191 	mov	a,r7
      000B22 24 B9            [12] 3192 	add	a,#0xff - 0x46
      000B24 50 03            [24] 3193 	jnc	00131$
      000B26 02r0BrA8         [24] 3194 	ljmp	00117$
      000B29                       3195 00131$:
      000B29 EF               [12] 3196 	mov	a,r7
      000B2A 24 D0            [12] 3197 	add	a,#0xd0
      000B2C FF               [12] 3198 	mov	r7,a
      000B2D 24 0A            [12] 3199 	add	a,#(00132$-3-.)
      000B2F 83               [24] 3200 	movc	a,@a+pc
      000B30 F5 82            [12] 3201 	mov	dpl,a
      000B32 EF               [12] 3202 	mov	a,r7
      000B33 24 1B            [12] 3203 	add	a,#(00133$-3-.)
      000B35 83               [24] 3204 	movc	a,@a+pc
      000B36 F5 83            [12] 3205 	mov	dph,a
      000B38 E4               [12] 3206 	clr	a
      000B39 73               [24] 3207 	jmp	@a+dptr
      000B3A                       3208 00132$:
      000B3Ar68                    3209 	.db	00101$
      000B3Br6C                    3210 	.db	00102$
      000B3Cr70                    3211 	.db	00103$
      000B3Dr74                    3212 	.db	00104$
      000B3Er78                    3213 	.db	00105$
      000B3Fr7C                    3214 	.db	00106$
      000B40r80                    3215 	.db	00107$
      000B41r84                    3216 	.db	00108$
      000B42r88                    3217 	.db	00109$
      000B43r8C                    3218 	.db	00110$
      000B44rA8                    3219 	.db	00117$
      000B45rA8                    3220 	.db	00117$
      000B46rA8                    3221 	.db	00117$
      000B47rA8                    3222 	.db	00117$
      000B48rA8                    3223 	.db	00117$
      000B49rA8                    3224 	.db	00117$
      000B4ArA8                    3225 	.db	00117$
      000B4Br90                    3226 	.db	00111$
      000B4Cr94                    3227 	.db	00112$
      000B4Dr98                    3228 	.db	00113$
      000B4Er9C                    3229 	.db	00114$
      000B4FrA0                    3230 	.db	00115$
      000B50rA4                    3231 	.db	00116$
      000B51                       3232 00133$:
      000B51s0B                    3233 	.db	00101$>>8
      000B52s0B                    3234 	.db	00102$>>8
      000B53s0B                    3235 	.db	00103$>>8
      000B54s0B                    3236 	.db	00104$>>8
      000B55s0B                    3237 	.db	00105$>>8
      000B56s0B                    3238 	.db	00106$>>8
      000B57s0B                    3239 	.db	00107$>>8
      000B58s0B                    3240 	.db	00108$>>8
      000B59s0B                    3241 	.db	00109$>>8
      000B5As0B                    3242 	.db	00110$>>8
      000B5Bs0B                    3243 	.db	00117$>>8
      000B5Cs0B                    3244 	.db	00117$>>8
      000B5Ds0B                    3245 	.db	00117$>>8
      000B5Es0B                    3246 	.db	00117$>>8
      000B5Fs0B                    3247 	.db	00117$>>8
      000B60s0B                    3248 	.db	00117$>>8
      000B61s0B                    3249 	.db	00117$>>8
      000B62s0B                    3250 	.db	00111$>>8
      000B63s0B                    3251 	.db	00112$>>8
      000B64s0B                    3252 	.db	00113$>>8
      000B65s0B                    3253 	.db	00114$>>8
      000B66s0B                    3254 	.db	00115$>>8
      000B67s0B                    3255 	.db	00116$>>8
                                   3256 ;	ECEN4330Lab7.c:783: case '0':
      000B68                       3257 00101$:
                                   3258 ;	ECEN4330Lab7.c:784: h = 0x00;
      000B68 7F 00            [12] 3259 	mov	r7,#0x00
                                   3260 ;	ECEN4330Lab7.c:785: break;
                                   3261 ;	ECEN4330Lab7.c:786: case '1':
      000B6A 80 3E            [24] 3262 	sjmp	00118$
      000B6C                       3263 00102$:
                                   3264 ;	ECEN4330Lab7.c:787: h = 0x01;
      000B6C 7F 01            [12] 3265 	mov	r7,#0x01
                                   3266 ;	ECEN4330Lab7.c:788: break;
                                   3267 ;	ECEN4330Lab7.c:789: case '2':
      000B6E 80 3A            [24] 3268 	sjmp	00118$
      000B70                       3269 00103$:
                                   3270 ;	ECEN4330Lab7.c:790: h = 0x02;
      000B70 7F 02            [12] 3271 	mov	r7,#0x02
                                   3272 ;	ECEN4330Lab7.c:791: break;
                                   3273 ;	ECEN4330Lab7.c:792: case '3':
      000B72 80 36            [24] 3274 	sjmp	00118$
      000B74                       3275 00104$:
                                   3276 ;	ECEN4330Lab7.c:793: h = 0x03;
      000B74 7F 03            [12] 3277 	mov	r7,#0x03
                                   3278 ;	ECEN4330Lab7.c:794: break;
                                   3279 ;	ECEN4330Lab7.c:795: case '4':
      000B76 80 32            [24] 3280 	sjmp	00118$
      000B78                       3281 00105$:
                                   3282 ;	ECEN4330Lab7.c:796: h = 0x04;
      000B78 7F 04            [12] 3283 	mov	r7,#0x04
                                   3284 ;	ECEN4330Lab7.c:797: break;
                                   3285 ;	ECEN4330Lab7.c:798: case '5':
      000B7A 80 2E            [24] 3286 	sjmp	00118$
      000B7C                       3287 00106$:
                                   3288 ;	ECEN4330Lab7.c:799: h = 0x05;
      000B7C 7F 05            [12] 3289 	mov	r7,#0x05
                                   3290 ;	ECEN4330Lab7.c:800: break;
                                   3291 ;	ECEN4330Lab7.c:801: case '6':
      000B7E 80 2A            [24] 3292 	sjmp	00118$
      000B80                       3293 00107$:
                                   3294 ;	ECEN4330Lab7.c:802: h = 0x06;
      000B80 7F 06            [12] 3295 	mov	r7,#0x06
                                   3296 ;	ECEN4330Lab7.c:803: break;
                                   3297 ;	ECEN4330Lab7.c:804: case '7':
      000B82 80 26            [24] 3298 	sjmp	00118$
      000B84                       3299 00108$:
                                   3300 ;	ECEN4330Lab7.c:805: h = 0x07;
      000B84 7F 07            [12] 3301 	mov	r7,#0x07
                                   3302 ;	ECEN4330Lab7.c:806: break;
                                   3303 ;	ECEN4330Lab7.c:807: case '8':
      000B86 80 22            [24] 3304 	sjmp	00118$
      000B88                       3305 00109$:
                                   3306 ;	ECEN4330Lab7.c:808: h = 0x08;
      000B88 7F 08            [12] 3307 	mov	r7,#0x08
                                   3308 ;	ECEN4330Lab7.c:809: break;
                                   3309 ;	ECEN4330Lab7.c:810: case '9':
      000B8A 80 1E            [24] 3310 	sjmp	00118$
      000B8C                       3311 00110$:
                                   3312 ;	ECEN4330Lab7.c:811: h = 0x09;
      000B8C 7F 09            [12] 3313 	mov	r7,#0x09
                                   3314 ;	ECEN4330Lab7.c:812: break;
                                   3315 ;	ECEN4330Lab7.c:813: case 'A':
      000B8E 80 1A            [24] 3316 	sjmp	00118$
      000B90                       3317 00111$:
                                   3318 ;	ECEN4330Lab7.c:814: h = 0x0A;
      000B90 7F 0A            [12] 3319 	mov	r7,#0x0a
                                   3320 ;	ECEN4330Lab7.c:815: break;
                                   3321 ;	ECEN4330Lab7.c:816: case 'B':
      000B92 80 16            [24] 3322 	sjmp	00118$
      000B94                       3323 00112$:
                                   3324 ;	ECEN4330Lab7.c:817: h = 0x0B;
      000B94 7F 0B            [12] 3325 	mov	r7,#0x0b
                                   3326 ;	ECEN4330Lab7.c:818: break;
                                   3327 ;	ECEN4330Lab7.c:819: case 'C':
      000B96 80 12            [24] 3328 	sjmp	00118$
      000B98                       3329 00113$:
                                   3330 ;	ECEN4330Lab7.c:820: h = 0x0C;
      000B98 7F 0C            [12] 3331 	mov	r7,#0x0c
                                   3332 ;	ECEN4330Lab7.c:821: break;
                                   3333 ;	ECEN4330Lab7.c:822: case 'D':
      000B9A 80 0E            [24] 3334 	sjmp	00118$
      000B9C                       3335 00114$:
                                   3336 ;	ECEN4330Lab7.c:823: h = 0x0D;
      000B9C 7F 0D            [12] 3337 	mov	r7,#0x0d
                                   3338 ;	ECEN4330Lab7.c:824: break;
                                   3339 ;	ECEN4330Lab7.c:825: case 'E':
      000B9E 80 0A            [24] 3340 	sjmp	00118$
      000BA0                       3341 00115$:
                                   3342 ;	ECEN4330Lab7.c:826: h = 0x0E;
      000BA0 7F 0E            [12] 3343 	mov	r7,#0x0e
                                   3344 ;	ECEN4330Lab7.c:827: break;
                                   3345 ;	ECEN4330Lab7.c:828: case 'F':
      000BA2 80 06            [24] 3346 	sjmp	00118$
      000BA4                       3347 00116$:
                                   3348 ;	ECEN4330Lab7.c:829: h = 0x0F;
      000BA4 7F 0F            [12] 3349 	mov	r7,#0x0f
                                   3350 ;	ECEN4330Lab7.c:830: break;
                                   3351 ;	ECEN4330Lab7.c:831: default:
      000BA6 80 02            [24] 3352 	sjmp	00118$
      000BA8                       3353 00117$:
                                   3354 ;	ECEN4330Lab7.c:832: h = 0x00;
      000BA8 7F 00            [12] 3355 	mov	r7,#0x00
                                   3356 ;	ECEN4330Lab7.c:834: }
      000BAA                       3357 00118$:
                                   3358 ;	ECEN4330Lab7.c:835: return h;
      000BAA 8F 82            [24] 3359 	mov	dpl,r7
                                   3360 ;	ECEN4330Lab7.c:836: }
      000BAC 22               [24] 3361 	ret
                                   3362 ;------------------------------------------------------------
                                   3363 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3364 ;------------------------------------------------------------
                                   3365 ;h                         Allocated to registers r6 r7 
                                   3366 ;a                         Allocated to registers r7 
                                   3367 ;------------------------------------------------------------
                                   3368 ;	ECEN4330Lab7.c:843: unsigned char HEXtoASCII(unsigned int h){
                                   3369 ;	-----------------------------------------
                                   3370 ;	 function HEXtoASCII
                                   3371 ;	-----------------------------------------
      000BAD                       3372 _HEXtoASCII:
      000BAD AE 82            [24] 3373 	mov	r6,dpl
      000BAF AF 83            [24] 3374 	mov	r7,dph
                                   3375 ;	ECEN4330Lab7.c:846: switch (h)
      000BB1 C3               [12] 3376 	clr	c
      000BB2 74 0F            [12] 3377 	mov	a,#0x0f
      000BB4 9E               [12] 3378 	subb	a,r6
      000BB5 E4               [12] 3379 	clr	a
      000BB6 9F               [12] 3380 	subb	a,r7
      000BB7 50 03            [24] 3381 	jnc	00125$
      000BB9 02r0Cr2A         [24] 3382 	ljmp	00117$
      000BBC                       3383 00125$:
      000BBC EE               [12] 3384 	mov	a,r6
      000BBD 24 0A            [12] 3385 	add	a,#(00126$-3-.)
      000BBF 83               [24] 3386 	movc	a,@a+pc
      000BC0 F5 82            [12] 3387 	mov	dpl,a
      000BC2 EE               [12] 3388 	mov	a,r6
      000BC3 24 14            [12] 3389 	add	a,#(00127$-3-.)
      000BC5 83               [24] 3390 	movc	a,@a+pc
      000BC6 F5 83            [12] 3391 	mov	dph,a
      000BC8 E4               [12] 3392 	clr	a
      000BC9 73               [24] 3393 	jmp	@a+dptr
      000BCA                       3394 00126$:
      000BCArEA                    3395 	.db	00101$
      000BCBrEE                    3396 	.db	00102$
      000BCCrF2                    3397 	.db	00103$
      000BCDrF6                    3398 	.db	00104$
      000BCErFA                    3399 	.db	00105$
      000BCFrFE                    3400 	.db	00106$
      000BD0r02                    3401 	.db	00107$
      000BD1r06                    3402 	.db	00108$
      000BD2r0A                    3403 	.db	00109$
      000BD3r0E                    3404 	.db	00110$
      000BD4r12                    3405 	.db	00111$
      000BD5r16                    3406 	.db	00112$
      000BD6r1A                    3407 	.db	00113$
      000BD7r1E                    3408 	.db	00114$
      000BD8r22                    3409 	.db	00115$
      000BD9r26                    3410 	.db	00116$
      000BDA                       3411 00127$:
      000BDAs0B                    3412 	.db	00101$>>8
      000BDBs0B                    3413 	.db	00102$>>8
      000BDCs0B                    3414 	.db	00103$>>8
      000BDDs0B                    3415 	.db	00104$>>8
      000BDEs0B                    3416 	.db	00105$>>8
      000BDFs0B                    3417 	.db	00106$>>8
      000BE0s0C                    3418 	.db	00107$>>8
      000BE1s0C                    3419 	.db	00108$>>8
      000BE2s0C                    3420 	.db	00109$>>8
      000BE3s0C                    3421 	.db	00110$>>8
      000BE4s0C                    3422 	.db	00111$>>8
      000BE5s0C                    3423 	.db	00112$>>8
      000BE6s0C                    3424 	.db	00113$>>8
      000BE7s0C                    3425 	.db	00114$>>8
      000BE8s0C                    3426 	.db	00115$>>8
      000BE9s0C                    3427 	.db	00116$>>8
                                   3428 ;	ECEN4330Lab7.c:848: case 0x0000:
      000BEA                       3429 00101$:
                                   3430 ;	ECEN4330Lab7.c:849: a = '0';
      000BEA 7F 30            [12] 3431 	mov	r7,#0x30
                                   3432 ;	ECEN4330Lab7.c:850: break;
                                   3433 ;	ECEN4330Lab7.c:851: case 0x0001:
      000BEC 80 3E            [24] 3434 	sjmp	00118$
      000BEE                       3435 00102$:
                                   3436 ;	ECEN4330Lab7.c:852: a = '1';
      000BEE 7F 31            [12] 3437 	mov	r7,#0x31
                                   3438 ;	ECEN4330Lab7.c:853: break;
                                   3439 ;	ECEN4330Lab7.c:854: case 0x0002:
      000BF0 80 3A            [24] 3440 	sjmp	00118$
      000BF2                       3441 00103$:
                                   3442 ;	ECEN4330Lab7.c:855: a = '2';
      000BF2 7F 32            [12] 3443 	mov	r7,#0x32
                                   3444 ;	ECEN4330Lab7.c:856: break;
                                   3445 ;	ECEN4330Lab7.c:857: case 0x0003:
      000BF4 80 36            [24] 3446 	sjmp	00118$
      000BF6                       3447 00104$:
                                   3448 ;	ECEN4330Lab7.c:858: a = '3';
      000BF6 7F 33            [12] 3449 	mov	r7,#0x33
                                   3450 ;	ECEN4330Lab7.c:859: break;
                                   3451 ;	ECEN4330Lab7.c:860: case 0x0004:
      000BF8 80 32            [24] 3452 	sjmp	00118$
      000BFA                       3453 00105$:
                                   3454 ;	ECEN4330Lab7.c:861: a = '4';
      000BFA 7F 34            [12] 3455 	mov	r7,#0x34
                                   3456 ;	ECEN4330Lab7.c:862: break;
                                   3457 ;	ECEN4330Lab7.c:863: case 0x0005:
      000BFC 80 2E            [24] 3458 	sjmp	00118$
      000BFE                       3459 00106$:
                                   3460 ;	ECEN4330Lab7.c:864: a = '5';
      000BFE 7F 35            [12] 3461 	mov	r7,#0x35
                                   3462 ;	ECEN4330Lab7.c:865: break;
                                   3463 ;	ECEN4330Lab7.c:866: case 0x0006:
      000C00 80 2A            [24] 3464 	sjmp	00118$
      000C02                       3465 00107$:
                                   3466 ;	ECEN4330Lab7.c:867: a = '6';
      000C02 7F 36            [12] 3467 	mov	r7,#0x36
                                   3468 ;	ECEN4330Lab7.c:868: break;
                                   3469 ;	ECEN4330Lab7.c:869: case 0x0007:
      000C04 80 26            [24] 3470 	sjmp	00118$
      000C06                       3471 00108$:
                                   3472 ;	ECEN4330Lab7.c:870: a = '7';
      000C06 7F 37            [12] 3473 	mov	r7,#0x37
                                   3474 ;	ECEN4330Lab7.c:871: break;
                                   3475 ;	ECEN4330Lab7.c:872: case 0x0008:
      000C08 80 22            [24] 3476 	sjmp	00118$
      000C0A                       3477 00109$:
                                   3478 ;	ECEN4330Lab7.c:873: a = '8';
      000C0A 7F 38            [12] 3479 	mov	r7,#0x38
                                   3480 ;	ECEN4330Lab7.c:874: break;
                                   3481 ;	ECEN4330Lab7.c:875: case 0x0009:
      000C0C 80 1E            [24] 3482 	sjmp	00118$
      000C0E                       3483 00110$:
                                   3484 ;	ECEN4330Lab7.c:876: a = '9';
      000C0E 7F 39            [12] 3485 	mov	r7,#0x39
                                   3486 ;	ECEN4330Lab7.c:877: break;
                                   3487 ;	ECEN4330Lab7.c:878: case 0x000A:
      000C10 80 1A            [24] 3488 	sjmp	00118$
      000C12                       3489 00111$:
                                   3490 ;	ECEN4330Lab7.c:879: a = 'A';
      000C12 7F 41            [12] 3491 	mov	r7,#0x41
                                   3492 ;	ECEN4330Lab7.c:880: break;
                                   3493 ;	ECEN4330Lab7.c:881: case 0x000B:
      000C14 80 16            [24] 3494 	sjmp	00118$
      000C16                       3495 00112$:
                                   3496 ;	ECEN4330Lab7.c:882: a = 'B';
      000C16 7F 42            [12] 3497 	mov	r7,#0x42
                                   3498 ;	ECEN4330Lab7.c:883: break;
                                   3499 ;	ECEN4330Lab7.c:884: case 0x000C:
      000C18 80 12            [24] 3500 	sjmp	00118$
      000C1A                       3501 00113$:
                                   3502 ;	ECEN4330Lab7.c:885: a = 'C';
      000C1A 7F 43            [12] 3503 	mov	r7,#0x43
                                   3504 ;	ECEN4330Lab7.c:886: break;
                                   3505 ;	ECEN4330Lab7.c:887: case 0x000D:
      000C1C 80 0E            [24] 3506 	sjmp	00118$
      000C1E                       3507 00114$:
                                   3508 ;	ECEN4330Lab7.c:888: a = 'D';
      000C1E 7F 44            [12] 3509 	mov	r7,#0x44
                                   3510 ;	ECEN4330Lab7.c:889: break;
                                   3511 ;	ECEN4330Lab7.c:890: case 0x000E:
      000C20 80 0A            [24] 3512 	sjmp	00118$
      000C22                       3513 00115$:
                                   3514 ;	ECEN4330Lab7.c:891: a = 'E';
      000C22 7F 45            [12] 3515 	mov	r7,#0x45
                                   3516 ;	ECEN4330Lab7.c:892: break;
                                   3517 ;	ECEN4330Lab7.c:893: case 0x000F:
      000C24 80 06            [24] 3518 	sjmp	00118$
      000C26                       3519 00116$:
                                   3520 ;	ECEN4330Lab7.c:894: a = 'F';
      000C26 7F 46            [12] 3521 	mov	r7,#0x46
                                   3522 ;	ECEN4330Lab7.c:895: break;
                                   3523 ;	ECEN4330Lab7.c:896: default:
      000C28 80 02            [24] 3524 	sjmp	00118$
      000C2A                       3525 00117$:
                                   3526 ;	ECEN4330Lab7.c:897: a = '0';
      000C2A 7F 30            [12] 3527 	mov	r7,#0x30
                                   3528 ;	ECEN4330Lab7.c:899: }
      000C2C                       3529 00118$:
                                   3530 ;	ECEN4330Lab7.c:900: return a;
      000C2C 8F 82            [24] 3531 	mov	dpl,r7
                                   3532 ;	ECEN4330Lab7.c:901: }
      000C2E 22               [24] 3533 	ret
                                   3534 ;------------------------------------------------------------
                                   3535 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3536 ;------------------------------------------------------------
                                   3537 ;h                         Allocated to registers r7 
                                   3538 ;------------------------------------------------------------
                                   3539 ;	ECEN4330Lab7.c:909: void HEXtoASCII_8write(unsigned char h){
                                   3540 ;	-----------------------------------------
                                   3541 ;	 function HEXtoASCII_8write
                                   3542 ;	-----------------------------------------
      000C2F                       3543 _HEXtoASCII_8write:
                                   3544 ;	ECEN4330Lab7.c:912: byte = (h >> 4);
      000C2F E5 82            [12] 3545 	mov	a,dpl
      000C31 FF               [12] 3546 	mov	r7,a
      000C32 C4               [12] 3547 	swap	a
      000C33 54 0F            [12] 3548 	anl	a,#0x0f
      000C35 FE               [12] 3549 	mov	r6,a
      000C36 8E*2D            [24] 3550 	mov	_byte,r6
      000C38 75*2E 00         [24] 3551 	mov	(_byte + 1),#0x00
                                   3552 ;	ECEN4330Lab7.c:913: byte &= 0x0F;
      000C3B 53*2D 0F         [24] 3553 	anl	_byte,#0x0f
      000C3E 75*2E 00         [24] 3554 	mov	(_byte + 1),#0x00
                                   3555 ;	ECEN4330Lab7.c:914: ASCII = HEXtoASCII(byte);
      000C41 85*2D 82         [24] 3556 	mov	dpl,_byte
      000C44 85*2E 83         [24] 3557 	mov	dph,(_byte + 1)
      000C47 C0 07            [24] 3558 	push	ar7
      000C49 12r0BrAD         [24] 3559 	lcall	_HEXtoASCII
                                   3560 ;	ECEN4330Lab7.c:915: write(ASCII);
      000C4C 85 82*31         [24] 3561 	mov  _ASCII,dpl
      000C4F 12r09r5F         [24] 3562 	lcall	_write
      000C52 D0 07            [24] 3563 	pop	ar7
                                   3564 ;	ECEN4330Lab7.c:918: byte = (h & 0x0F);
      000C54 7E 00            [12] 3565 	mov	r6,#0x00
      000C56 74 0F            [12] 3566 	mov	a,#0x0f
      000C58 5F               [12] 3567 	anl	a,r7
      000C59 F5*2D            [12] 3568 	mov	_byte,a
                                   3569 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000C5B 8E*2E            [24] 3570 	mov	(_byte + 1),r6
                                   3571 ;	ECEN4330Lab7.c:919: ASCII = HEXtoASCII(byte);
      000C5D 85*2D 82         [24] 3572 	mov	dpl,_byte
      000C60 85*2E 83         [24] 3573 	mov	dph,(_byte + 1)
      000C63 12r0BrAD         [24] 3574 	lcall	_HEXtoASCII
                                   3575 ;	ECEN4330Lab7.c:920: write(ASCII);
      000C66 85 82*31         [24] 3576 	mov  _ASCII,dpl
                                   3577 ;	ECEN4330Lab7.c:921: }
      000C69 02r09r5F         [24] 3578 	ljmp	_write
                                   3579 ;------------------------------------------------------------
                                   3580 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3581 ;------------------------------------------------------------
                                   3582 ;h                         Allocated to registers r6 r7 
                                   3583 ;------------------------------------------------------------
                                   3584 ;	ECEN4330Lab7.c:929: void HEXtoASCII_16write(unsigned int h){
                                   3585 ;	-----------------------------------------
                                   3586 ;	 function HEXtoASCII_16write
                                   3587 ;	-----------------------------------------
      000C6C                       3588 _HEXtoASCII_16write:
      000C6C AE 82            [24] 3589 	mov	r6,dpl
                                   3590 ;	ECEN4330Lab7.c:932: byte = (h >> 12);
      000C6E E5 83            [12] 3591 	mov	a,dph
      000C70 FF               [12] 3592 	mov	r7,a
      000C71 C4               [12] 3593 	swap	a
      000C72 54 0F            [12] 3594 	anl	a,#0x0f
      000C74 F5*2D            [12] 3595 	mov	_byte,a
      000C76 75*2E 00         [24] 3596 	mov	(_byte + 1),#0x00
                                   3597 ;	ECEN4330Lab7.c:933: byte &= 0x000F;
      000C79 53*2D 0F         [24] 3598 	anl	_byte,#0x0f
      000C7C 75*2E 00         [24] 3599 	mov	(_byte + 1),#0x00
                                   3600 ;	ECEN4330Lab7.c:934: ASCII = HEXtoASCII(byte);
      000C7F 85*2D 82         [24] 3601 	mov	dpl,_byte
      000C82 85*2E 83         [24] 3602 	mov	dph,(_byte + 1)
      000C85 C0 07            [24] 3603 	push	ar7
      000C87 C0 06            [24] 3604 	push	ar6
      000C89 12r0BrAD         [24] 3605 	lcall	_HEXtoASCII
      000C8C 85 82*31         [24] 3606 	mov	_ASCII,dpl
                                   3607 ;	ECEN4330Lab7.c:935: LCD_string_write("0x");
      000C8F 90r05r0D         [24] 3608 	mov	dptr,#___str_1
      000C92 75 F0 80         [24] 3609 	mov	b,#0x80
      000C95 12r09rC5         [24] 3610 	lcall	_LCD_string_write
                                   3611 ;	ECEN4330Lab7.c:936: write(ASCII);
      000C98 85*31 82         [24] 3612 	mov	dpl,_ASCII
      000C9B 12r09r5F         [24] 3613 	lcall	_write
      000C9E D0 06            [24] 3614 	pop	ar6
      000CA0 D0 07            [24] 3615 	pop	ar7
                                   3616 ;	ECEN4330Lab7.c:939: byte = (h >> 8);
      000CA2 8F*2D            [24] 3617 	mov	_byte,r7
      000CA4 75*2E 00         [24] 3618 	mov	(_byte + 1),#0x00
                                   3619 ;	ECEN4330Lab7.c:940: byte &= 0x000F;
      000CA7 53*2D 0F         [24] 3620 	anl	_byte,#0x0f
      000CAA 75*2E 00         [24] 3621 	mov	(_byte + 1),#0x00
                                   3622 ;	ECEN4330Lab7.c:941: ASCII = HEXtoASCII(byte);
      000CAD 85*2D 82         [24] 3623 	mov	dpl,_byte
      000CB0 85*2E 83         [24] 3624 	mov	dph,(_byte + 1)
      000CB3 C0 07            [24] 3625 	push	ar7
      000CB5 C0 06            [24] 3626 	push	ar6
      000CB7 12r0BrAD         [24] 3627 	lcall	_HEXtoASCII
                                   3628 ;	ECEN4330Lab7.c:942: write(ASCII);
      000CBA 85 82*31         [24] 3629 	mov  _ASCII,dpl
      000CBD 12r09r5F         [24] 3630 	lcall	_write
      000CC0 D0 06            [24] 3631 	pop	ar6
      000CC2 D0 07            [24] 3632 	pop	ar7
                                   3633 ;	ECEN4330Lab7.c:945: byte = (h >> 4);
      000CC4 8E*2D            [24] 3634 	mov	_byte,r6
      000CC6 EF               [12] 3635 	mov	a,r7
      000CC7 C4               [12] 3636 	swap	a
      000CC8 C5*2D            [12] 3637 	xch	a,_byte
      000CCA C4               [12] 3638 	swap	a
      000CCB 54 0F            [12] 3639 	anl	a,#0x0f
      000CCD 65*2D            [12] 3640 	xrl	a,_byte
      000CCF C5*2D            [12] 3641 	xch	a,_byte
      000CD1 54 0F            [12] 3642 	anl	a,#0x0f
      000CD3 C5*2D            [12] 3643 	xch	a,_byte
      000CD5 65*2D            [12] 3644 	xrl	a,_byte
      000CD7 C5*2D            [12] 3645 	xch	a,_byte
      000CD9 F5*2E            [12] 3646 	mov	(_byte + 1),a
                                   3647 ;	ECEN4330Lab7.c:946: byte &= 0x000F;
      000CDB 53*2D 0F         [24] 3648 	anl	_byte,#0x0f
      000CDE 75*2E 00         [24] 3649 	mov	(_byte + 1),#0x00
                                   3650 ;	ECEN4330Lab7.c:947: ASCII = HEXtoASCII(byte);
      000CE1 85*2D 82         [24] 3651 	mov	dpl,_byte
      000CE4 85*2E 83         [24] 3652 	mov	dph,(_byte + 1)
      000CE7 C0 07            [24] 3653 	push	ar7
      000CE9 C0 06            [24] 3654 	push	ar6
      000CEB 12r0BrAD         [24] 3655 	lcall	_HEXtoASCII
                                   3656 ;	ECEN4330Lab7.c:948: write(ASCII);
      000CEE 85 82*31         [24] 3657 	mov  _ASCII,dpl
      000CF1 12r09r5F         [24] 3658 	lcall	_write
      000CF4 D0 06            [24] 3659 	pop	ar6
      000CF6 D0 07            [24] 3660 	pop	ar7
                                   3661 ;	ECEN4330Lab7.c:951: byte = h;
      000CF8 8E*2D            [24] 3662 	mov	_byte,r6
      000CFA 8F*2E            [24] 3663 	mov	(_byte + 1),r7
                                   3664 ;	ECEN4330Lab7.c:952: byte &= 0x000F;
      000CFC 53*2D 0F         [24] 3665 	anl	_byte,#0x0f
      000CFF 75*2E 00         [24] 3666 	mov	(_byte + 1),#0x00
                                   3667 ;	ECEN4330Lab7.c:953: ASCII = HEXtoASCII(byte);
      000D02 85*2D 82         [24] 3668 	mov	dpl,_byte
      000D05 85*2E 83         [24] 3669 	mov	dph,(_byte + 1)
      000D08 12r0BrAD         [24] 3670 	lcall	_HEXtoASCII
                                   3671 ;	ECEN4330Lab7.c:954: write(ASCII);
      000D0B 85 82*31         [24] 3672 	mov  _ASCII,dpl
                                   3673 ;	ECEN4330Lab7.c:955: }
      000D0E 02r09r5F         [24] 3674 	ljmp	_write
                                   3675 ;------------------------------------------------------------
                                   3676 ;Allocation info for local variables in function 'RAMwrite'
                                   3677 ;------------------------------------------------------------
                                   3678 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3679 ;a                         Allocated to registers r6 r7 
                                   3680 ;ram_address               Allocated to registers 
                                   3681 ;------------------------------------------------------------
                                   3682 ;	ECEN4330Lab7.c:963: void RAMwrite(unsigned int a, unsigned char d){
                                   3683 ;	-----------------------------------------
                                   3684 ;	 function RAMwrite
                                   3685 ;	-----------------------------------------
      000D11                       3686 _RAMwrite:
      000D11 AE 82            [24] 3687 	mov	r6,dpl
      000D13 AF 83            [24] 3688 	mov	r7,dph
                                   3689 ;	ECEN4330Lab7.c:966: IOM = 0;
                                   3690 ;	assignBit
      000D15 C2 B4            [12] 3691 	clr	_P3_4
                                   3692 ;	ECEN4330Lab7.c:969: ram_address = (unsigned char __xdata*)(a);
      000D17 8E 82            [24] 3693 	mov	dpl,r6
      000D19 8F 83            [24] 3694 	mov	dph,r7
                                   3695 ;	ECEN4330Lab7.c:972: *ram_address = d;
      000D1B E5*00            [12] 3696 	mov	a,_RAMwrite_PARM_2
      000D1D F0               [24] 3697 	movx	@dptr,a
                                   3698 ;	ECEN4330Lab7.c:973: IOM = 1;
                                   3699 ;	assignBit
      000D1E D2 B4            [12] 3700 	setb	_P3_4
                                   3701 ;	ECEN4330Lab7.c:974: }
      000D20 22               [24] 3702 	ret
                                   3703 ;------------------------------------------------------------
                                   3704 ;Allocation info for local variables in function 'testRAM'
                                   3705 ;------------------------------------------------------------
                                   3706 ;d                         Allocated to registers r7 
                                   3707 ;i                         Allocated to registers r5 r6 
                                   3708 ;ram_address               Allocated to registers 
                                   3709 ;------------------------------------------------------------
                                   3710 ;	ECEN4330Lab7.c:982: void testRAM(unsigned char d){
                                   3711 ;	-----------------------------------------
                                   3712 ;	 function testRAM
                                   3713 ;	-----------------------------------------
      000D21                       3714 _testRAM:
      000D21 AF 82            [24] 3715 	mov	r7,dpl
                                   3716 ;	ECEN4330Lab7.c:986: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D23 7D 00            [12] 3717 	mov	r5,#0x00
      000D25 7E 00            [12] 3718 	mov	r6,#0x00
      000D27                       3719 00102$:
                                   3720 ;	ECEN4330Lab7.c:987: IOM = 0;
                                   3721 ;	assignBit
      000D27 C2 B4            [12] 3722 	clr	_P3_4
                                   3723 ;	ECEN4330Lab7.c:988: ram_address = (unsigned char __xdata*)(i);
      000D29 8D 82            [24] 3724 	mov	dpl,r5
      000D2B 8E 83            [24] 3725 	mov	dph,r6
                                   3726 ;	ECEN4330Lab7.c:989: *ram_address = d;
      000D2D EF               [12] 3727 	mov	a,r7
      000D2E F0               [24] 3728 	movx	@dptr,a
                                   3729 ;	ECEN4330Lab7.c:990: IOM = 1;
                                   3730 ;	assignBit
      000D2F D2 B4            [12] 3731 	setb	_P3_4
                                   3732 ;	ECEN4330Lab7.c:986: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D31 0D               [12] 3733 	inc	r5
      000D32 BD 00 01         [24] 3734 	cjne	r5,#0x00,00111$
      000D35 0E               [12] 3735 	inc	r6
      000D36                       3736 00111$:
      000D36 C3               [12] 3737 	clr	c
      000D37 74 FE            [12] 3738 	mov	a,#0xfe
      000D39 9D               [12] 3739 	subb	a,r5
      000D3A 74 FF            [12] 3740 	mov	a,#0xff
      000D3C 9E               [12] 3741 	subb	a,r6
      000D3D 50 E8            [24] 3742 	jnc	00102$
                                   3743 ;	ECEN4330Lab7.c:993: }
      000D3F 22               [24] 3744 	ret
                                   3745 ;------------------------------------------------------------
                                   3746 ;Allocation info for local variables in function 'RAMread'
                                   3747 ;------------------------------------------------------------
                                   3748 ;a                         Allocated to registers r6 r7 
                                   3749 ;ram_address               Allocated to registers 
                                   3750 ;------------------------------------------------------------
                                   3751 ;	ECEN4330Lab7.c:1001: unsigned char RAMread(unsigned int a){
                                   3752 ;	-----------------------------------------
                                   3753 ;	 function RAMread
                                   3754 ;	-----------------------------------------
      000D40                       3755 _RAMread:
      000D40 AE 82            [24] 3756 	mov	r6,dpl
      000D42 AF 83            [24] 3757 	mov	r7,dph
                                   3758 ;	ECEN4330Lab7.c:1004: IOM = 0;
                                   3759 ;	assignBit
      000D44 C2 B4            [12] 3760 	clr	_P3_4
                                   3761 ;	ECEN4330Lab7.c:1007: ram_address = (unsigned char __xdata*)(a);
      000D46 8E 82            [24] 3762 	mov	dpl,r6
      000D48 8F 83            [24] 3763 	mov	dph,r7
                                   3764 ;	ECEN4330Lab7.c:1010: data = *ram_address;
      000D4A E0               [24] 3765 	movx	a,@dptr
      000D4B F5*20            [12] 3766 	mov	_data,a
                                   3767 ;	ECEN4330Lab7.c:1011: IOM = 1;
                                   3768 ;	assignBit
      000D4D D2 B4            [12] 3769 	setb	_P3_4
                                   3770 ;	ECEN4330Lab7.c:1012: return data;
      000D4F 85*20 82         [24] 3771 	mov	dpl,_data
                                   3772 ;	ECEN4330Lab7.c:1013: }
      000D52 22               [24] 3773 	ret
                                   3774 ;------------------------------------------------------------
                                   3775 ;Allocation info for local variables in function 'resetLCD'
                                   3776 ;------------------------------------------------------------
                                   3777 ;	ECEN4330Lab7.c:1025: void resetLCD(){
                                   3778 ;	-----------------------------------------
                                   3779 ;	 function resetLCD
                                   3780 ;	-----------------------------------------
      000D53                       3781 _resetLCD:
                                   3782 ;	ECEN4330Lab7.c:1026: setRotation(4);
      000D53 75 82 04         [24] 3783 	mov	dpl,#0x04
      000D56 12r02rFB         [24] 3784 	lcall	_setRotation
                                   3785 ;	ECEN4330Lab7.c:1027: setTextColor(GRAY, BLACK);
      000D59 E4               [12] 3786 	clr	a
      000D5A F5*00            [12] 3787 	mov	_setTextColor_PARM_2,a
      000D5C F5*01            [12] 3788 	mov	(_setTextColor_PARM_2 + 1),a
      000D5E 90 D6 BA         [24] 3789 	mov	dptr,#0xd6ba
      000D61 12r02rD6         [24] 3790 	lcall	_setTextColor
                                   3791 ;	ECEN4330Lab7.c:1028: setTextSize(3);
      000D64 75 82 03         [24] 3792 	mov	dpl,#0x03
      000D67 12r02rE3         [24] 3793 	lcall	_setTextSize
                                   3794 ;	ECEN4330Lab7.c:1029: fillScreen(BLACK);
      000D6A 90 00 00         [24] 3795 	mov	dptr,#0x0000
      000D6D 12r06r6E         [24] 3796 	lcall	_fillScreen
                                   3797 ;	ECEN4330Lab7.c:1030: setCursor(0, 0);
      000D70 E4               [12] 3798 	clr	a
      000D71 F5*00            [12] 3799 	mov	_setCursor_PARM_2,a
      000D73 F5*01            [12] 3800 	mov	(_setCursor_PARM_2 + 1),a
      000D75 90 00 00         [24] 3801 	mov	dptr,#0x0000
                                   3802 ;	ECEN4330Lab7.c:1031: }
      000D78 02r02rC9         [24] 3803 	ljmp	_setCursor
                                   3804 ;------------------------------------------------------------
                                   3805 ;Allocation info for local variables in function 'invalidInput'
                                   3806 ;------------------------------------------------------------
                                   3807 ;	ECEN4330Lab7.c:1043: void invalidInput(){
                                   3808 ;	-----------------------------------------
                                   3809 ;	 function invalidInput
                                   3810 ;	-----------------------------------------
      000D7B                       3811 _invalidInput:
                                   3812 ;	ECEN4330Lab7.c:1044: resetLCD();
      000D7B 12r0Dr53         [24] 3813 	lcall	_resetLCD
                                   3814 ;	ECEN4330Lab7.c:1045: setTextColor(RED, BLACK);
      000D7E E4               [12] 3815 	clr	a
      000D7F F5*00            [12] 3816 	mov	_setTextColor_PARM_2,a
      000D81 F5*01            [12] 3817 	mov	(_setTextColor_PARM_2 + 1),a
      000D83 90 F8 00         [24] 3818 	mov	dptr,#0xf800
      000D86 12r02rD6         [24] 3819 	lcall	_setTextColor
                                   3820 ;	ECEN4330Lab7.c:1048: LCD_string_write("\n   Invalid\n\n");
      000D89 90r05r10         [24] 3821 	mov	dptr,#___str_2
      000D8C 75 F0 80         [24] 3822 	mov	b,#0x80
      000D8F 12r09rC5         [24] 3823 	lcall	_LCD_string_write
                                   3824 ;	ECEN4330Lab7.c:1049: LCD_string_write("    Input");
      000D92 90r05r1E         [24] 3825 	mov	dptr,#___str_3
      000D95 75 F0 80         [24] 3826 	mov	b,#0x80
      000D98 12r09rC5         [24] 3827 	lcall	_LCD_string_write
                                   3828 ;	ECEN4330Lab7.c:1052: delay(200);
      000D9B 90 00 C8         [24] 3829 	mov	dptr,#0x00c8
      000D9E 12r00r25         [24] 3830 	lcall	_delay
                                   3831 ;	ECEN4330Lab7.c:1053: resetLCD();
                                   3832 ;	ECEN4330Lab7.c:1054: }
      000DA1 02r0Dr53         [24] 3833 	ljmp	_resetLCD
                                   3834 ;------------------------------------------------------------
                                   3835 ;Allocation info for local variables in function 'inputRead16'
                                   3836 ;------------------------------------------------------------
                                   3837 ;	ECEN4330Lab7.c:1065: void inputRead16(){
                                   3838 ;	-----------------------------------------
                                   3839 ;	 function inputRead16
                                   3840 ;	-----------------------------------------
      000DA4                       3841 _inputRead16:
                                   3842 ;	ECEN4330Lab7.c:1066: input16 = 0x0000;
      000DA4 E4               [12] 3843 	clr	a
      000DA5 F5*17            [12] 3844 	mov	_input16,a
      000DA7 F5*18            [12] 3845 	mov	(_input16 + 1),a
                                   3846 ;	ECEN4330Lab7.c:1068: setTextColor(WHITE, BLACK);
      000DA9 F5*00            [12] 3847 	mov	_setTextColor_PARM_2,a
      000DAB F5*01            [12] 3848 	mov	(_setTextColor_PARM_2 + 1),a
      000DAD 90 FF FF         [24] 3849 	mov	dptr,#0xffff
      000DB0 12r02rD6         [24] 3850 	lcall	_setTextColor
                                   3851 ;	ECEN4330Lab7.c:1071: key = keyDetect();
      000DB3 12r0Ar04         [24] 3852 	lcall	_keyDetect
      000DB6 85 82*16         [24] 3853 	mov	_key,dpl
                                   3854 ;	ECEN4330Lab7.c:1072: setTextColor(WHITE, BLACK);
      000DB9 E4               [12] 3855 	clr	a
      000DBA F5*00            [12] 3856 	mov	_setTextColor_PARM_2,a
      000DBC F5*01            [12] 3857 	mov	(_setTextColor_PARM_2 + 1),a
      000DBE 90 FF FF         [24] 3858 	mov	dptr,#0xffff
      000DC1 12r02rD6         [24] 3859 	lcall	_setTextColor
                                   3860 ;	ECEN4330Lab7.c:1073: write(key);
      000DC4 85*16 82         [24] 3861 	mov	dpl,_key
      000DC7 12r09r5F         [24] 3862 	lcall	_write
                                   3863 ;	ECEN4330Lab7.c:1074: input16 |= (ASCIItoHEX(key) << 12);
      000DCA 85*16 82         [24] 3864 	mov	dpl,_key
      000DCD 12r0Br17         [24] 3865 	lcall	_ASCIItoHEX
      000DD0 AF 82            [24] 3866 	mov	r7,dpl
      000DD2 EF               [12] 3867 	mov	a,r7
      000DD3 C4               [12] 3868 	swap	a
      000DD4 54 F0            [12] 3869 	anl	a,#0xf0
      000DD6 FE               [12] 3870 	mov	r6,a
      000DD7 E4               [12] 3871 	clr	a
      000DD8 42*17            [12] 3872 	orl	_input16,a
      000DDA EE               [12] 3873 	mov	a,r6
      000DDB 42*18            [12] 3874 	orl	(_input16 + 1),a
                                   3875 ;	ECEN4330Lab7.c:1076: key = keyDetect();
      000DDD 12r0Ar04         [24] 3876 	lcall	_keyDetect
      000DE0 85 82*16         [24] 3877 	mov	_key,dpl
                                   3878 ;	ECEN4330Lab7.c:1077: setTextColor(WHITE, BLACK);
      000DE3 E4               [12] 3879 	clr	a
      000DE4 F5*00            [12] 3880 	mov	_setTextColor_PARM_2,a
      000DE6 F5*01            [12] 3881 	mov	(_setTextColor_PARM_2 + 1),a
      000DE8 90 FF FF         [24] 3882 	mov	dptr,#0xffff
      000DEB 12r02rD6         [24] 3883 	lcall	_setTextColor
                                   3884 ;	ECEN4330Lab7.c:1078: write(key);
      000DEE 85*16 82         [24] 3885 	mov	dpl,_key
      000DF1 12r09r5F         [24] 3886 	lcall	_write
                                   3887 ;	ECEN4330Lab7.c:1079: input16 |= (ASCIItoHEX(key) << 8);
      000DF4 85*16 82         [24] 3888 	mov	dpl,_key
      000DF7 12r0Br17         [24] 3889 	lcall	_ASCIItoHEX
      000DFA AF 82            [24] 3890 	mov	r7,dpl
      000DFC 8F 06            [24] 3891 	mov	ar6,r7
      000DFE E4               [12] 3892 	clr	a
      000DFF 42*17            [12] 3893 	orl	_input16,a
      000E01 EE               [12] 3894 	mov	a,r6
      000E02 42*18            [12] 3895 	orl	(_input16 + 1),a
                                   3896 ;	ECEN4330Lab7.c:1081: key = keyDetect();
      000E04 12r0Ar04         [24] 3897 	lcall	_keyDetect
      000E07 85 82*16         [24] 3898 	mov	_key,dpl
                                   3899 ;	ECEN4330Lab7.c:1082: setTextColor(WHITE, BLACK);
      000E0A E4               [12] 3900 	clr	a
      000E0B F5*00            [12] 3901 	mov	_setTextColor_PARM_2,a
      000E0D F5*01            [12] 3902 	mov	(_setTextColor_PARM_2 + 1),a
      000E0F 90 FF FF         [24] 3903 	mov	dptr,#0xffff
      000E12 12r02rD6         [24] 3904 	lcall	_setTextColor
                                   3905 ;	ECEN4330Lab7.c:1083: write(key);
      000E15 85*16 82         [24] 3906 	mov	dpl,_key
      000E18 12r09r5F         [24] 3907 	lcall	_write
                                   3908 ;	ECEN4330Lab7.c:1084: input16 |= (ASCIItoHEX(key) << 4);
      000E1B 85*16 82         [24] 3909 	mov	dpl,_key
      000E1E 12r0Br17         [24] 3910 	lcall	_ASCIItoHEX
      000E21 AF 82            [24] 3911 	mov	r7,dpl
      000E23 E4               [12] 3912 	clr	a
      000E24 C4               [12] 3913 	swap	a
      000E25 54 F0            [12] 3914 	anl	a,#0xf0
      000E27 CF               [12] 3915 	xch	a,r7
      000E28 C4               [12] 3916 	swap	a
      000E29 CF               [12] 3917 	xch	a,r7
      000E2A 6F               [12] 3918 	xrl	a,r7
      000E2B CF               [12] 3919 	xch	a,r7
      000E2C 54 F0            [12] 3920 	anl	a,#0xf0
      000E2E CF               [12] 3921 	xch	a,r7
      000E2F 6F               [12] 3922 	xrl	a,r7
      000E30 FE               [12] 3923 	mov	r6,a
      000E31 EF               [12] 3924 	mov	a,r7
      000E32 42*17            [12] 3925 	orl	_input16,a
      000E34 EE               [12] 3926 	mov	a,r6
      000E35 42*18            [12] 3927 	orl	(_input16 + 1),a
                                   3928 ;	ECEN4330Lab7.c:1086: key = keyDetect();
      000E37 12r0Ar04         [24] 3929 	lcall	_keyDetect
      000E3A 85 82*16         [24] 3930 	mov	_key,dpl
                                   3931 ;	ECEN4330Lab7.c:1087: setTextColor(WHITE, BLACK);
      000E3D E4               [12] 3932 	clr	a
      000E3E F5*00            [12] 3933 	mov	_setTextColor_PARM_2,a
      000E40 F5*01            [12] 3934 	mov	(_setTextColor_PARM_2 + 1),a
      000E42 90 FF FF         [24] 3935 	mov	dptr,#0xffff
      000E45 12r02rD6         [24] 3936 	lcall	_setTextColor
                                   3937 ;	ECEN4330Lab7.c:1088: write(key);
      000E48 85*16 82         [24] 3938 	mov	dpl,_key
      000E4B 12r09r5F         [24] 3939 	lcall	_write
                                   3940 ;	ECEN4330Lab7.c:1089: input16 |= ASCIItoHEX(key);
      000E4E 85*16 82         [24] 3941 	mov	dpl,_key
      000E51 12r0Br17         [24] 3942 	lcall	_ASCIItoHEX
      000E54 AF 82            [24] 3943 	mov	r7,dpl
      000E56 7E 00            [12] 3944 	mov	r6,#0x00
      000E58 EF               [12] 3945 	mov	a,r7
      000E59 42*17            [12] 3946 	orl	_input16,a
      000E5B EE               [12] 3947 	mov	a,r6
      000E5C 42*18            [12] 3948 	orl	(_input16 + 1),a
                                   3949 ;	ECEN4330Lab7.c:1090: }
      000E5E 22               [24] 3950 	ret
                                   3951 ;------------------------------------------------------------
                                   3952 ;Allocation info for local variables in function 'inputRead8'
                                   3953 ;------------------------------------------------------------
                                   3954 ;	ECEN4330Lab7.c:1100: void inputRead8(){
                                   3955 ;	-----------------------------------------
                                   3956 ;	 function inputRead8
                                   3957 ;	-----------------------------------------
      000E5F                       3958 _inputRead8:
                                   3959 ;	ECEN4330Lab7.c:1101: setTextColor(WHITE, BLACK);
      000E5F E4               [12] 3960 	clr	a
      000E60 F5*00            [12] 3961 	mov	_setTextColor_PARM_2,a
      000E62 F5*01            [12] 3962 	mov	(_setTextColor_PARM_2 + 1),a
      000E64 90 FF FF         [24] 3963 	mov	dptr,#0xffff
      000E67 12r02rD6         [24] 3964 	lcall	_setTextColor
                                   3965 ;	ECEN4330Lab7.c:1103: input8 = 0x00;
      000E6A 75*19 00         [24] 3966 	mov	_input8,#0x00
                                   3967 ;	ECEN4330Lab7.c:1105: key = keyDetect();
      000E6D 12r0Ar04         [24] 3968 	lcall	_keyDetect
      000E70 85 82*16         [24] 3969 	mov	_key,dpl
                                   3970 ;	ECEN4330Lab7.c:1106: setTextColor(WHITE, BLACK);
      000E73 E4               [12] 3971 	clr	a
      000E74 F5*00            [12] 3972 	mov	_setTextColor_PARM_2,a
      000E76 F5*01            [12] 3973 	mov	(_setTextColor_PARM_2 + 1),a
      000E78 90 FF FF         [24] 3974 	mov	dptr,#0xffff
      000E7B 12r02rD6         [24] 3975 	lcall	_setTextColor
                                   3976 ;	ECEN4330Lab7.c:1107: write(key);
      000E7E 85*16 82         [24] 3977 	mov	dpl,_key
      000E81 12r09r5F         [24] 3978 	lcall	_write
                                   3979 ;	ECEN4330Lab7.c:1108: input8 |= (ASCIItoHEX(key) << 4);
      000E84 85*16 82         [24] 3980 	mov	dpl,_key
      000E87 12r0Br17         [24] 3981 	lcall	_ASCIItoHEX
      000E8A E5 82            [12] 3982 	mov	a,dpl
      000E8C C4               [12] 3983 	swap	a
      000E8D 54 F0            [12] 3984 	anl	a,#0xf0
      000E8F 42*19            [12] 3985 	orl	_input8,a
                                   3986 ;	ECEN4330Lab7.c:1110: key = keyDetect();
      000E91 12r0Ar04         [24] 3987 	lcall	_keyDetect
      000E94 85 82*16         [24] 3988 	mov	_key,dpl
                                   3989 ;	ECEN4330Lab7.c:1111: setTextColor(WHITE, BLACK);
      000E97 E4               [12] 3990 	clr	a
      000E98 F5*00            [12] 3991 	mov	_setTextColor_PARM_2,a
      000E9A F5*01            [12] 3992 	mov	(_setTextColor_PARM_2 + 1),a
      000E9C 90 FF FF         [24] 3993 	mov	dptr,#0xffff
      000E9F 12r02rD6         [24] 3994 	lcall	_setTextColor
                                   3995 ;	ECEN4330Lab7.c:1112: write(key);
      000EA2 85*16 82         [24] 3996 	mov	dpl,_key
      000EA5 12r09r5F         [24] 3997 	lcall	_write
                                   3998 ;	ECEN4330Lab7.c:1113: input8 |= ASCIItoHEX(key);
      000EA8 85*16 82         [24] 3999 	mov	dpl,_key
      000EAB 12r0Br17         [24] 4000 	lcall	_ASCIItoHEX
      000EAE E5 82            [12] 4001 	mov	a,dpl
      000EB0 42*19            [12] 4002 	orl	_input8,a
                                   4003 ;	ECEN4330Lab7.c:1114: }
      000EB2 22               [24] 4004 	ret
                                   4005 ;------------------------------------------------------------
                                   4006 ;Allocation info for local variables in function 'inputDataType'
                                   4007 ;------------------------------------------------------------
                                   4008 ;	ECEN4330Lab7.c:1133: void inputDataType(){
                                   4009 ;	-----------------------------------------
                                   4010 ;	 function inputDataType
                                   4011 ;	-----------------------------------------
      000EB3                       4012 _inputDataType:
                                   4013 ;	ECEN4330Lab7.c:1134: validInput = 0;
      000EB3 75*1D 00         [24] 4014 	mov	_validInput,#0x00
                                   4015 ;	ECEN4330Lab7.c:1135: dataType = 0;
      000EB6 75*1A 00         [24] 4016 	mov	_dataType,#0x00
                                   4017 ;	ECEN4330Lab7.c:1137: do
      000EB9                       4018 00106$:
                                   4019 ;	ECEN4330Lab7.c:1140: resetLCD();
      000EB9 12r0Dr53         [24] 4020 	lcall	_resetLCD
                                   4021 ;	ECEN4330Lab7.c:1141: setTextColor(WHITE, BLACK);
      000EBC E4               [12] 4022 	clr	a
      000EBD F5*00            [12] 4023 	mov	_setTextColor_PARM_2,a
      000EBF F5*01            [12] 4024 	mov	(_setTextColor_PARM_2 + 1),a
      000EC1 90 FF FF         [24] 4025 	mov	dptr,#0xffff
      000EC4 12r02rD6         [24] 4026 	lcall	_setTextColor
                                   4027 ;	ECEN4330Lab7.c:1142: LCD_string_write("\nSelect Data\nType:\n\n");
      000EC7 90r05r28         [24] 4028 	mov	dptr,#___str_4
      000ECA 75 F0 80         [24] 4029 	mov	b,#0x80
      000ECD 12r09rC5         [24] 4030 	lcall	_LCD_string_write
                                   4031 ;	ECEN4330Lab7.c:1143: LCD_string_write("(1) Byte\n");
      000ED0 90r05r3D         [24] 4032 	mov	dptr,#___str_5
      000ED3 75 F0 80         [24] 4033 	mov	b,#0x80
      000ED6 12r09rC5         [24] 4034 	lcall	_LCD_string_write
                                   4035 ;	ECEN4330Lab7.c:1144: LCD_string_write("(2) Word\n");
      000ED9 90r05r47         [24] 4036 	mov	dptr,#___str_6
      000EDC 75 F0 80         [24] 4037 	mov	b,#0x80
      000EDF 12r09rC5         [24] 4038 	lcall	_LCD_string_write
                                   4039 ;	ECEN4330Lab7.c:1145: LCD_string_write("(3) Double\n    Word\n\n  _");
      000EE2 90r05r51         [24] 4040 	mov	dptr,#___str_7
      000EE5 75 F0 80         [24] 4041 	mov	b,#0x80
      000EE8 12r09rC5         [24] 4042 	lcall	_LCD_string_write
                                   4043 ;	ECEN4330Lab7.c:1146: cursor_x -= textsize * 6;
      000EEB 85*0C*00         [24] 4044 	mov	__mulint_PARM_2,_textsize
      000EEE 75*01 00         [24] 4045 	mov	(__mulint_PARM_2 + 1),#0x00
      000EF1 90 00 06         [24] 4046 	mov	dptr,#0x0006
      000EF4 12r00r00         [24] 4047 	lcall	__mulint
      000EF7 AE 82            [24] 4048 	mov	r6,dpl
      000EF9 AF 83            [24] 4049 	mov	r7,dph
      000EFB E5*08            [12] 4050 	mov	a,_cursor_x
      000EFD C3               [12] 4051 	clr	c
      000EFE 9E               [12] 4052 	subb	a,r6
      000EFF F5*08            [12] 4053 	mov	_cursor_x,a
      000F01 E5*09            [12] 4054 	mov	a,(_cursor_x + 1)
      000F03 9F               [12] 4055 	subb	a,r7
      000F04 F5*09            [12] 4056 	mov	(_cursor_x + 1),a
                                   4057 ;	ECEN4330Lab7.c:1147: x = cursor_x;
      000F06 85*08*3B         [24] 4058 	mov	_x,_cursor_x
                                   4059 ;	ECEN4330Lab7.c:1148: y = cursor_y;
      000F09 85*0A*3C         [24] 4060 	mov	_y,_cursor_y
                                   4061 ;	ECEN4330Lab7.c:1149: ts = textsize;
      000F0C 85*0C*3D         [24] 4062 	mov	_ts,_textsize
                                   4063 ;	ECEN4330Lab7.c:1152: setTextColor(WHITE, BLACK);
      000F0F E4               [12] 4064 	clr	a
      000F10 F5*00            [12] 4065 	mov	_setTextColor_PARM_2,a
      000F12 F5*01            [12] 4066 	mov	(_setTextColor_PARM_2 + 1),a
      000F14 90 FF FF         [24] 4067 	mov	dptr,#0xffff
      000F17 12r02rD6         [24] 4068 	lcall	_setTextColor
                                   4069 ;	ECEN4330Lab7.c:1153: key = keyDetect();
      000F1A 12r0Ar04         [24] 4070 	lcall	_keyDetect
      000F1D 85 82*16         [24] 4071 	mov	_key,dpl
                                   4072 ;	ECEN4330Lab7.c:1154: cursor_x = x;
      000F20 85*3B*08         [24] 4073 	mov	_cursor_x,_x
      000F23 75*09 00         [24] 4074 	mov	(_cursor_x + 1),#0x00
                                   4075 ;	ECEN4330Lab7.c:1155: cursor_y = y;
      000F26 85*3C*0A         [24] 4076 	mov	_cursor_y,_y
      000F29 75*0B 00         [24] 4077 	mov	(_cursor_y + 1),#0x00
                                   4078 ;	ECEN4330Lab7.c:1156: textsize = ts;
      000F2C 85*3D*0C         [24] 4079 	mov	_textsize,_ts
                                   4080 ;	ECEN4330Lab7.c:1157: write(key);
      000F2F 85*16 82         [24] 4081 	mov	dpl,_key
      000F32 12r09r5F         [24] 4082 	lcall	_write
                                   4083 ;	ECEN4330Lab7.c:1159: switch (key)
      000F35 74 31            [12] 4084 	mov	a,#0x31
      000F37 B5*16 02         [24] 4085 	cjne	a,_key,00127$
      000F3A 80 0E            [24] 4086 	sjmp	00101$
      000F3C                       4087 00127$:
      000F3C 74 32            [12] 4088 	mov	a,#0x32
      000F3E B5*16 02         [24] 4089 	cjne	a,_key,00128$
      000F41 80 0F            [24] 4090 	sjmp	00102$
      000F43                       4091 00128$:
      000F43 74 33            [12] 4092 	mov	a,#0x33
                                   4093 ;	ECEN4330Lab7.c:1162: case '1':
      000F45 B5*16 1A         [24] 4094 	cjne	a,_key,00104$
      000F48 80 10            [24] 4095 	sjmp	00103$
      000F4A                       4096 00101$:
                                   4097 ;	ECEN4330Lab7.c:1163: dataType = 1;
      000F4A 75*1A 01         [24] 4098 	mov	_dataType,#0x01
                                   4099 ;	ECEN4330Lab7.c:1164: validInput = 1;
      000F4D 75*1D 01         [24] 4100 	mov	_validInput,#0x01
                                   4101 ;	ECEN4330Lab7.c:1165: break;
                                   4102 ;	ECEN4330Lab7.c:1168: case '2':
      000F50 80 16            [24] 4103 	sjmp	00107$
      000F52                       4104 00102$:
                                   4105 ;	ECEN4330Lab7.c:1169: dataType = 2;
      000F52 75*1A 02         [24] 4106 	mov	_dataType,#0x02
                                   4107 ;	ECEN4330Lab7.c:1170: validInput = 1;
      000F55 75*1D 01         [24] 4108 	mov	_validInput,#0x01
                                   4109 ;	ECEN4330Lab7.c:1171: break;
                                   4110 ;	ECEN4330Lab7.c:1174: case '3':
      000F58 80 0E            [24] 4111 	sjmp	00107$
      000F5A                       4112 00103$:
                                   4113 ;	ECEN4330Lab7.c:1175: dataType = 4;
      000F5A 75*1A 04         [24] 4114 	mov	_dataType,#0x04
                                   4115 ;	ECEN4330Lab7.c:1176: validInput = 1;
      000F5D 75*1D 01         [24] 4116 	mov	_validInput,#0x01
                                   4117 ;	ECEN4330Lab7.c:1177: break;
                                   4118 ;	ECEN4330Lab7.c:1180: default:
      000F60 80 06            [24] 4119 	sjmp	00107$
      000F62                       4120 00104$:
                                   4121 ;	ECEN4330Lab7.c:1181: invalidInput();
      000F62 12r0Dr7B         [24] 4122 	lcall	_invalidInput
                                   4123 ;	ECEN4330Lab7.c:1182: validInput = 0;
      000F65 75*1D 00         [24] 4124 	mov	_validInput,#0x00
                                   4125 ;	ECEN4330Lab7.c:1184: }
      000F68                       4126 00107$:
                                   4127 ;	ECEN4330Lab7.c:1185: } while (validInput == 0);
      000F68 E5*1D            [12] 4128 	mov	a,_validInput
      000F6A 70 03            [24] 4129 	jnz	00130$
      000F6C 02r0ErB9         [24] 4130 	ljmp	00106$
      000F6F                       4131 00130$:
                                   4132 ;	ECEN4330Lab7.c:1186: }
      000F6F 22               [24] 4133 	ret
                                   4134 ;------------------------------------------------------------
                                   4135 ;Allocation info for local variables in function 'inputDataSize'
                                   4136 ;------------------------------------------------------------
                                   4137 ;	ECEN4330Lab7.c:1197: void inputDataSize(){
                                   4138 ;	-----------------------------------------
                                   4139 ;	 function inputDataSize
                                   4140 ;	-----------------------------------------
      000F70                       4141 _inputDataSize:
                                   4142 ;	ECEN4330Lab7.c:1198: validInput = 0;
                                   4143 ;	ECEN4330Lab7.c:1199: dataSize = 0x0000;
      000F70 E4               [12] 4144 	clr	a
      000F71 F5*1D            [12] 4145 	mov	_validInput,a
      000F73 F5*1B            [12] 4146 	mov	_dataSize,a
      000F75 F5*1C            [12] 4147 	mov	(_dataSize + 1),a
                                   4148 ;	ECEN4330Lab7.c:1201: do
      000F77                       4149 00104$:
                                   4150 ;	ECEN4330Lab7.c:1204: resetLCD();
      000F77 12r0Dr53         [24] 4151 	lcall	_resetLCD
                                   4152 ;	ECEN4330Lab7.c:1205: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      000F7A 90r05r6A         [24] 4153 	mov	dptr,#___str_8
      000F7D 75 F0 80         [24] 4154 	mov	b,#0x80
      000F80 12r09rC5         [24] 4155 	lcall	_LCD_string_write
                                   4156 ;	ECEN4330Lab7.c:1206: cursor_x -= 4 * textsize * 6;
      000F83 E5*0C            [12] 4157 	mov	a,_textsize
      000F85 75 F0 18         [24] 4158 	mov	b,#0x18
      000F88 A4               [48] 4159 	mul	ab
      000F89 FE               [12] 4160 	mov	r6,a
      000F8A AF F0            [24] 4161 	mov	r7,b
      000F8C E5*08            [12] 4162 	mov	a,_cursor_x
      000F8E C3               [12] 4163 	clr	c
      000F8F 9E               [12] 4164 	subb	a,r6
      000F90 F5*08            [12] 4165 	mov	_cursor_x,a
      000F92 E5*09            [12] 4166 	mov	a,(_cursor_x + 1)
      000F94 9F               [12] 4167 	subb	a,r7
      000F95 F5*09            [12] 4168 	mov	(_cursor_x + 1),a
                                   4169 ;	ECEN4330Lab7.c:1207: x = cursor_x;
      000F97 85*08*3B         [24] 4170 	mov	_x,_cursor_x
                                   4171 ;	ECEN4330Lab7.c:1208: y = cursor_y;
      000F9A 85*0A*3C         [24] 4172 	mov	_y,_cursor_y
                                   4173 ;	ECEN4330Lab7.c:1209: ts = textsize;
      000F9D 85*0C*3D         [24] 4174 	mov	_ts,_textsize
                                   4175 ;	ECEN4330Lab7.c:1211: input16 = 0x0000;
      000FA0 E4               [12] 4176 	clr	a
      000FA1 F5*17            [12] 4177 	mov	_input16,a
      000FA3 F5*18            [12] 4178 	mov	(_input16 + 1),a
                                   4179 ;	ECEN4330Lab7.c:1213: setTextColor(WHITE, BLACK);
      000FA5 F5*00            [12] 4180 	mov	_setTextColor_PARM_2,a
      000FA7 F5*01            [12] 4181 	mov	(_setTextColor_PARM_2 + 1),a
      000FA9 90 FF FF         [24] 4182 	mov	dptr,#0xffff
      000FAC 12r02rD6         [24] 4183 	lcall	_setTextColor
                                   4184 ;	ECEN4330Lab7.c:1216: key = keyDetect();
      000FAF 12r0Ar04         [24] 4185 	lcall	_keyDetect
      000FB2 85 82*16         [24] 4186 	mov	_key,dpl
                                   4187 ;	ECEN4330Lab7.c:1217: cursor_x = x;
      000FB5 85*3B*08         [24] 4188 	mov	_cursor_x,_x
      000FB8 75*09 00         [24] 4189 	mov	(_cursor_x + 1),#0x00
                                   4190 ;	ECEN4330Lab7.c:1218: cursor_y = y;
      000FBB 85*3C*0A         [24] 4191 	mov	_cursor_y,_y
      000FBE 75*0B 00         [24] 4192 	mov	(_cursor_y + 1),#0x00
                                   4193 ;	ECEN4330Lab7.c:1219: textsize = ts;
      000FC1 85*3D*0C         [24] 4194 	mov	_textsize,_ts
                                   4195 ;	ECEN4330Lab7.c:1220: write(key);
      000FC4 85*16 82         [24] 4196 	mov	dpl,_key
      000FC7 12r09r5F         [24] 4197 	lcall	_write
                                   4198 ;	ECEN4330Lab7.c:1221: x = cursor_x;
      000FCA 85*08*3B         [24] 4199 	mov	_x,_cursor_x
                                   4200 ;	ECEN4330Lab7.c:1222: y = cursor_y;
      000FCD 85*0A*3C         [24] 4201 	mov	_y,_cursor_y
                                   4202 ;	ECEN4330Lab7.c:1223: ts = textsize;
      000FD0 85*0C*3D         [24] 4203 	mov	_ts,_textsize
                                   4204 ;	ECEN4330Lab7.c:1224: input16 |= (ASCIItoHEX(key) << 12);
      000FD3 85*16 82         [24] 4205 	mov	dpl,_key
      000FD6 12r0Br17         [24] 4206 	lcall	_ASCIItoHEX
      000FD9 AF 82            [24] 4207 	mov	r7,dpl
      000FDB EF               [12] 4208 	mov	a,r7
      000FDC C4               [12] 4209 	swap	a
      000FDD 54 F0            [12] 4210 	anl	a,#0xf0
      000FDF FE               [12] 4211 	mov	r6,a
      000FE0 E4               [12] 4212 	clr	a
      000FE1 42*17            [12] 4213 	orl	_input16,a
      000FE3 EE               [12] 4214 	mov	a,r6
      000FE4 42*18            [12] 4215 	orl	(_input16 + 1),a
                                   4216 ;	ECEN4330Lab7.c:1226: key = keyDetect();
      000FE6 12r0Ar04         [24] 4217 	lcall	_keyDetect
      000FE9 85 82*16         [24] 4218 	mov	_key,dpl
                                   4219 ;	ECEN4330Lab7.c:1227: cursor_x = x;
      000FEC 85*3B*08         [24] 4220 	mov	_cursor_x,_x
      000FEF 75*09 00         [24] 4221 	mov	(_cursor_x + 1),#0x00
                                   4222 ;	ECEN4330Lab7.c:1228: cursor_y = y;
      000FF2 85*3C*0A         [24] 4223 	mov	_cursor_y,_y
      000FF5 75*0B 00         [24] 4224 	mov	(_cursor_y + 1),#0x00
                                   4225 ;	ECEN4330Lab7.c:1229: textsize = ts;
      000FF8 85*3D*0C         [24] 4226 	mov	_textsize,_ts
                                   4227 ;	ECEN4330Lab7.c:1230: write(key);
      000FFB 85*16 82         [24] 4228 	mov	dpl,_key
      000FFE 12r09r5F         [24] 4229 	lcall	_write
                                   4230 ;	ECEN4330Lab7.c:1231: x = cursor_x;
      001001 85*08*3B         [24] 4231 	mov	_x,_cursor_x
                                   4232 ;	ECEN4330Lab7.c:1232: y = cursor_y;
      001004 85*0A*3C         [24] 4233 	mov	_y,_cursor_y
                                   4234 ;	ECEN4330Lab7.c:1233: ts = textsize;
      001007 85*0C*3D         [24] 4235 	mov	_ts,_textsize
                                   4236 ;	ECEN4330Lab7.c:1234: input16 |= (ASCIItoHEX(key) << 8);
      00100A 85*16 82         [24] 4237 	mov	dpl,_key
      00100D 12r0Br17         [24] 4238 	lcall	_ASCIItoHEX
      001010 AF 82            [24] 4239 	mov	r7,dpl
      001012 8F 06            [24] 4240 	mov	ar6,r7
      001014 E4               [12] 4241 	clr	a
      001015 42*17            [12] 4242 	orl	_input16,a
      001017 EE               [12] 4243 	mov	a,r6
      001018 42*18            [12] 4244 	orl	(_input16 + 1),a
                                   4245 ;	ECEN4330Lab7.c:1236: key = keyDetect();
      00101A 12r0Ar04         [24] 4246 	lcall	_keyDetect
      00101D 85 82*16         [24] 4247 	mov	_key,dpl
                                   4248 ;	ECEN4330Lab7.c:1237: cursor_x = x;
      001020 85*3B*08         [24] 4249 	mov	_cursor_x,_x
      001023 75*09 00         [24] 4250 	mov	(_cursor_x + 1),#0x00
                                   4251 ;	ECEN4330Lab7.c:1238: cursor_y = y;
      001026 85*3C*0A         [24] 4252 	mov	_cursor_y,_y
      001029 75*0B 00         [24] 4253 	mov	(_cursor_y + 1),#0x00
                                   4254 ;	ECEN4330Lab7.c:1239: textsize = ts;
      00102C 85*3D*0C         [24] 4255 	mov	_textsize,_ts
                                   4256 ;	ECEN4330Lab7.c:1240: write(key);
      00102F 85*16 82         [24] 4257 	mov	dpl,_key
      001032 12r09r5F         [24] 4258 	lcall	_write
                                   4259 ;	ECEN4330Lab7.c:1241: x = cursor_x;
      001035 85*08*3B         [24] 4260 	mov	_x,_cursor_x
                                   4261 ;	ECEN4330Lab7.c:1242: y = cursor_y;
      001038 85*0A*3C         [24] 4262 	mov	_y,_cursor_y
                                   4263 ;	ECEN4330Lab7.c:1243: ts = textsize;
      00103B 85*0C*3D         [24] 4264 	mov	_ts,_textsize
                                   4265 ;	ECEN4330Lab7.c:1244: input16 |= (ASCIItoHEX(key) << 4);
      00103E 85*16 82         [24] 4266 	mov	dpl,_key
      001041 12r0Br17         [24] 4267 	lcall	_ASCIItoHEX
      001044 AF 82            [24] 4268 	mov	r7,dpl
      001046 E4               [12] 4269 	clr	a
      001047 C4               [12] 4270 	swap	a
      001048 54 F0            [12] 4271 	anl	a,#0xf0
      00104A CF               [12] 4272 	xch	a,r7
      00104B C4               [12] 4273 	swap	a
      00104C CF               [12] 4274 	xch	a,r7
      00104D 6F               [12] 4275 	xrl	a,r7
      00104E CF               [12] 4276 	xch	a,r7
      00104F 54 F0            [12] 4277 	anl	a,#0xf0
      001051 CF               [12] 4278 	xch	a,r7
      001052 6F               [12] 4279 	xrl	a,r7
      001053 FE               [12] 4280 	mov	r6,a
      001054 EF               [12] 4281 	mov	a,r7
      001055 42*17            [12] 4282 	orl	_input16,a
      001057 EE               [12] 4283 	mov	a,r6
      001058 42*18            [12] 4284 	orl	(_input16 + 1),a
                                   4285 ;	ECEN4330Lab7.c:1246: key = keyDetect();
      00105A 12r0Ar04         [24] 4286 	lcall	_keyDetect
      00105D 85 82*16         [24] 4287 	mov	_key,dpl
                                   4288 ;	ECEN4330Lab7.c:1247: cursor_x = x;
      001060 85*3B*08         [24] 4289 	mov	_cursor_x,_x
      001063 75*09 00         [24] 4290 	mov	(_cursor_x + 1),#0x00
                                   4291 ;	ECEN4330Lab7.c:1248: cursor_y = y;
      001066 85*3C*0A         [24] 4292 	mov	_cursor_y,_y
      001069 75*0B 00         [24] 4293 	mov	(_cursor_y + 1),#0x00
                                   4294 ;	ECEN4330Lab7.c:1249: textsize = ts;
      00106C 85*3D*0C         [24] 4295 	mov	_textsize,_ts
                                   4296 ;	ECEN4330Lab7.c:1250: write(key);
      00106F 85*16 82         [24] 4297 	mov	dpl,_key
      001072 12r09r5F         [24] 4298 	lcall	_write
                                   4299 ;	ECEN4330Lab7.c:1251: x = cursor_x;
      001075 85*08*3B         [24] 4300 	mov	_x,_cursor_x
                                   4301 ;	ECEN4330Lab7.c:1252: y = cursor_y;
      001078 85*0A*3C         [24] 4302 	mov	_y,_cursor_y
                                   4303 ;	ECEN4330Lab7.c:1253: ts = textsize;
      00107B 85*0C*3D         [24] 4304 	mov	_ts,_textsize
                                   4305 ;	ECEN4330Lab7.c:1254: input16 |= ASCIItoHEX(key);
      00107E 85*16 82         [24] 4306 	mov	dpl,_key
      001081 12r0Br17         [24] 4307 	lcall	_ASCIItoHEX
      001084 AF 82            [24] 4308 	mov	r7,dpl
      001086 7E 00            [12] 4309 	mov	r6,#0x00
      001088 EF               [12] 4310 	mov	a,r7
      001089 42*17            [12] 4311 	orl	_input16,a
      00108B EE               [12] 4312 	mov	a,r6
      00108C 42*18            [12] 4313 	orl	(_input16 + 1),a
                                   4314 ;	ECEN4330Lab7.c:1255: dataSize = input16;
      00108E 85*17*1B         [24] 4315 	mov	_dataSize,_input16
      001091 85*18*1C         [24] 4316 	mov	(_dataSize + 1),(_input16 + 1)
                                   4317 ;	ECEN4330Lab7.c:1258: if(dataSize == 0x0000){
      001094 E5*1B            [12] 4318 	mov	a,_dataSize
      001096 45*1C            [12] 4319 	orl	a,(_dataSize + 1)
      001098 70 09            [24] 4320 	jnz	00102$
                                   4321 ;	ECEN4330Lab7.c:1259: invalidInput();
      00109A 12r0Dr7B         [24] 4322 	lcall	_invalidInput
                                   4323 ;	ECEN4330Lab7.c:1260: validInput = 0;
      00109D 75*1D 00         [24] 4324 	mov	_validInput,#0x00
      0010A0 02r0Fr77         [24] 4325 	ljmp	00104$
      0010A3                       4326 00102$:
                                   4327 ;	ECEN4330Lab7.c:1263: validInput = 1;
      0010A3 75*1D 01         [24] 4328 	mov	_validInput,#0x01
                                   4329 ;	ECEN4330Lab7.c:1265: } while (validInput == 0);
                                   4330 ;	ECEN4330Lab7.c:1266: }
      0010A6 22               [24] 4331 	ret
                                   4332 ;------------------------------------------------------------
                                   4333 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4334 ;------------------------------------------------------------
                                   4335 ;i                         Allocated to registers r6 r7 
                                   4336 ;------------------------------------------------------------
                                   4337 ;	ECEN4330Lab7.c:1277: void RAM_CHECK(){
                                   4338 ;	-----------------------------------------
                                   4339 ;	 function RAM_CHECK
                                   4340 ;	-----------------------------------------
      0010A7                       4341 _RAM_CHECK:
                                   4342 ;	ECEN4330Lab7.c:1279: data = 0;
      0010A7 75*20 00         [24] 4343 	mov	_data,#0x00
                                   4344 ;	ECEN4330Lab7.c:1280: dataEnd = 0;
      0010AA 75*1E 00         [24] 4345 	mov	_dataEnd,#0x00
                                   4346 ;	ECEN4330Lab7.c:1283: resetLCD();
      0010AD 12r0Dr53         [24] 4347 	lcall	_resetLCD
                                   4348 ;	ECEN4330Lab7.c:1284: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      0010B0 90r05r86         [24] 4349 	mov	dptr,#___str_9
      0010B3 75 F0 80         [24] 4350 	mov	b,#0x80
      0010B6 12r09rC5         [24] 4351 	lcall	_LCD_string_write
                                   4352 ;	ECEN4330Lab7.c:1285: testRAM(RAMcheckVal1);
      0010B9 75 82 55         [24] 4353 	mov	dpl,#0x55
      0010BC 12r0Dr21         [24] 4354 	lcall	_testRAM
                                   4355 ;	ECEN4330Lab7.c:1286: RAMwrite(0xFFFF, RAMcheckVal1);
      0010BF 75*00 55         [24] 4356 	mov	_RAMwrite_PARM_2,#0x55
      0010C2 90 FF FF         [24] 4357 	mov	dptr,#0xffff
      0010C5 12r0Dr11         [24] 4358 	lcall	_RAMwrite
                                   4359 ;	ECEN4330Lab7.c:1288: setTextColor(GREEN, BLACK);
      0010C8 E4               [12] 4360 	clr	a
      0010C9 F5*00            [12] 4361 	mov	_setTextColor_PARM_2,a
      0010CB F5*01            [12] 4362 	mov	(_setTextColor_PARM_2 + 1),a
      0010CD 90 07 E0         [24] 4363 	mov	dptr,#0x07e0
      0010D0 12r02rD6         [24] 4364 	lcall	_setTextColor
                                   4365 ;	ECEN4330Lab7.c:1289: LCD_string_write("Write\ncomplete.\n");
      0010D3 90r05rB5         [24] 4366 	mov	dptr,#___str_10
      0010D6 75 F0 80         [24] 4367 	mov	b,#0x80
      0010D9 12r09rC5         [24] 4368 	lcall	_LCD_string_write
                                   4369 ;	ECEN4330Lab7.c:1290: delay(200);
      0010DC 90 00 C8         [24] 4370 	mov	dptr,#0x00c8
      0010DF 12r00r25         [24] 4371 	lcall	_delay
                                   4372 ;	ECEN4330Lab7.c:1293: resetLCD();
      0010E2 12r0Dr53         [24] 4373 	lcall	_resetLCD
                                   4374 ;	ECEN4330Lab7.c:1294: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      0010E5 90r05rC6         [24] 4375 	mov	dptr,#___str_11
      0010E8 75 F0 80         [24] 4376 	mov	b,#0x80
      0010EB 12r09rC5         [24] 4377 	lcall	_LCD_string_write
                                   4378 ;	ECEN4330Lab7.c:1296: do
      0010EE 7E 00            [12] 4379 	mov	r6,#0x00
      0010F0 7F 00            [12] 4380 	mov	r7,#0x00
      0010F2                       4381 00102$:
                                   4382 ;	ECEN4330Lab7.c:1298: data = RAMread(i);
      0010F2 8E 82            [24] 4383 	mov	dpl,r6
      0010F4 8F 83            [24] 4384 	mov	dph,r7
      0010F6 C0 07            [24] 4385 	push	ar7
      0010F8 C0 06            [24] 4386 	push	ar6
      0010FA 12r0Dr40         [24] 4387 	lcall	_RAMread
      0010FD 85 82*20         [24] 4388 	mov	_data,dpl
      001100 D0 06            [24] 4389 	pop	ar6
      001102 D0 07            [24] 4390 	pop	ar7
                                   4391 ;	ECEN4330Lab7.c:1299: i++;
      001104 0E               [12] 4392 	inc	r6
      001105 BE 00 01         [24] 4393 	cjne	r6,#0x00,00163$
      001108 0F               [12] 4394 	inc	r7
      001109                       4395 00163$:
                                   4396 ;	ECEN4330Lab7.c:1300: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      001109 74 55            [12] 4397 	mov	a,#0x55
      00110B B5*20 04         [24] 4398 	cjne	a,_data,00164$
      00110E 74 01            [12] 4399 	mov	a,#0x01
      001110 80 01            [24] 4400 	sjmp	00165$
      001112                       4401 00164$:
      001112 E4               [12] 4402 	clr	a
      001113                       4403 00165$:
      001113 FD               [12] 4404 	mov	r5,a
      001114 60 09            [24] 4405 	jz	00129$
      001116 C3               [12] 4406 	clr	c
      001117 74 FE            [12] 4407 	mov	a,#0xfe
      001119 9E               [12] 4408 	subb	a,r6
      00111A 74 FF            [12] 4409 	mov	a,#0xff
      00111C 9F               [12] 4410 	subb	a,r7
      00111D 50 D3            [24] 4411 	jnc	00102$
      00111F                       4412 00129$:
                                   4413 ;	ECEN4330Lab7.c:1301: if(data == RAMcheckVal1){
      00111F ED               [12] 4414 	mov	a,r5
      001120 60 11            [24] 4415 	jz	00106$
                                   4416 ;	ECEN4330Lab7.c:1302: data = RAMread(0xFFFF);
      001122 90 FF FF         [24] 4417 	mov	dptr,#0xffff
      001125 C0 07            [24] 4418 	push	ar7
      001127 C0 06            [24] 4419 	push	ar6
      001129 12r0Dr40         [24] 4420 	lcall	_RAMread
      00112C 85 82*20         [24] 4421 	mov	_data,dpl
      00112F D0 06            [24] 4422 	pop	ar6
      001131 D0 07            [24] 4423 	pop	ar7
      001133                       4424 00106$:
                                   4425 ;	ECEN4330Lab7.c:1306: if(data != RAMcheckVal1){
      001133 74 55            [12] 4426 	mov	a,#0x55
      001135 B5*20 02         [24] 4427 	cjne	a,_data,00169$
      001138 80 61            [24] 4428 	sjmp	00117$
      00113A                       4429 00169$:
                                   4430 ;	ECEN4330Lab7.c:1307: setTextColor(RED, BLACK);
      00113A E4               [12] 4431 	clr	a
      00113B F5*00            [12] 4432 	mov	_setTextColor_PARM_2,a
      00113D F5*01            [12] 4433 	mov	(_setTextColor_PARM_2 + 1),a
      00113F 90 F8 00         [24] 4434 	mov	dptr,#0xf800
      001142 C0 07            [24] 4435 	push	ar7
      001144 C0 06            [24] 4436 	push	ar6
      001146 12r02rD6         [24] 4437 	lcall	_setTextColor
                                   4438 ;	ECEN4330Lab7.c:1308: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      001149 90r05rF1         [24] 4439 	mov	dptr,#___str_12
      00114C 75 F0 80         [24] 4440 	mov	b,#0x80
      00114F 12r09rC5         [24] 4441 	lcall	_LCD_string_write
                                   4442 ;	ECEN4330Lab7.c:1309: delay(100);
      001152 90 00 64         [24] 4443 	mov	dptr,#0x0064
      001155 12r00r25         [24] 4444 	lcall	_delay
                                   4445 ;	ECEN4330Lab7.c:1311: LCD_string_write("Error at:\n");
      001158 90r06r0F         [24] 4446 	mov	dptr,#___str_13
      00115B 75 F0 80         [24] 4447 	mov	b,#0x80
      00115E 12r09rC5         [24] 4448 	lcall	_LCD_string_write
      001161 D0 06            [24] 4449 	pop	ar6
      001163 D0 07            [24] 4450 	pop	ar7
                                   4451 ;	ECEN4330Lab7.c:1312: HEXtoASCII_16write(i - 1);
      001165 EE               [12] 4452 	mov	a,r6
      001166 24 FF            [12] 4453 	add	a,#0xff
      001168 F5 82            [12] 4454 	mov	dpl,a
      00116A EF               [12] 4455 	mov	a,r7
      00116B 34 FF            [12] 4456 	addc	a,#0xff
      00116D F5 83            [12] 4457 	mov	dph,a
      00116F 12r0Cr6C         [24] 4458 	lcall	_HEXtoASCII_16write
                                   4459 ;	ECEN4330Lab7.c:1313: LCD_string_write(": 0x");
      001172 90r06r1A         [24] 4460 	mov	dptr,#___str_14
      001175 75 F0 80         [24] 4461 	mov	b,#0x80
      001178 12r09rC5         [24] 4462 	lcall	_LCD_string_write
                                   4463 ;	ECEN4330Lab7.c:1314: HEXtoASCII_8write(data);
      00117B 85*20 82         [24] 4464 	mov	dpl,_data
      00117E 12r0Cr2F         [24] 4465 	lcall	_HEXtoASCII_8write
                                   4466 ;	ECEN4330Lab7.c:1316: setTextColor(WHITE, BLACK);
      001181 E4               [12] 4467 	clr	a
      001182 F5*00            [12] 4468 	mov	_setTextColor_PARM_2,a
      001184 F5*01            [12] 4469 	mov	(_setTextColor_PARM_2 + 1),a
      001186 90 FF FF         [24] 4470 	mov	dptr,#0xffff
      001189 12r02rD6         [24] 4471 	lcall	_setTextColor
                                   4472 ;	ECEN4330Lab7.c:1317: LCD_string_write("Returning to\nmain menu.");
      00118C 90r06r1F         [24] 4473 	mov	dptr,#___str_15
      00118F 75 F0 80         [24] 4474 	mov	b,#0x80
      001192 12r09rC5         [24] 4475 	lcall	_LCD_string_write
                                   4476 ;	ECEN4330Lab7.c:1318: delay(200);
      001195 90 00 C8         [24] 4477 	mov	dptr,#0x00c8
      001198 02r00r25         [24] 4478 	ljmp	_delay
      00119B                       4479 00117$:
                                   4480 ;	ECEN4330Lab7.c:1323: setTextColor(GREEN, BLACK);
      00119B E4               [12] 4481 	clr	a
      00119C F5*00            [12] 4482 	mov	_setTextColor_PARM_2,a
      00119E F5*01            [12] 4483 	mov	(_setTextColor_PARM_2 + 1),a
      0011A0 90 07 E0         [24] 4484 	mov	dptr,#0x07e0
      0011A3 12r02rD6         [24] 4485 	lcall	_setTextColor
                                   4486 ;	ECEN4330Lab7.c:1324: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      0011A6 90r06r37         [24] 4487 	mov	dptr,#___str_16
      0011A9 75 F0 80         [24] 4488 	mov	b,#0x80
      0011AC 12r09rC5         [24] 4489 	lcall	_LCD_string_write
                                   4490 ;	ECEN4330Lab7.c:1325: delay(200);
      0011AF 90 00 C8         [24] 4491 	mov	dptr,#0x00c8
      0011B2 12r00r25         [24] 4492 	lcall	_delay
                                   4493 ;	ECEN4330Lab7.c:1327: resetLCD();
      0011B5 12r0Dr53         [24] 4494 	lcall	_resetLCD
                                   4495 ;	ECEN4330Lab7.c:1328: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      0011B8 90r06r53         [24] 4496 	mov	dptr,#___str_17
      0011BB 75 F0 80         [24] 4497 	mov	b,#0x80
      0011BE 12r09rC5         [24] 4498 	lcall	_LCD_string_write
                                   4499 ;	ECEN4330Lab7.c:1329: testRAM(RAMcheckVal2);
      0011C1 75 82 AA         [24] 4500 	mov	dpl,#0xaa
      0011C4 12r0Dr21         [24] 4501 	lcall	_testRAM
                                   4502 ;	ECEN4330Lab7.c:1330: RAMwrite(0xFFFF, RAMcheckVal2);
      0011C7 75*00 AA         [24] 4503 	mov	_RAMwrite_PARM_2,#0xaa
      0011CA 90 FF FF         [24] 4504 	mov	dptr,#0xffff
      0011CD 12r0Dr11         [24] 4505 	lcall	_RAMwrite
                                   4506 ;	ECEN4330Lab7.c:1331: setTextColor(GREEN, BLACK);
      0011D0 E4               [12] 4507 	clr	a
      0011D1 F5*00            [12] 4508 	mov	_setTextColor_PARM_2,a
      0011D3 F5*01            [12] 4509 	mov	(_setTextColor_PARM_2 + 1),a
      0011D5 90 07 E0         [24] 4510 	mov	dptr,#0x07e0
      0011D8 12r02rD6         [24] 4511 	lcall	_setTextColor
                                   4512 ;	ECEN4330Lab7.c:1332: LCD_string_write("Write\ncomplete.\n");
      0011DB 90r05rB5         [24] 4513 	mov	dptr,#___str_10
      0011DE 75 F0 80         [24] 4514 	mov	b,#0x80
      0011E1 12r09rC5         [24] 4515 	lcall	_LCD_string_write
                                   4516 ;	ECEN4330Lab7.c:1333: delay(200);
      0011E4 90 00 C8         [24] 4517 	mov	dptr,#0x00c8
      0011E7 12r00r25         [24] 4518 	lcall	_delay
                                   4519 ;	ECEN4330Lab7.c:1336: resetLCD();
      0011EA 12r0Dr53         [24] 4520 	lcall	_resetLCD
                                   4521 ;	ECEN4330Lab7.c:1337: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      0011ED 90r06r82         [24] 4522 	mov	dptr,#___str_18
      0011F0 75 F0 80         [24] 4523 	mov	b,#0x80
      0011F3 12r09rC5         [24] 4524 	lcall	_LCD_string_write
                                   4525 ;	ECEN4330Lab7.c:1339: do
      0011F6 7E 00            [12] 4526 	mov	r6,#0x00
      0011F8 7F 00            [12] 4527 	mov	r7,#0x00
      0011FA                       4528 00108$:
                                   4529 ;	ECEN4330Lab7.c:1341: data = RAMread(i);
      0011FA 8E 82            [24] 4530 	mov	dpl,r6
      0011FC 8F 83            [24] 4531 	mov	dph,r7
      0011FE C0 07            [24] 4532 	push	ar7
      001200 C0 06            [24] 4533 	push	ar6
      001202 12r0Dr40         [24] 4534 	lcall	_RAMread
      001205 85 82*20         [24] 4535 	mov	_data,dpl
      001208 D0 06            [24] 4536 	pop	ar6
      00120A D0 07            [24] 4537 	pop	ar7
                                   4538 ;	ECEN4330Lab7.c:1342: i++;
      00120C 0E               [12] 4539 	inc	r6
      00120D BE 00 01         [24] 4540 	cjne	r6,#0x00,00170$
      001210 0F               [12] 4541 	inc	r7
      001211                       4542 00170$:
                                   4543 ;	ECEN4330Lab7.c:1343: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      001211 74 AA            [12] 4544 	mov	a,#0xaa
      001213 B5*20 04         [24] 4545 	cjne	a,_data,00171$
      001216 74 01            [12] 4546 	mov	a,#0x01
      001218 80 01            [24] 4547 	sjmp	00172$
      00121A                       4548 00171$:
      00121A E4               [12] 4549 	clr	a
      00121B                       4550 00172$:
      00121B FD               [12] 4551 	mov	r5,a
      00121C 60 09            [24] 4552 	jz	00130$
      00121E C3               [12] 4553 	clr	c
      00121F 74 FE            [12] 4554 	mov	a,#0xfe
      001221 9E               [12] 4555 	subb	a,r6
      001222 74 FF            [12] 4556 	mov	a,#0xff
      001224 9F               [12] 4557 	subb	a,r7
      001225 50 D3            [24] 4558 	jnc	00108$
      001227                       4559 00130$:
                                   4560 ;	ECEN4330Lab7.c:1344: if(data == RAMcheckVal2){
      001227 ED               [12] 4561 	mov	a,r5
      001228 60 11            [24] 4562 	jz	00112$
                                   4563 ;	ECEN4330Lab7.c:1345: data = RAMread(0xFFFF);
      00122A 90 FF FF         [24] 4564 	mov	dptr,#0xffff
      00122D C0 07            [24] 4565 	push	ar7
      00122F C0 06            [24] 4566 	push	ar6
      001231 12r0Dr40         [24] 4567 	lcall	_RAMread
      001234 85 82*20         [24] 4568 	mov	_data,dpl
      001237 D0 06            [24] 4569 	pop	ar6
      001239 D0 07            [24] 4570 	pop	ar7
      00123B                       4571 00112$:
                                   4572 ;	ECEN4330Lab7.c:1348: if(data != RAMcheckVal2){
      00123B 74 AA            [12] 4573 	mov	a,#0xaa
      00123D B5*20 02         [24] 4574 	cjne	a,_data,00176$
      001240 80 61            [24] 4575 	sjmp	00114$
      001242                       4576 00176$:
                                   4577 ;	ECEN4330Lab7.c:1349: setTextColor(RED, BLACK);
      001242 E4               [12] 4578 	clr	a
      001243 F5*00            [12] 4579 	mov	_setTextColor_PARM_2,a
      001245 F5*01            [12] 4580 	mov	(_setTextColor_PARM_2 + 1),a
      001247 90 F8 00         [24] 4581 	mov	dptr,#0xf800
      00124A C0 07            [24] 4582 	push	ar7
      00124C C0 06            [24] 4583 	push	ar6
      00124E 12r02rD6         [24] 4584 	lcall	_setTextColor
                                   4585 ;	ECEN4330Lab7.c:1350: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      001251 90r06rAD         [24] 4586 	mov	dptr,#___str_19
      001254 75 F0 80         [24] 4587 	mov	b,#0x80
      001257 12r09rC5         [24] 4588 	lcall	_LCD_string_write
                                   4589 ;	ECEN4330Lab7.c:1351: delay(100);
      00125A 90 00 64         [24] 4590 	mov	dptr,#0x0064
      00125D 12r00r25         [24] 4591 	lcall	_delay
                                   4592 ;	ECEN4330Lab7.c:1353: LCD_string_write("Error at:\n");
      001260 90r06r0F         [24] 4593 	mov	dptr,#___str_13
      001263 75 F0 80         [24] 4594 	mov	b,#0x80
      001266 12r09rC5         [24] 4595 	lcall	_LCD_string_write
      001269 D0 06            [24] 4596 	pop	ar6
      00126B D0 07            [24] 4597 	pop	ar7
                                   4598 ;	ECEN4330Lab7.c:1354: HEXtoASCII_16write(i - 1);
      00126D EE               [12] 4599 	mov	a,r6
      00126E 24 FF            [12] 4600 	add	a,#0xff
      001270 F5 82            [12] 4601 	mov	dpl,a
      001272 EF               [12] 4602 	mov	a,r7
      001273 34 FF            [12] 4603 	addc	a,#0xff
      001275 F5 83            [12] 4604 	mov	dph,a
      001277 12r0Cr6C         [24] 4605 	lcall	_HEXtoASCII_16write
                                   4606 ;	ECEN4330Lab7.c:1355: LCD_string_write(": 0x");
      00127A 90r06r1A         [24] 4607 	mov	dptr,#___str_14
      00127D 75 F0 80         [24] 4608 	mov	b,#0x80
      001280 12r09rC5         [24] 4609 	lcall	_LCD_string_write
                                   4610 ;	ECEN4330Lab7.c:1356: HEXtoASCII_8write(data);
      001283 85*20 82         [24] 4611 	mov	dpl,_data
      001286 12r0Cr2F         [24] 4612 	lcall	_HEXtoASCII_8write
                                   4613 ;	ECEN4330Lab7.c:1358: setTextColor(WHITE, BLACK);
      001289 E4               [12] 4614 	clr	a
      00128A F5*00            [12] 4615 	mov	_setTextColor_PARM_2,a
      00128C F5*01            [12] 4616 	mov	(_setTextColor_PARM_2 + 1),a
      00128E 90 FF FF         [24] 4617 	mov	dptr,#0xffff
      001291 12r02rD6         [24] 4618 	lcall	_setTextColor
                                   4619 ;	ECEN4330Lab7.c:1359: LCD_string_write("Returning to\nmain menu.");
      001294 90r06r1F         [24] 4620 	mov	dptr,#___str_15
      001297 75 F0 80         [24] 4621 	mov	b,#0x80
      00129A 12r09rC5         [24] 4622 	lcall	_LCD_string_write
                                   4623 ;	ECEN4330Lab7.c:1360: delay(100);
      00129D 90 00 64         [24] 4624 	mov	dptr,#0x0064
      0012A0 02r00r25         [24] 4625 	ljmp	_delay
      0012A3                       4626 00114$:
                                   4627 ;	ECEN4330Lab7.c:1365: setTextColor(GREEN, BLACK);
      0012A3 E4               [12] 4628 	clr	a
      0012A4 F5*00            [12] 4629 	mov	_setTextColor_PARM_2,a
      0012A6 F5*01            [12] 4630 	mov	(_setTextColor_PARM_2 + 1),a
      0012A8 90 07 E0         [24] 4631 	mov	dptr,#0x07e0
      0012AB 12r02rD6         [24] 4632 	lcall	_setTextColor
                                   4633 ;	ECEN4330Lab7.c:1366: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      0012AE 90r06rCB         [24] 4634 	mov	dptr,#___str_20
      0012B1 75 F0 80         [24] 4635 	mov	b,#0x80
      0012B4 12r09rC5         [24] 4636 	lcall	_LCD_string_write
                                   4637 ;	ECEN4330Lab7.c:1367: LCD_string_write("RAM check\ncomplete.\n\n");
      0012B7 90r06rE7         [24] 4638 	mov	dptr,#___str_21
      0012BA 75 F0 80         [24] 4639 	mov	b,#0x80
      0012BD 12r09rC5         [24] 4640 	lcall	_LCD_string_write
                                   4641 ;	ECEN4330Lab7.c:1368: delay(100);
      0012C0 90 00 64         [24] 4642 	mov	dptr,#0x0064
      0012C3 12r00r25         [24] 4643 	lcall	_delay
                                   4644 ;	ECEN4330Lab7.c:1369: setTextColor(WHITE, BLACK);
      0012C6 E4               [12] 4645 	clr	a
      0012C7 F5*00            [12] 4646 	mov	_setTextColor_PARM_2,a
      0012C9 F5*01            [12] 4647 	mov	(_setTextColor_PARM_2 + 1),a
      0012CB 90 FF FF         [24] 4648 	mov	dptr,#0xffff
      0012CE 12r02rD6         [24] 4649 	lcall	_setTextColor
                                   4650 ;	ECEN4330Lab7.c:1370: LCD_string_write("Returning to\nmain menu.");
      0012D1 90r06r1F         [24] 4651 	mov	dptr,#___str_15
      0012D4 75 F0 80         [24] 4652 	mov	b,#0x80
      0012D7 12r09rC5         [24] 4653 	lcall	_LCD_string_write
                                   4654 ;	ECEN4330Lab7.c:1371: delay(100);
      0012DA 90 00 64         [24] 4655 	mov	dptr,#0x0064
                                   4656 ;	ECEN4330Lab7.c:1374: }
      0012DD 02r00r25         [24] 4657 	ljmp	_delay
                                   4658 ;------------------------------------------------------------
                                   4659 ;Allocation info for local variables in function 'MOVE'
                                   4660 ;------------------------------------------------------------
                                   4661 ;	ECEN4330Lab7.c:1397: void MOVE(){
                                   4662 ;	-----------------------------------------
                                   4663 ;	 function MOVE
                                   4664 ;	-----------------------------------------
      0012E0                       4665 _MOVE:
                                   4666 ;	ECEN4330Lab7.c:1398: endAddrCalc = 0;
      0012E0 E4               [12] 4667 	clr	a
      0012E1 F5*34            [12] 4668 	mov	_endAddrCalc,a
      0012E3 F5*35            [12] 4669 	mov	(_endAddrCalc + 1),a
      0012E5 F5*36            [12] 4670 	mov	(_endAddrCalc + 2),a
      0012E7 F5*37            [12] 4671 	mov	(_endAddrCalc + 3),a
                                   4672 ;	ECEN4330Lab7.c:1399: addr0 = 0;                  // Source Address
      0012E9 F5*21            [12] 4673 	mov	_addr0,a
      0012EB F5*22            [12] 4674 	mov	(_addr0 + 1),a
                                   4675 ;	ECEN4330Lab7.c:1400: addr1 = 0;                  // Source End Address
      0012ED F5*23            [12] 4676 	mov	_addr1,a
      0012EF F5*24            [12] 4677 	mov	(_addr1 + 1),a
                                   4678 ;	ECEN4330Lab7.c:1401: addr2 = 0;                  // Destination Address
      0012F1 F5*25            [12] 4679 	mov	_addr2,a
      0012F3 F5*26            [12] 4680 	mov	(_addr2 + 1),a
                                   4681 ;	ECEN4330Lab7.c:1402: addr3 = 0;                  // Destination End Address
      0012F5 F5*27            [12] 4682 	mov	_addr3,a
      0012F7 F5*28            [12] 4683 	mov	(_addr3 + 1),a
                                   4684 ;	ECEN4330Lab7.c:1403: currAddr0 = 0;              // Current Source Address
      0012F9 F5*29            [12] 4685 	mov	_currAddr0,a
      0012FB F5*2A            [12] 4686 	mov	(_currAddr0 + 1),a
                                   4687 ;	ECEN4330Lab7.c:1404: currAddr1 = 0;              // Current Destination Address
      0012FD F5*2B            [12] 4688 	mov	_currAddr1,a
      0012FF F5*2C            [12] 4689 	mov	(_currAddr1 + 1),a
                                   4690 ;	ECEN4330Lab7.c:1407: resetLCD();
      001301 12r0Dr53         [24] 4691 	lcall	_resetLCD
                                   4692 ;	ECEN4330Lab7.c:1408: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      001304 90r06rFD         [24] 4693 	mov	dptr,#___str_22
      001307 75 F0 80         [24] 4694 	mov	b,#0x80
      00130A 12r09rC5         [24] 4695 	lcall	_LCD_string_write
                                   4696 ;	ECEN4330Lab7.c:1409: cursor_x -= 4 * textsize * 6;
      00130D E5*0C            [12] 4697 	mov	a,_textsize
      00130F 75 F0 18         [24] 4698 	mov	b,#0x18
      001312 A4               [48] 4699 	mul	ab
      001313 FE               [12] 4700 	mov	r6,a
      001314 AF F0            [24] 4701 	mov	r7,b
      001316 E5*08            [12] 4702 	mov	a,_cursor_x
      001318 C3               [12] 4703 	clr	c
      001319 9E               [12] 4704 	subb	a,r6
      00131A F5*08            [12] 4705 	mov	_cursor_x,a
      00131C E5*09            [12] 4706 	mov	a,(_cursor_x + 1)
      00131E 9F               [12] 4707 	subb	a,r7
      00131F F5*09            [12] 4708 	mov	(_cursor_x + 1),a
                                   4709 ;	ECEN4330Lab7.c:1410: inputRead16();
      001321 12r0DrA4         [24] 4710 	lcall	_inputRead16
                                   4711 ;	ECEN4330Lab7.c:1411: addr0 = input16;
      001324 85*17*21         [24] 4712 	mov	_addr0,_input16
      001327 85*18*22         [24] 4713 	mov	(_addr0 + 1),(_input16 + 1)
                                   4714 ;	ECEN4330Lab7.c:1414: resetLCD();
      00132A 12r0Dr53         [24] 4715 	lcall	_resetLCD
                                   4716 ;	ECEN4330Lab7.c:1415: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      00132D 90r07r2C         [24] 4717 	mov	dptr,#___str_23
      001330 75 F0 80         [24] 4718 	mov	b,#0x80
      001333 12r09rC5         [24] 4719 	lcall	_LCD_string_write
                                   4720 ;	ECEN4330Lab7.c:1416: cursor_x -= 4 * textsize * 6;
      001336 E5*0C            [12] 4721 	mov	a,_textsize
      001338 75 F0 18         [24] 4722 	mov	b,#0x18
      00133B A4               [48] 4723 	mul	ab
      00133C FE               [12] 4724 	mov	r6,a
      00133D AF F0            [24] 4725 	mov	r7,b
      00133F E5*08            [12] 4726 	mov	a,_cursor_x
      001341 C3               [12] 4727 	clr	c
      001342 9E               [12] 4728 	subb	a,r6
      001343 F5*08            [12] 4729 	mov	_cursor_x,a
      001345 E5*09            [12] 4730 	mov	a,(_cursor_x + 1)
      001347 9F               [12] 4731 	subb	a,r7
      001348 F5*09            [12] 4732 	mov	(_cursor_x + 1),a
                                   4733 ;	ECEN4330Lab7.c:1417: inputRead16();
      00134A 12r0DrA4         [24] 4734 	lcall	_inputRead16
                                   4735 ;	ECEN4330Lab7.c:1418: addr2 = input16;
      00134D 85*17*25         [24] 4736 	mov	_addr2,_input16
      001350 85*18*26         [24] 4737 	mov	(_addr2 + 1),(_input16 + 1)
                                   4738 ;	ECEN4330Lab7.c:1421: inputDataType();
      001353 12r0ErB3         [24] 4739 	lcall	_inputDataType
                                   4740 ;	ECEN4330Lab7.c:1424: resetLCD();
      001356 12r0Dr53         [24] 4741 	lcall	_resetLCD
                                   4742 ;	ECEN4330Lab7.c:1425: inputDataSize();
      001359 12r0Fr70         [24] 4743 	lcall	_inputDataSize
                                   4744 ;	ECEN4330Lab7.c:1428: if(addr2 > addr0){
      00135C C3               [12] 4745 	clr	c
      00135D E5*21            [12] 4746 	mov	a,_addr0
      00135F 95*25            [12] 4747 	subb	a,_addr2
      001361 E5*22            [12] 4748 	mov	a,(_addr0 + 1)
      001363 95*26            [12] 4749 	subb	a,(_addr2 + 1)
      001365 50 63            [24] 4750 	jnc	00108$
                                   4751 ;	ECEN4330Lab7.c:1429: endAddrCalc = addr2 + (dataSize * dataType);
      001367 85*1A*00         [24] 4752 	mov	__mulint_PARM_2,_dataType
      00136A 75*01 00         [24] 4753 	mov	(__mulint_PARM_2 + 1),#0x00
      00136D 85*1B 82         [24] 4754 	mov	dpl,_dataSize
      001370 85*1C 83         [24] 4755 	mov	dph,(_dataSize + 1)
      001373 12r00r00         [24] 4756 	lcall	__mulint
      001376 AE 82            [24] 4757 	mov	r6,dpl
      001378 AF 83            [24] 4758 	mov	r7,dph
      00137A EE               [12] 4759 	mov	a,r6
      00137B 25*25            [12] 4760 	add	a,_addr2
      00137D FC               [12] 4761 	mov	r4,a
      00137E EF               [12] 4762 	mov	a,r7
      00137F 35*26            [12] 4763 	addc	a,(_addr2 + 1)
      001381 FD               [12] 4764 	mov	r5,a
      001382 8C*34            [24] 4765 	mov	_endAddrCalc,r4
      001384 8D*35            [24] 4766 	mov	(_endAddrCalc + 1),r5
      001386 75*36 00         [24] 4767 	mov	(_endAddrCalc + 2),#0x00
      001389 75*37 00         [24] 4768 	mov	(_endAddrCalc + 3),#0x00
                                   4769 ;	ECEN4330Lab7.c:1430: if(endAddrCalc > 0xFFFF){
      00138C C3               [12] 4770 	clr	c
      00138D 74 FF            [12] 4771 	mov	a,#0xff
      00138F 95*34            [12] 4772 	subb	a,_endAddrCalc
      001391 74 FF            [12] 4773 	mov	a,#0xff
      001393 95*35            [12] 4774 	subb	a,(_endAddrCalc + 1)
      001395 E4               [12] 4775 	clr	a
      001396 95*36            [12] 4776 	subb	a,(_endAddrCalc + 2)
      001398 E4               [12] 4777 	clr	a
      001399 95*37            [12] 4778 	subb	a,(_endAddrCalc + 3)
      00139B 50 08            [24] 4779 	jnc	00102$
                                   4780 ;	ECEN4330Lab7.c:1431: addr3 = 0xFFFF;
      00139D 75*27 FF         [24] 4781 	mov	_addr3,#0xff
      0013A0 75*28 FF         [24] 4782 	mov	(_addr3 + 1),#0xff
      0013A3 80 0A            [24] 4783 	sjmp	00103$
      0013A5                       4784 00102$:
                                   4785 ;	ECEN4330Lab7.c:1434: addr3 = addr2 + (dataSize * dataType);
      0013A5 EE               [12] 4786 	mov	a,r6
      0013A6 25*25            [12] 4787 	add	a,_addr2
      0013A8 F5*27            [12] 4788 	mov	_addr3,a
      0013AA EF               [12] 4789 	mov	a,r7
      0013AB 35*26            [12] 4790 	addc	a,(_addr2 + 1)
      0013AD F5*28            [12] 4791 	mov	(_addr3 + 1),a
      0013AF                       4792 00103$:
                                   4793 ;	ECEN4330Lab7.c:1436: dataSize = addr3 - addr2;
      0013AF E5*27            [12] 4794 	mov	a,_addr3
      0013B1 C3               [12] 4795 	clr	c
      0013B2 95*25            [12] 4796 	subb	a,_addr2
      0013B4 F5*1B            [12] 4797 	mov	_dataSize,a
      0013B6 E5*28            [12] 4798 	mov	a,(_addr3 + 1)
      0013B8 95*26            [12] 4799 	subb	a,(_addr2 + 1)
      0013BA F5*1C            [12] 4800 	mov	(_dataSize + 1),a
                                   4801 ;	ECEN4330Lab7.c:1437: addr1 = addr0 + dataSize;
      0013BC E5*1B            [12] 4802 	mov	a,_dataSize
      0013BE 25*21            [12] 4803 	add	a,_addr0
      0013C0 F5*23            [12] 4804 	mov	_addr1,a
      0013C2 E5*1C            [12] 4805 	mov	a,(_dataSize + 1)
      0013C4 35*22            [12] 4806 	addc	a,(_addr0 + 1)
      0013C6 F5*24            [12] 4807 	mov	(_addr1 + 1),a
      0013C8 80 61            [24] 4808 	sjmp	00109$
      0013CA                       4809 00108$:
                                   4810 ;	ECEN4330Lab7.c:1440: endAddrCalc = addr0 + (dataSize * dataType);
      0013CA 85*1A*00         [24] 4811 	mov	__mulint_PARM_2,_dataType
      0013CD 75*01 00         [24] 4812 	mov	(__mulint_PARM_2 + 1),#0x00
      0013D0 85*1B 82         [24] 4813 	mov	dpl,_dataSize
      0013D3 85*1C 83         [24] 4814 	mov	dph,(_dataSize + 1)
      0013D6 12r00r00         [24] 4815 	lcall	__mulint
      0013D9 AE 82            [24] 4816 	mov	r6,dpl
      0013DB AF 83            [24] 4817 	mov	r7,dph
      0013DD EE               [12] 4818 	mov	a,r6
      0013DE 25*21            [12] 4819 	add	a,_addr0
      0013E0 FC               [12] 4820 	mov	r4,a
      0013E1 EF               [12] 4821 	mov	a,r7
      0013E2 35*22            [12] 4822 	addc	a,(_addr0 + 1)
      0013E4 FD               [12] 4823 	mov	r5,a
      0013E5 8C*34            [24] 4824 	mov	_endAddrCalc,r4
      0013E7 8D*35            [24] 4825 	mov	(_endAddrCalc + 1),r5
      0013E9 75*36 00         [24] 4826 	mov	(_endAddrCalc + 2),#0x00
      0013EC 75*37 00         [24] 4827 	mov	(_endAddrCalc + 3),#0x00
                                   4828 ;	ECEN4330Lab7.c:1441: if(endAddrCalc > 0xFFFF){
      0013EF C3               [12] 4829 	clr	c
      0013F0 74 FF            [12] 4830 	mov	a,#0xff
      0013F2 95*34            [12] 4831 	subb	a,_endAddrCalc
      0013F4 74 FF            [12] 4832 	mov	a,#0xff
      0013F6 95*35            [12] 4833 	subb	a,(_endAddrCalc + 1)
      0013F8 E4               [12] 4834 	clr	a
      0013F9 95*36            [12] 4835 	subb	a,(_endAddrCalc + 2)
      0013FB E4               [12] 4836 	clr	a
      0013FC 95*37            [12] 4837 	subb	a,(_endAddrCalc + 3)
      0013FE 50 08            [24] 4838 	jnc	00105$
                                   4839 ;	ECEN4330Lab7.c:1442: addr1 = 0xFFFF;
      001400 75*23 FF         [24] 4840 	mov	_addr1,#0xff
      001403 75*24 FF         [24] 4841 	mov	(_addr1 + 1),#0xff
      001406 80 0A            [24] 4842 	sjmp	00106$
      001408                       4843 00105$:
                                   4844 ;	ECEN4330Lab7.c:1445: addr1 = addr0 + (dataSize * dataType);
      001408 EE               [12] 4845 	mov	a,r6
      001409 25*21            [12] 4846 	add	a,_addr0
      00140B F5*23            [12] 4847 	mov	_addr1,a
      00140D EF               [12] 4848 	mov	a,r7
      00140E 35*22            [12] 4849 	addc	a,(_addr0 + 1)
      001410 F5*24            [12] 4850 	mov	(_addr1 + 1),a
      001412                       4851 00106$:
                                   4852 ;	ECEN4330Lab7.c:1447: dataSize = addr1 - addr0;
      001412 E5*23            [12] 4853 	mov	a,_addr1
      001414 C3               [12] 4854 	clr	c
      001415 95*21            [12] 4855 	subb	a,_addr0
      001417 F5*1B            [12] 4856 	mov	_dataSize,a
      001419 E5*24            [12] 4857 	mov	a,(_addr1 + 1)
      00141B 95*22            [12] 4858 	subb	a,(_addr0 + 1)
      00141D F5*1C            [12] 4859 	mov	(_dataSize + 1),a
                                   4860 ;	ECEN4330Lab7.c:1448: addr3 = addr2 + dataSize;
      00141F E5*1B            [12] 4861 	mov	a,_dataSize
      001421 25*25            [12] 4862 	add	a,_addr2
      001423 F5*27            [12] 4863 	mov	_addr3,a
      001425 E5*1C            [12] 4864 	mov	a,(_dataSize + 1)
      001427 35*26            [12] 4865 	addc	a,(_addr2 + 1)
      001429 F5*28            [12] 4866 	mov	(_addr3 + 1),a
      00142B                       4867 00109$:
                                   4868 ;	ECEN4330Lab7.c:1453: if(addr0 < addr2 && addr1 > addr2){
      00142B C3               [12] 4869 	clr	c
      00142C E5*21            [12] 4870 	mov	a,_addr0
      00142E 95*25            [12] 4871 	subb	a,_addr2
      001430 E5*22            [12] 4872 	mov	a,(_addr0 + 1)
      001432 95*26            [12] 4873 	subb	a,(_addr2 + 1)
      001434 50 4E            [24] 4874 	jnc	00113$
      001436 C3               [12] 4875 	clr	c
      001437 E5*25            [12] 4876 	mov	a,_addr2
      001439 95*23            [12] 4877 	subb	a,_addr1
      00143B E5*26            [12] 4878 	mov	a,(_addr2 + 1)
      00143D 95*24            [12] 4879 	subb	a,(_addr1 + 1)
      00143F 50 43            [24] 4880 	jnc	00113$
                                   4881 ;	ECEN4330Lab7.c:1454: currAddr0 = addr1;
      001441 85*23*29         [24] 4882 	mov	_currAddr0,_addr1
      001444 85*24*2A         [24] 4883 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   4884 ;	ECEN4330Lab7.c:1455: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001447 85*27*2B         [24] 4885 	mov	_currAddr1,_addr3
      00144A 85*28*2C         [24] 4886 	mov	(_currAddr1 + 1),(_addr3 + 1)
      00144D                       4887 00117$:
      00144D C3               [12] 4888 	clr	c
      00144E E5*2B            [12] 4889 	mov	a,_currAddr1
      001450 95*25            [12] 4890 	subb	a,_addr2
      001452 E5*2C            [12] 4891 	mov	a,(_currAddr1 + 1)
      001454 95*26            [12] 4892 	subb	a,(_addr2 + 1)
      001456 40 6D            [24] 4893 	jc	00114$
                                   4894 ;	ECEN4330Lab7.c:1456: data = RAMread(currAddr0);
      001458 85*29 82         [24] 4895 	mov	dpl,_currAddr0
      00145B 85*2A 83         [24] 4896 	mov	dph,(_currAddr0 + 1)
      00145E 12r0Dr40         [24] 4897 	lcall	_RAMread
      001461 85 82*20         [24] 4898 	mov	_data,dpl
                                   4899 ;	ECEN4330Lab7.c:1457: RAMwrite(currAddr1, data);
      001464 85*20*00         [24] 4900 	mov	_RAMwrite_PARM_2,_data
      001467 85*2B 82         [24] 4901 	mov	dpl,_currAddr1
      00146A 85*2C 83         [24] 4902 	mov	dph,(_currAddr1 + 1)
      00146D 12r0Dr11         [24] 4903 	lcall	_RAMwrite
                                   4904 ;	ECEN4330Lab7.c:1458: currAddr0--;
      001470 15*29            [12] 4905 	dec	_currAddr0
      001472 74 FF            [12] 4906 	mov	a,#0xff
      001474 B5*29 02         [24] 4907 	cjne	a,_currAddr0,00166$
      001477 15*2A            [12] 4908 	dec	(_currAddr0 + 1)
      001479                       4909 00166$:
                                   4910 ;	ECEN4330Lab7.c:1455: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001479 15*2B            [12] 4911 	dec	_currAddr1
      00147B 74 FF            [12] 4912 	mov	a,#0xff
      00147D B5*2B 02         [24] 4913 	cjne	a,_currAddr1,00167$
      001480 15*2C            [12] 4914 	dec	(_currAddr1 + 1)
      001482                       4915 00167$:
      001482 80 C9            [24] 4916 	sjmp	00117$
      001484                       4917 00113$:
                                   4918 ;	ECEN4330Lab7.c:1465: currAddr0 = addr0;
      001484 85*21*29         [24] 4919 	mov	_currAddr0,_addr0
      001487 85*22*2A         [24] 4920 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   4921 ;	ECEN4330Lab7.c:1466: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      00148A 85*25*2B         [24] 4922 	mov	_currAddr1,_addr2
      00148D 85*26*2C         [24] 4923 	mov	(_currAddr1 + 1),(_addr2 + 1)
      001490                       4924 00120$:
      001490 C3               [12] 4925 	clr	c
      001491 E5*27            [12] 4926 	mov	a,_addr3
      001493 95*2B            [12] 4927 	subb	a,_currAddr1
      001495 E5*28            [12] 4928 	mov	a,(_addr3 + 1)
      001497 95*2C            [12] 4929 	subb	a,(_currAddr1 + 1)
      001499 40 2A            [24] 4930 	jc	00114$
                                   4931 ;	ECEN4330Lab7.c:1467: data = RAMread(currAddr0);
      00149B 85*29 82         [24] 4932 	mov	dpl,_currAddr0
      00149E 85*2A 83         [24] 4933 	mov	dph,(_currAddr0 + 1)
      0014A1 12r0Dr40         [24] 4934 	lcall	_RAMread
      0014A4 85 82*20         [24] 4935 	mov	_data,dpl
                                   4936 ;	ECEN4330Lab7.c:1468: RAMwrite(currAddr1, data);
      0014A7 85*20*00         [24] 4937 	mov	_RAMwrite_PARM_2,_data
      0014AA 85*2B 82         [24] 4938 	mov	dpl,_currAddr1
      0014AD 85*2C 83         [24] 4939 	mov	dph,(_currAddr1 + 1)
      0014B0 12r0Dr11         [24] 4940 	lcall	_RAMwrite
                                   4941 ;	ECEN4330Lab7.c:1469: currAddr0++;
      0014B3 05*29            [12] 4942 	inc	_currAddr0
      0014B5 E4               [12] 4943 	clr	a
      0014B6 B5*29 02         [24] 4944 	cjne	a,_currAddr0,00169$
      0014B9 05*2A            [12] 4945 	inc	(_currAddr0 + 1)
      0014BB                       4946 00169$:
                                   4947 ;	ECEN4330Lab7.c:1466: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      0014BB 05*2B            [12] 4948 	inc	_currAddr1
      0014BD E4               [12] 4949 	clr	a
      0014BE B5*2B CF         [24] 4950 	cjne	a,_currAddr1,00120$
      0014C1 05*2C            [12] 4951 	inc	(_currAddr1 + 1)
      0014C3 80 CB            [24] 4952 	sjmp	00120$
      0014C5                       4953 00114$:
                                   4954 ;	ECEN4330Lab7.c:1474: resetLCD();
      0014C5 12r0Dr53         [24] 4955 	lcall	_resetLCD
                                   4956 ;	ECEN4330Lab7.c:1475: setTextColor(GREEN, BLACK);
      0014C8 E4               [12] 4957 	clr	a
      0014C9 F5*00            [12] 4958 	mov	_setTextColor_PARM_2,a
      0014CB F5*01            [12] 4959 	mov	(_setTextColor_PARM_2 + 1),a
      0014CD 90 07 E0         [24] 4960 	mov	dptr,#0x07e0
      0014D0 12r02rD6         [24] 4961 	lcall	_setTextColor
                                   4962 ;	ECEN4330Lab7.c:1476: LCD_string_write("\nMove complete.\n\n");
      0014D3 90r07r60         [24] 4963 	mov	dptr,#___str_24
      0014D6 75 F0 80         [24] 4964 	mov	b,#0x80
      0014D9 12r09rC5         [24] 4965 	lcall	_LCD_string_write
                                   4966 ;	ECEN4330Lab7.c:1477: delay(100);
      0014DC 90 00 64         [24] 4967 	mov	dptr,#0x0064
      0014DF 12r00r25         [24] 4968 	lcall	_delay
                                   4969 ;	ECEN4330Lab7.c:1478: setTextColor(WHITE, BLACK);
      0014E2 E4               [12] 4970 	clr	a
      0014E3 F5*00            [12] 4971 	mov	_setTextColor_PARM_2,a
      0014E5 F5*01            [12] 4972 	mov	(_setTextColor_PARM_2 + 1),a
      0014E7 90 FF FF         [24] 4973 	mov	dptr,#0xffff
      0014EA 12r02rD6         [24] 4974 	lcall	_setTextColor
                                   4975 ;	ECEN4330Lab7.c:1479: LCD_string_write("Returning to\nmain menu.");
      0014ED 90r06r1F         [24] 4976 	mov	dptr,#___str_15
      0014F0 75 F0 80         [24] 4977 	mov	b,#0x80
      0014F3 12r09rC5         [24] 4978 	lcall	_LCD_string_write
                                   4979 ;	ECEN4330Lab7.c:1480: delay(100);
      0014F6 90 00 64         [24] 4980 	mov	dptr,#0x0064
                                   4981 ;	ECEN4330Lab7.c:1481: }
      0014F9 02r00r25         [24] 4982 	ljmp	_delay
                                   4983 ;------------------------------------------------------------
                                   4984 ;Allocation info for local variables in function 'COUNT'
                                   4985 ;------------------------------------------------------------
                                   4986 ;i                         Allocated to registers 
                                   4987 ;------------------------------------------------------------
                                   4988 ;	ECEN4330Lab7.c:1489: void COUNT(){
                                   4989 ;	-----------------------------------------
                                   4990 ;	 function COUNT
                                   4991 ;	-----------------------------------------
      0014FC                       4992 _COUNT:
                                   4993 ;	ECEN4330Lab7.c:1490: endAddrCalc = 0;
      0014FC E4               [12] 4994 	clr	a
      0014FD F5*34            [12] 4995 	mov	_endAddrCalc,a
      0014FF F5*35            [12] 4996 	mov	(_endAddrCalc + 1),a
      001501 F5*36            [12] 4997 	mov	(_endAddrCalc + 2),a
      001503 F5*37            [12] 4998 	mov	(_endAddrCalc + 3),a
                                   4999 ;	ECEN4330Lab7.c:1491: addr0 = 0;                      // Starting Address
      001505 F5*21            [12] 5000 	mov	_addr0,a
      001507 F5*22            [12] 5001 	mov	(_addr0 + 1),a
                                   5002 ;	ECEN4330Lab7.c:1492: addr1 = 0;                      // End Address
      001509 F5*23            [12] 5003 	mov	_addr1,a
      00150B F5*24            [12] 5004 	mov	(_addr1 + 1),a
                                   5005 ;	ECEN4330Lab7.c:1493: dataSize = 0;                   // Data Size
      00150D F5*1B            [12] 5006 	mov	_dataSize,a
      00150F F5*1C            [12] 5007 	mov	(_dataSize + 1),a
                                   5008 ;	ECEN4330Lab7.c:1494: byte1 = 0;                       // Find Value
      001511 F5*2F            [12] 5009 	mov	_byte1,a
      001513 F5*30            [12] 5010 	mov	(_byte1 + 1),a
                                   5011 ;	ECEN4330Lab7.c:1495: count = 0;
      001515 F5*32            [12] 5012 	mov	_count,a
      001517 F5*33            [12] 5013 	mov	(_count + 1),a
                                   5014 ;	ECEN4330Lab7.c:1496: addr3 = 0;						// Count overflow
      001519 F5*27            [12] 5015 	mov	_addr3,a
      00151B F5*28            [12] 5016 	mov	(_addr3 + 1),a
                                   5017 ;	ECEN4330Lab7.c:1497: dataEnd = 0;
                                   5018 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      00151D F5*1E            [12] 5019 	mov	_dataEnd,a
                                   5020 ;	ECEN4330Lab7.c:1500: resetLCD();
      00151F 12r0Dr53         [24] 5021 	lcall	_resetLCD
                                   5022 ;	ECEN4330Lab7.c:1501: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001522 90r07r72         [24] 5023 	mov	dptr,#___str_25
      001525 75 F0 80         [24] 5024 	mov	b,#0x80
      001528 12r09rC5         [24] 5025 	lcall	_LCD_string_write
                                   5026 ;	ECEN4330Lab7.c:1502: cursor_x -= 4 * textsize * 6;
      00152B E5*0C            [12] 5027 	mov	a,_textsize
      00152D 75 F0 18         [24] 5028 	mov	b,#0x18
      001530 A4               [48] 5029 	mul	ab
      001531 FE               [12] 5030 	mov	r6,a
      001532 AF F0            [24] 5031 	mov	r7,b
      001534 E5*08            [12] 5032 	mov	a,_cursor_x
      001536 C3               [12] 5033 	clr	c
      001537 9E               [12] 5034 	subb	a,r6
      001538 F5*08            [12] 5035 	mov	_cursor_x,a
      00153A E5*09            [12] 5036 	mov	a,(_cursor_x + 1)
      00153C 9F               [12] 5037 	subb	a,r7
      00153D F5*09            [12] 5038 	mov	(_cursor_x + 1),a
                                   5039 ;	ECEN4330Lab7.c:1503: inputRead16();                  // Read input
      00153F 12r0DrA4         [24] 5040 	lcall	_inputRead16
                                   5041 ;	ECEN4330Lab7.c:1504: addr0 = input16;                // Start address
      001542 85*17*21         [24] 5042 	mov	_addr0,_input16
      001545 85*18*22         [24] 5043 	mov	(_addr0 + 1),(_input16 + 1)
                                   5044 ;	ECEN4330Lab7.c:1507: resetLCD();
      001548 12r0Dr53         [24] 5045 	lcall	_resetLCD
                                   5046 ;	ECEN4330Lab7.c:1508: inputDataSize();                // Prompt & read input
      00154B 12r0Fr70         [24] 5047 	lcall	_inputDataSize
                                   5048 ;	ECEN4330Lab7.c:1511: resetLCD();
      00154E 12r0Dr53         [24] 5049 	lcall	_resetLCD
                                   5050 ;	ECEN4330Lab7.c:1512: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      001551 90r07r99         [24] 5051 	mov	dptr,#___str_26
      001554 75 F0 80         [24] 5052 	mov	b,#0x80
      001557 12r09rC5         [24] 5053 	lcall	_LCD_string_write
                                   5054 ;	ECEN4330Lab7.c:1513: cursor_x -= 2 * textsize * 6;
      00155A E5*0C            [12] 5055 	mov	a,_textsize
      00155C 75 F0 0C         [24] 5056 	mov	b,#0x0c
      00155F A4               [48] 5057 	mul	ab
      001560 FE               [12] 5058 	mov	r6,a
      001561 AF F0            [24] 5059 	mov	r7,b
      001563 E5*08            [12] 5060 	mov	a,_cursor_x
      001565 C3               [12] 5061 	clr	c
      001566 9E               [12] 5062 	subb	a,r6
      001567 F5*08            [12] 5063 	mov	_cursor_x,a
      001569 E5*09            [12] 5064 	mov	a,(_cursor_x + 1)
      00156B 9F               [12] 5065 	subb	a,r7
      00156C F5*09            [12] 5066 	mov	(_cursor_x + 1),a
                                   5067 ;	ECEN4330Lab7.c:1514: inputRead8();                  // Read input
      00156E 12r0Er5F         [24] 5068 	lcall	_inputRead8
                                   5069 ;	ECEN4330Lab7.c:1515: byte1 = input8;                 // Find value
      001571 85*19*2F         [24] 5070 	mov	_byte1,_input8
      001574 75*30 00         [24] 5071 	mov	(_byte1 + 1),#0x00
                                   5072 ;	ECEN4330Lab7.c:1518: endAddrCalc = addr0 + dataSize;
      001577 E5*1B            [12] 5073 	mov	a,_dataSize
      001579 25*21            [12] 5074 	add	a,_addr0
      00157B FE               [12] 5075 	mov	r6,a
      00157C E5*1C            [12] 5076 	mov	a,(_dataSize + 1)
      00157E 35*22            [12] 5077 	addc	a,(_addr0 + 1)
      001580 FF               [12] 5078 	mov	r7,a
      001581 8E*34            [24] 5079 	mov	_endAddrCalc,r6
      001583 8F*35            [24] 5080 	mov	(_endAddrCalc + 1),r7
      001585 75*36 00         [24] 5081 	mov	(_endAddrCalc + 2),#0x00
      001588 75*37 00         [24] 5082 	mov	(_endAddrCalc + 3),#0x00
                                   5083 ;	ECEN4330Lab7.c:1519: if(endAddrCalc < addr0){ // RAM overflow
      00158B AC*21            [24] 5084 	mov	r4,_addr0
      00158D AD*22            [24] 5085 	mov	r5,(_addr0 + 1)
      00158F 7E 00            [12] 5086 	mov	r6,#0x00
      001591 7F 00            [12] 5087 	mov	r7,#0x00
      001593 C3               [12] 5088 	clr	c
      001594 E5*34            [12] 5089 	mov	a,_endAddrCalc
      001596 9C               [12] 5090 	subb	a,r4
      001597 E5*35            [12] 5091 	mov	a,(_endAddrCalc + 1)
      001599 9D               [12] 5092 	subb	a,r5
      00159A E5*36            [12] 5093 	mov	a,(_endAddrCalc + 2)
      00159C 9E               [12] 5094 	subb	a,r6
      00159D E5*37            [12] 5095 	mov	a,(_endAddrCalc + 3)
      00159F 9F               [12] 5096 	subb	a,r7
      0015A0 50 14            [24] 5097 	jnc	00102$
                                   5098 ;	ECEN4330Lab7.c:1520: addr1 = 0xFFFF;             // Set end address
      0015A2 75*23 FF         [24] 5099 	mov	_addr1,#0xff
                                   5100 ;	ECEN4330Lab7.c:1521: dataSize = addr1 - addr0;   // Recalculate data size
      0015A5 74 FF            [12] 5101 	mov	a,#0xff
      0015A7 F5*24            [12] 5102 	mov	(_addr1 + 1),a
      0015A9 C3               [12] 5103 	clr	c
      0015AA 95*21            [12] 5104 	subb	a,_addr0
      0015AC F5*1B            [12] 5105 	mov	_dataSize,a
      0015AE 74 FF            [12] 5106 	mov	a,#0xff
      0015B0 95*22            [12] 5107 	subb	a,(_addr0 + 1)
      0015B2 F5*1C            [12] 5108 	mov	(_dataSize + 1),a
      0015B4 80 0C            [24] 5109 	sjmp	00103$
      0015B6                       5110 00102$:
                                   5111 ;	ECEN4330Lab7.c:1524: addr1 = addr0 + dataSize;
      0015B6 E5*1B            [12] 5112 	mov	a,_dataSize
      0015B8 25*21            [12] 5113 	add	a,_addr0
      0015BA F5*23            [12] 5114 	mov	_addr1,a
      0015BC E5*1C            [12] 5115 	mov	a,(_dataSize + 1)
      0015BE 35*22            [12] 5116 	addc	a,(_addr0 + 1)
      0015C0 F5*24            [12] 5117 	mov	(_addr1 + 1),a
      0015C2                       5118 00103$:
                                   5119 ;	ECEN4330Lab7.c:1542: int i = addr0;
      0015C2 AE*21            [24] 5120 	mov	r6,_addr0
      0015C4 AF*22            [24] 5121 	mov	r7,(_addr0 + 1)
                                   5122 ;	ECEN4330Lab7.c:1543: while(i <= addr1 && dataEnd == 0){
      0015C6                       5123 00111$:
      0015C6 8E 04            [24] 5124 	mov	ar4,r6
      0015C8 8F 05            [24] 5125 	mov	ar5,r7
      0015CA C3               [12] 5126 	clr	c
      0015CB E5*23            [12] 5127 	mov	a,_addr1
      0015CD 9C               [12] 5128 	subb	a,r4
      0015CE E5*24            [12] 5129 	mov	a,(_addr1 + 1)
      0015D0 9D               [12] 5130 	subb	a,r5
      0015D1 40 4C            [24] 5131 	jc	00113$
      0015D3 E5*1E            [12] 5132 	mov	a,_dataEnd
      0015D5 70 48            [24] 5133 	jnz	00113$
                                   5134 ;	ECEN4330Lab7.c:1544: data = RAMread(i);
      0015D7 8E 82            [24] 5135 	mov	dpl,r6
      0015D9 8F 83            [24] 5136 	mov	dph,r7
      0015DB C0 07            [24] 5137 	push	ar7
      0015DD C0 06            [24] 5138 	push	ar6
      0015DF 12r0Dr40         [24] 5139 	lcall	_RAMread
      0015E2 85 82*20         [24] 5140 	mov	_data,dpl
      0015E5 D0 06            [24] 5141 	pop	ar6
      0015E7 D0 07            [24] 5142 	pop	ar7
                                   5143 ;	ECEN4330Lab7.c:1545: if(data == byte1){
      0015E9 AC*20            [24] 5144 	mov	r4,_data
      0015EB 7D 00            [12] 5145 	mov	r5,#0x00
      0015ED EC               [12] 5146 	mov	a,r4
      0015EE B5*2F 1A         [24] 5147 	cjne	a,_byte1,00107$
      0015F1 ED               [12] 5148 	mov	a,r5
      0015F2 B5*30 16         [24] 5149 	cjne	a,(_byte1 + 1),00107$
                                   5150 ;	ECEN4330Lab7.c:1546: if(count == 0xFFFF){
      0015F5 74 FF            [12] 5151 	mov	a,#0xff
      0015F7 B5*32 09         [24] 5152 	cjne	a,_count,00105$
      0015FA B5*33 06         [24] 5153 	cjne	a,(_count + 1),00105$
                                   5154 ;	ECEN4330Lab7.c:1547: addr3 = 1;
      0015FD 75*27 01         [24] 5155 	mov	_addr3,#0x01
      001600 75*28 00         [24] 5156 	mov	(_addr3 + 1),#0x00
      001603                       5157 00105$:
                                   5158 ;	ECEN4330Lab7.c:1549: count++;
      001603 05*32            [12] 5159 	inc	_count
      001605 E4               [12] 5160 	clr	a
      001606 B5*32 02         [24] 5161 	cjne	a,_count,00173$
      001609 05*33            [12] 5162 	inc	(_count + 1)
      00160B                       5163 00173$:
      00160B                       5164 00107$:
                                   5165 ;	ECEN4330Lab7.c:1551: if(i == 0xFFFF){
      00160B 8E 04            [24] 5166 	mov	ar4,r6
      00160D 8F 05            [24] 5167 	mov	ar5,r7
      00160F BC FF 06         [24] 5168 	cjne	r4,#0xff,00109$
      001612 BD FF 03         [24] 5169 	cjne	r5,#0xff,00109$
                                   5170 ;	ECEN4330Lab7.c:1552: dataEnd = 1;
      001615 75*1E 01         [24] 5171 	mov	_dataEnd,#0x01
      001618                       5172 00109$:
                                   5173 ;	ECEN4330Lab7.c:1554: i++;
      001618 0E               [12] 5174 	inc	r6
      001619 BE 00 AA         [24] 5175 	cjne	r6,#0x00,00111$
      00161C 0F               [12] 5176 	inc	r7
      00161D 80 A7            [24] 5177 	sjmp	00111$
      00161F                       5178 00113$:
                                   5179 ;	ECEN4330Lab7.c:1557: if(count > 0 || addr3 == 1){
      00161F E5*32            [12] 5180 	mov	a,_count
      001621 45*33            [12] 5181 	orl	a,(_count + 1)
      001623 70 0D            [24] 5182 	jnz	00119$
      001625 74 01            [12] 5183 	mov	a,#0x01
      001627 B5*27 06         [24] 5184 	cjne	a,_addr3,00178$
      00162A 14               [12] 5185 	dec	a
      00162B B5*28 02         [24] 5186 	cjne	a,(_addr3 + 1),00178$
      00162E 80 02            [24] 5187 	sjmp	00179$
      001630                       5188 00178$:
      001630 80 5F            [24] 5189 	sjmp	00120$
      001632                       5190 00179$:
      001632                       5191 00119$:
                                   5192 ;	ECEN4330Lab7.c:1558: resetLCD();
      001632 12r0Dr53         [24] 5193 	lcall	_resetLCD
                                   5194 ;	ECEN4330Lab7.c:1559: setTextColor(GREEN, BLACK);
      001635 E4               [12] 5195 	clr	a
      001636 F5*00            [12] 5196 	mov	_setTextColor_PARM_2,a
      001638 F5*01            [12] 5197 	mov	(_setTextColor_PARM_2 + 1),a
      00163A 90 07 E0         [24] 5198 	mov	dptr,#0x07e0
      00163D 12r02rD6         [24] 5199 	lcall	_setTextColor
                                   5200 ;	ECEN4330Lab7.c:1560: LCD_string_write("\n0x");
      001640 90r07rB6         [24] 5201 	mov	dptr,#___str_27
      001643 75 F0 80         [24] 5202 	mov	b,#0x80
      001646 12r09rC5         [24] 5203 	lcall	_LCD_string_write
                                   5204 ;	ECEN4330Lab7.c:1561: HEXtoASCII_8write(byte1);
      001649 85*2F 82         [24] 5205 	mov	dpl,_byte1
      00164C 12r0Cr2F         [24] 5206 	lcall	_HEXtoASCII_8write
                                   5207 ;	ECEN4330Lab7.c:1562: LCD_string_write(" found\n");
      00164F 90r07rBA         [24] 5208 	mov	dptr,#___str_28
      001652 75 F0 80         [24] 5209 	mov	b,#0x80
      001655 12r09rC5         [24] 5210 	lcall	_LCD_string_write
                                   5211 ;	ECEN4330Lab7.c:1564: if(count > 0){
      001658 E5*32            [12] 5212 	mov	a,_count
      00165A 45*33            [12] 5213 	orl	a,(_count + 1)
      00165C 60 0B            [24] 5214 	jz	00117$
                                   5215 ;	ECEN4330Lab7.c:1565: HEXtoASCII_16write(count);
      00165E 85*32 82         [24] 5216 	mov	dpl,_count
      001661 85*33 83         [24] 5217 	mov	dph,(_count + 1)
      001664 12r0Cr6C         [24] 5218 	lcall	_HEXtoASCII_16write
      001667 80 16            [24] 5219 	sjmp	00118$
      001669                       5220 00117$:
                                   5221 ;	ECEN4330Lab7.c:1567: else if(addr3 == 1){
      001669 74 01            [12] 5222 	mov	a,#0x01
      00166B B5*27 06         [24] 5223 	cjne	a,_addr3,00181$
      00166E 14               [12] 5224 	dec	a
      00166F B5*28 02         [24] 5225 	cjne	a,(_addr3 + 1),00181$
      001672 80 02            [24] 5226 	sjmp	00182$
      001674                       5227 00181$:
      001674 80 09            [24] 5228 	sjmp	00118$
      001676                       5229 00182$:
                                   5230 ;	ECEN4330Lab7.c:1568: LCD_string_write("0x10000");
      001676 90r07rC2         [24] 5231 	mov	dptr,#___str_29
      001679 75 F0 80         [24] 5232 	mov	b,#0x80
      00167C 12r09rC5         [24] 5233 	lcall	_LCD_string_write
      00167F                       5234 00118$:
                                   5235 ;	ECEN4330Lab7.c:1570: LCD_string_write("\ntimes.");
      00167F 90r07rCA         [24] 5236 	mov	dptr,#___str_30
      001682 75 F0 80         [24] 5237 	mov	b,#0x80
      001685 12r09rC5         [24] 5238 	lcall	_LCD_string_write
                                   5239 ;	ECEN4330Lab7.c:1571: delay(300);
      001688 90 01 2C         [24] 5240 	mov	dptr,#0x012c
      00168B 12r00r25         [24] 5241 	lcall	_delay
                                   5242 ;	ECEN4330Lab7.c:1572: FIND_display();                 // Display dump data
      00168E 02r1CrCC         [24] 5243 	ljmp	_FIND_display
      001691                       5244 00120$:
                                   5245 ;	ECEN4330Lab7.c:1575: resetLCD();
      001691 12r0Dr53         [24] 5246 	lcall	_resetLCD
                                   5247 ;	ECEN4330Lab7.c:1576: LCD_string_write("\n0x");
      001694 90r07rB6         [24] 5248 	mov	dptr,#___str_27
      001697 75 F0 80         [24] 5249 	mov	b,#0x80
      00169A 12r09rC5         [24] 5250 	lcall	_LCD_string_write
                                   5251 ;	ECEN4330Lab7.c:1577: HEXtoASCII_8write(byte1);
      00169D 85*2F 82         [24] 5252 	mov	dpl,_byte1
      0016A0 12r0Cr2F         [24] 5253 	lcall	_HEXtoASCII_8write
                                   5254 ;	ECEN4330Lab7.c:1578: LCD_string_write(" not\nfound in\nexternal RAM\n");
      0016A3 90r07rD2         [24] 5255 	mov	dptr,#___str_31
      0016A6 75 F0 80         [24] 5256 	mov	b,#0x80
      0016A9 12r09rC5         [24] 5257 	lcall	_LCD_string_write
                                   5258 ;	ECEN4330Lab7.c:1579: HEXtoASCII_16write(addr0);
      0016AC 85*21 82         [24] 5259 	mov	dpl,_addr0
      0016AF 85*22 83         [24] 5260 	mov	dph,(_addr0 + 1)
      0016B2 12r0Cr6C         [24] 5261 	lcall	_HEXtoASCII_16write
                                   5262 ;	ECEN4330Lab7.c:1580: LCD_string_write(" -\n");
      0016B5 90r07rEE         [24] 5263 	mov	dptr,#___str_32
      0016B8 75 F0 80         [24] 5264 	mov	b,#0x80
      0016BB 12r09rC5         [24] 5265 	lcall	_LCD_string_write
                                   5266 ;	ECEN4330Lab7.c:1581: HEXtoASCII_16write(addr1);
      0016BE 85*23 82         [24] 5267 	mov	dpl,_addr1
      0016C1 85*24 83         [24] 5268 	mov	dph,(_addr1 + 1)
      0016C4 12r0Cr6C         [24] 5269 	lcall	_HEXtoASCII_16write
                                   5270 ;	ECEN4330Lab7.c:1582: delay(300);
      0016C7 90 01 2C         [24] 5271 	mov	dptr,#0x012c
      0016CA 12r00r25         [24] 5272 	lcall	_delay
                                   5273 ;	ECEN4330Lab7.c:1583: resetLCD();
      0016CD 12r0Dr53         [24] 5274 	lcall	_resetLCD
                                   5275 ;	ECEN4330Lab7.c:1584: LCD_string_write("Returning to\nmain menu.");
      0016D0 90r06r1F         [24] 5276 	mov	dptr,#___str_15
      0016D3 75 F0 80         [24] 5277 	mov	b,#0x80
      0016D6 12r09rC5         [24] 5278 	lcall	_LCD_string_write
                                   5279 ;	ECEN4330Lab7.c:1585: delay(200);
      0016D9 90 00 C8         [24] 5280 	mov	dptr,#0x00c8
                                   5281 ;	ECEN4330Lab7.c:1587: }
      0016DC 02r00r25         [24] 5282 	ljmp	_delay
                                   5283 ;------------------------------------------------------------
                                   5284 ;Allocation info for local variables in function 'DUMP_display'
                                   5285 ;------------------------------------------------------------
                                   5286 ;i                         Allocated to registers r6 r7 
                                   5287 ;j                         Allocated to registers r4 r5 
                                   5288 ;------------------------------------------------------------
                                   5289 ;	ECEN4330Lab7.c:1595: void DUMP_display(){
                                   5290 ;	-----------------------------------------
                                   5291 ;	 function DUMP_display
                                   5292 ;	-----------------------------------------
      0016DF                       5293 _DUMP_display:
                                   5294 ;	ECEN4330Lab7.c:1598: currAddr1 = 0;              // Page Count
      0016DF E4               [12] 5295 	clr	a
      0016E0 F5*2B            [12] 5296 	mov	_currAddr1,a
      0016E2 F5*2C            [12] 5297 	mov	(_currAddr1 + 1),a
                                   5298 ;	ECEN4330Lab7.c:1599: dataEnd = 0;
                                   5299 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      0016E4 F5*1E            [12] 5300 	mov	_dataEnd,a
                                   5301 ;	ECEN4330Lab7.c:1600: addr2 = 0;					// Prev data count
      0016E6 F5*25            [12] 5302 	mov	_addr2,a
      0016E8 F5*26            [12] 5303 	mov	(_addr2 + 1),a
                                   5304 ;	ECEN4330Lab7.c:1602: currAddr0 = addr0;          // Set current address
      0016EA 85*21*29         [24] 5305 	mov	_currAddr0,_addr0
      0016ED 85*22*2A         [24] 5306 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5307 ;	ECEN4330Lab7.c:1604: do{
      0016F0                       5308 00134$:
                                   5309 ;	ECEN4330Lab7.c:1605: resetLCD();
      0016F0 12r0Dr53         [24] 5310 	lcall	_resetLCD
                                   5311 ;	ECEN4330Lab7.c:1606: setTextSize(2);
      0016F3 75 82 02         [24] 5312 	mov	dpl,#0x02
      0016F6 12r02rE3         [24] 5313 	lcall	_setTextSize
                                   5314 ;	ECEN4330Lab7.c:1607: LCD_string_write("\n");
      0016F9 90r07rF2         [24] 5315 	mov	dptr,#___str_33
      0016FC 75 F0 80         [24] 5316 	mov	b,#0x80
      0016FF 12r09rC5         [24] 5317 	lcall	_LCD_string_write
                                   5318 ;	ECEN4330Lab7.c:1610: if(dataSize >= 10){
      001702 C3               [12] 5319 	clr	c
      001703 E5*1B            [12] 5320 	mov	a,_dataSize
      001705 94 0A            [12] 5321 	subb	a,#0x0a
      001707 E5*1C            [12] 5322 	mov	a,(_dataSize + 1)
      001709 94 00            [12] 5323 	subb	a,#0x00
      00170B 50 03            [24] 5324 	jnc	00258$
      00170D 02r17rAE         [24] 5325 	ljmp	00119$
      001710                       5326 00258$:
                                   5327 ;	ECEN4330Lab7.c:1611: addr2 = 10;
      001710 75*25 0A         [24] 5328 	mov	_addr2,#0x0a
      001713 75*26 00         [24] 5329 	mov	(_addr2 + 1),#0x00
                                   5330 ;	ECEN4330Lab7.c:1613: for(i = 0; i < 10; i++){
      001716 7E 00            [12] 5331 	mov	r6,#0x00
      001718 7F 00            [12] 5332 	mov	r7,#0x00
      00171A                       5333 00140$:
                                   5334 ;	ECEN4330Lab7.c:1614: HEXtoASCII_16write(currAddr0);
      00171A 85*29 82         [24] 5335 	mov	dpl,_currAddr0
      00171D 85*2A 83         [24] 5336 	mov	dph,(_currAddr0 + 1)
      001720 C0 07            [24] 5337 	push	ar7
      001722 C0 06            [24] 5338 	push	ar6
      001724 12r0Cr6C         [24] 5339 	lcall	_HEXtoASCII_16write
                                   5340 ;	ECEN4330Lab7.c:1615: LCD_string_write(": 0x");
      001727 90r06r1A         [24] 5341 	mov	dptr,#___str_14
      00172A 75 F0 80         [24] 5342 	mov	b,#0x80
      00172D 12r09rC5         [24] 5343 	lcall	_LCD_string_write
      001730 D0 06            [24] 5344 	pop	ar6
      001732 D0 07            [24] 5345 	pop	ar7
                                   5346 ;	ECEN4330Lab7.c:1616: for(j = 0; j < dataType; j++){
      001734 7C 00            [12] 5347 	mov	r4,#0x00
      001736 7D 00            [12] 5348 	mov	r5,#0x00
      001738                       5349 00138$:
      001738 AA*1A            [24] 5350 	mov	r2,_dataType
      00173A 7B 00            [12] 5351 	mov	r3,#0x00
      00173C C3               [12] 5352 	clr	c
      00173D EC               [12] 5353 	mov	a,r4
      00173E 9A               [12] 5354 	subb	a,r2
      00173F ED               [12] 5355 	mov	a,r5
      001740 64 80            [12] 5356 	xrl	a,#0x80
      001742 8B F0            [24] 5357 	mov	b,r3
      001744 63 F0 80         [24] 5358 	xrl	b,#0x80
      001747 95 F0            [12] 5359 	subb	a,b
      001749 50 2B            [24] 5360 	jnc	00101$
                                   5361 ;	ECEN4330Lab7.c:1617: HEXtoASCII_8write(RAMread(currAddr0));
      00174B 85*29 82         [24] 5362 	mov	dpl,_currAddr0
      00174E 85*2A 83         [24] 5363 	mov	dph,(_currAddr0 + 1)
      001751 C0 07            [24] 5364 	push	ar7
      001753 C0 06            [24] 5365 	push	ar6
      001755 C0 05            [24] 5366 	push	ar5
      001757 C0 04            [24] 5367 	push	ar4
      001759 12r0Dr40         [24] 5368 	lcall	_RAMread
      00175C 12r0Cr2F         [24] 5369 	lcall	_HEXtoASCII_8write
      00175F D0 04            [24] 5370 	pop	ar4
      001761 D0 05            [24] 5371 	pop	ar5
      001763 D0 06            [24] 5372 	pop	ar6
      001765 D0 07            [24] 5373 	pop	ar7
                                   5374 ;	ECEN4330Lab7.c:1618: currAddr0++;
      001767 05*29            [12] 5375 	inc	_currAddr0
      001769 E4               [12] 5376 	clr	a
      00176A B5*29 02         [24] 5377 	cjne	a,_currAddr0,00260$
      00176D 05*2A            [12] 5378 	inc	(_currAddr0 + 1)
      00176F                       5379 00260$:
                                   5380 ;	ECEN4330Lab7.c:1616: for(j = 0; j < dataType; j++){
      00176F 0C               [12] 5381 	inc	r4
      001770 BC 00 C5         [24] 5382 	cjne	r4,#0x00,00138$
      001773 0D               [12] 5383 	inc	r5
      001774 80 C2            [24] 5384 	sjmp	00138$
      001776                       5385 00101$:
                                   5386 ;	ECEN4330Lab7.c:1620: LCD_string_write("\n");
      001776 90r07rF2         [24] 5387 	mov	dptr,#___str_33
      001779 75 F0 80         [24] 5388 	mov	b,#0x80
      00177C C0 07            [24] 5389 	push	ar7
      00177E C0 06            [24] 5390 	push	ar6
      001780 12r09rC5         [24] 5391 	lcall	_LCD_string_write
      001783 D0 06            [24] 5392 	pop	ar6
      001785 D0 07            [24] 5393 	pop	ar7
                                   5394 ;	ECEN4330Lab7.c:1621: dataSize--;
      001787 15*1B            [12] 5395 	dec	_dataSize
      001789 74 FF            [12] 5396 	mov	a,#0xff
      00178B B5*1B 02         [24] 5397 	cjne	a,_dataSize,00262$
      00178E 15*1C            [12] 5398 	dec	(_dataSize + 1)
      001790                       5399 00262$:
                                   5400 ;	ECEN4330Lab7.c:1613: for(i = 0; i < 10; i++){
      001790 0E               [12] 5401 	inc	r6
      001791 BE 00 01         [24] 5402 	cjne	r6,#0x00,00263$
      001794 0F               [12] 5403 	inc	r7
      001795                       5404 00263$:
      001795 C3               [12] 5405 	clr	c
      001796 EE               [12] 5406 	mov	a,r6
      001797 94 0A            [12] 5407 	subb	a,#0x0a
      001799 EF               [12] 5408 	mov	a,r7
      00179A 64 80            [12] 5409 	xrl	a,#0x80
      00179C 94 80            [12] 5410 	subb	a,#0x80
      00179E 50 03            [24] 5411 	jnc	00264$
      0017A0 02r17r1A         [24] 5412 	ljmp	00140$
      0017A3                       5413 00264$:
                                   5414 ;	ECEN4330Lab7.c:1623: currAddr1++;        // Next page
      0017A3 05*2B            [12] 5415 	inc	_currAddr1
      0017A5 E4               [12] 5416 	clr	a
      0017A6 B5*2B 02         [24] 5417 	cjne	a,_currAddr1,00265$
      0017A9 05*2C            [12] 5418 	inc	(_currAddr1 + 1)
      0017AB                       5419 00265$:
      0017AB 02r19r13         [24] 5420 	ljmp	00120$
      0017AE                       5421 00119$:
                                   5422 ;	ECEN4330Lab7.c:1627: else if(dataSize > 0 && dataSize < 10){
      0017AE E5*1B            [12] 5423 	mov	a,_dataSize
      0017B0 45*1C            [12] 5424 	orl	a,(_dataSize + 1)
      0017B2 70 03            [24] 5425 	jnz	00266$
      0017B4 02r18r9D         [24] 5426 	ljmp	00115$
      0017B7                       5427 00266$:
      0017B7 C3               [12] 5428 	clr	c
      0017B8 E5*1B            [12] 5429 	mov	a,_dataSize
      0017BA 94 0A            [12] 5430 	subb	a,#0x0a
      0017BC E5*1C            [12] 5431 	mov	a,(_dataSize + 1)
      0017BE 94 00            [12] 5432 	subb	a,#0x00
      0017C0 40 03            [24] 5433 	jc	00267$
      0017C2 02r18r9D         [24] 5434 	ljmp	00115$
      0017C5                       5435 00267$:
                                   5436 ;	ECEN4330Lab7.c:1628: addr2 = dataSize;
      0017C5 85*1B*25         [24] 5437 	mov	_addr2,_dataSize
      0017C8 85*1C*26         [24] 5438 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5439 ;	ECEN4330Lab7.c:1630: while(dataSize > 0){
      0017CB                       5440 00104$:
      0017CB E5*1B            [12] 5441 	mov	a,_dataSize
      0017CD 45*1C            [12] 5442 	orl	a,(_dataSize + 1)
      0017CF 60 60            [24] 5443 	jz	00106$
                                   5444 ;	ECEN4330Lab7.c:1631: HEXtoASCII_16write(currAddr0);
      0017D1 85*29 82         [24] 5445 	mov	dpl,_currAddr0
      0017D4 85*2A 83         [24] 5446 	mov	dph,(_currAddr0 + 1)
      0017D7 12r0Cr6C         [24] 5447 	lcall	_HEXtoASCII_16write
                                   5448 ;	ECEN4330Lab7.c:1632: LCD_string_write(": 0x");
      0017DA 90r06r1A         [24] 5449 	mov	dptr,#___str_14
      0017DD 75 F0 80         [24] 5450 	mov	b,#0x80
      0017E0 12r09rC5         [24] 5451 	lcall	_LCD_string_write
                                   5452 ;	ECEN4330Lab7.c:1633: for(j = 0; j < dataType; j++){
      0017E3 7E 00            [12] 5453 	mov	r6,#0x00
      0017E5 7F 00            [12] 5454 	mov	r7,#0x00
      0017E7                       5455 00143$:
      0017E7 AC*1A            [24] 5456 	mov	r4,_dataType
      0017E9 7D 00            [12] 5457 	mov	r5,#0x00
      0017EB C3               [12] 5458 	clr	c
      0017EC EE               [12] 5459 	mov	a,r6
      0017ED 9C               [12] 5460 	subb	a,r4
      0017EE EF               [12] 5461 	mov	a,r7
      0017EF 64 80            [12] 5462 	xrl	a,#0x80
      0017F1 8D F0            [24] 5463 	mov	b,r5
      0017F3 63 F0 80         [24] 5464 	xrl	b,#0x80
      0017F6 95 F0            [12] 5465 	subb	a,b
      0017F8 50 23            [24] 5466 	jnc	00103$
                                   5467 ;	ECEN4330Lab7.c:1634: HEXtoASCII_8write(RAMread(currAddr0));
      0017FA 85*29 82         [24] 5468 	mov	dpl,_currAddr0
      0017FD 85*2A 83         [24] 5469 	mov	dph,(_currAddr0 + 1)
      001800 C0 07            [24] 5470 	push	ar7
      001802 C0 06            [24] 5471 	push	ar6
      001804 12r0Dr40         [24] 5472 	lcall	_RAMread
      001807 12r0Cr2F         [24] 5473 	lcall	_HEXtoASCII_8write
      00180A D0 06            [24] 5474 	pop	ar6
      00180C D0 07            [24] 5475 	pop	ar7
                                   5476 ;	ECEN4330Lab7.c:1635: currAddr0++;
      00180E 05*29            [12] 5477 	inc	_currAddr0
      001810 E4               [12] 5478 	clr	a
      001811 B5*29 02         [24] 5479 	cjne	a,_currAddr0,00270$
      001814 05*2A            [12] 5480 	inc	(_currAddr0 + 1)
      001816                       5481 00270$:
                                   5482 ;	ECEN4330Lab7.c:1633: for(j = 0; j < dataType; j++){
      001816 0E               [12] 5483 	inc	r6
      001817 BE 00 CD         [24] 5484 	cjne	r6,#0x00,00143$
      00181A 0F               [12] 5485 	inc	r7
      00181B 80 CA            [24] 5486 	sjmp	00143$
      00181D                       5487 00103$:
                                   5488 ;	ECEN4330Lab7.c:1637: LCD_string_write("\n");
      00181D 90r07rF2         [24] 5489 	mov	dptr,#___str_33
      001820 75 F0 80         [24] 5490 	mov	b,#0x80
      001823 12r09rC5         [24] 5491 	lcall	_LCD_string_write
                                   5492 ;	ECEN4330Lab7.c:1638: dataSize--;
      001826 15*1B            [12] 5493 	dec	_dataSize
      001828 74 FF            [12] 5494 	mov	a,#0xff
      00182A B5*1B 02         [24] 5495 	cjne	a,_dataSize,00272$
      00182D 15*1C            [12] 5496 	dec	(_dataSize + 1)
      00182F                       5497 00272$:
      00182F 80 9A            [24] 5498 	sjmp	00104$
      001831                       5499 00106$:
                                   5500 ;	ECEN4330Lab7.c:1640: if(addr3 > 0){
      001831 E5*27            [12] 5501 	mov	a,_addr3
      001833 45*28            [12] 5502 	orl	a,(_addr3 + 1)
      001835 60 5C            [24] 5503 	jz	00109$
                                   5504 ;	ECEN4330Lab7.c:1641: HEXtoASCII_16write(currAddr0);
      001837 85*29 82         [24] 5505 	mov	dpl,_currAddr0
      00183A 85*2A 83         [24] 5506 	mov	dph,(_currAddr0 + 1)
      00183D 12r0Cr6C         [24] 5507 	lcall	_HEXtoASCII_16write
                                   5508 ;	ECEN4330Lab7.c:1642: LCD_string_write(": 0x");
      001840 90r06r1A         [24] 5509 	mov	dptr,#___str_14
      001843 75 F0 80         [24] 5510 	mov	b,#0x80
      001846 12r09rC5         [24] 5511 	lcall	_LCD_string_write
                                   5512 ;	ECEN4330Lab7.c:1643: for(j = 0; j < addr3; j++){
      001849 7E 00            [12] 5513 	mov	r6,#0x00
      00184B 7F 00            [12] 5514 	mov	r7,#0x00
      00184D                       5515 00146$:
      00184D 8E 04            [24] 5516 	mov	ar4,r6
      00184F 8F 05            [24] 5517 	mov	ar5,r7
      001851 C3               [12] 5518 	clr	c
      001852 EC               [12] 5519 	mov	a,r4
      001853 95*27            [12] 5520 	subb	a,_addr3
      001855 ED               [12] 5521 	mov	a,r5
      001856 95*28            [12] 5522 	subb	a,(_addr3 + 1)
      001858 50 23            [24] 5523 	jnc	00107$
                                   5524 ;	ECEN4330Lab7.c:1644: HEXtoASCII_8write(RAMread(currAddr0));
      00185A 85*29 82         [24] 5525 	mov	dpl,_currAddr0
      00185D 85*2A 83         [24] 5526 	mov	dph,(_currAddr0 + 1)
      001860 C0 07            [24] 5527 	push	ar7
      001862 C0 06            [24] 5528 	push	ar6
      001864 12r0Dr40         [24] 5529 	lcall	_RAMread
      001867 12r0Cr2F         [24] 5530 	lcall	_HEXtoASCII_8write
      00186A D0 06            [24] 5531 	pop	ar6
      00186C D0 07            [24] 5532 	pop	ar7
                                   5533 ;	ECEN4330Lab7.c:1645: currAddr0++;
      00186E 05*29            [12] 5534 	inc	_currAddr0
      001870 E4               [12] 5535 	clr	a
      001871 B5*29 02         [24] 5536 	cjne	a,_currAddr0,00275$
      001874 05*2A            [12] 5537 	inc	(_currAddr0 + 1)
      001876                       5538 00275$:
                                   5539 ;	ECEN4330Lab7.c:1643: for(j = 0; j < addr3; j++){
      001876 0E               [12] 5540 	inc	r6
      001877 BE 00 D3         [24] 5541 	cjne	r6,#0x00,00146$
      00187A 0F               [12] 5542 	inc	r7
      00187B 80 D0            [24] 5543 	sjmp	00146$
      00187D                       5544 00107$:
                                   5545 ;	ECEN4330Lab7.c:1647: currAddr0 -= addr3;
      00187D E5*29            [12] 5546 	mov	a,_currAddr0
      00187F C3               [12] 5547 	clr	c
      001880 95*27            [12] 5548 	subb	a,_addr3
      001882 F5*29            [12] 5549 	mov	_currAddr0,a
      001884 E5*2A            [12] 5550 	mov	a,(_currAddr0 + 1)
      001886 95*28            [12] 5551 	subb	a,(_addr3 + 1)
      001888 F5*2A            [12] 5552 	mov	(_currAddr0 + 1),a
                                   5553 ;	ECEN4330Lab7.c:1648: LCD_string_write("\n");
      00188A 90r07rF2         [24] 5554 	mov	dptr,#___str_33
      00188D 75 F0 80         [24] 5555 	mov	b,#0x80
      001890 12r09rC5         [24] 5556 	lcall	_LCD_string_write
      001893                       5557 00109$:
                                   5558 ;	ECEN4330Lab7.c:1650: currAddr1++; 
      001893 05*2B            [12] 5559 	inc	_currAddr1
      001895 E4               [12] 5560 	clr	a
      001896 B5*2B 7A         [24] 5561 	cjne	a,_currAddr1,00120$
      001899 05*2C            [12] 5562 	inc	(_currAddr1 + 1)
      00189B 80 76            [24] 5563 	sjmp	00120$
      00189D                       5564 00115$:
                                   5565 ;	ECEN4330Lab7.c:1653: else if(dataSize == 0 && addr3 > 0){
      00189D E5*1B            [12] 5566 	mov	a,_dataSize
      00189F 45*1C            [12] 5567 	orl	a,(_dataSize + 1)
      0018A1 70 70            [24] 5568 	jnz	00120$
      0018A3 E5*27            [12] 5569 	mov	a,_addr3
      0018A5 45*28            [12] 5570 	orl	a,(_addr3 + 1)
      0018A7 60 6A            [24] 5571 	jz	00120$
                                   5572 ;	ECEN4330Lab7.c:1654: addr2 = dataSize;
      0018A9 85*1B*25         [24] 5573 	mov	_addr2,_dataSize
      0018AC 85*1C*26         [24] 5574 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5575 ;	ECEN4330Lab7.c:1655: HEXtoASCII_16write(currAddr0);
      0018AF 85*29 82         [24] 5576 	mov	dpl,_currAddr0
      0018B2 85*2A 83         [24] 5577 	mov	dph,(_currAddr0 + 1)
      0018B5 12r0Cr6C         [24] 5578 	lcall	_HEXtoASCII_16write
                                   5579 ;	ECEN4330Lab7.c:1656: LCD_string_write(": 0x");
      0018B8 90r06r1A         [24] 5580 	mov	dptr,#___str_14
      0018BB 75 F0 80         [24] 5581 	mov	b,#0x80
      0018BE 12r09rC5         [24] 5582 	lcall	_LCD_string_write
                                   5583 ;	ECEN4330Lab7.c:1657: for(j = 0; j < addr3; j++){
      0018C1 7E 00            [12] 5584 	mov	r6,#0x00
      0018C3 7F 00            [12] 5585 	mov	r7,#0x00
      0018C5                       5586 00149$:
      0018C5 8E 04            [24] 5587 	mov	ar4,r6
      0018C7 8F 05            [24] 5588 	mov	ar5,r7
      0018C9 C3               [12] 5589 	clr	c
      0018CA EC               [12] 5590 	mov	a,r4
      0018CB 95*27            [12] 5591 	subb	a,_addr3
      0018CD ED               [12] 5592 	mov	a,r5
      0018CE 95*28            [12] 5593 	subb	a,(_addr3 + 1)
      0018D0 50 23            [24] 5594 	jnc	00110$
                                   5595 ;	ECEN4330Lab7.c:1658: HEXtoASCII_8write(RAMread(currAddr0));
      0018D2 85*29 82         [24] 5596 	mov	dpl,_currAddr0
      0018D5 85*2A 83         [24] 5597 	mov	dph,(_currAddr0 + 1)
      0018D8 C0 07            [24] 5598 	push	ar7
      0018DA C0 06            [24] 5599 	push	ar6
      0018DC 12r0Dr40         [24] 5600 	lcall	_RAMread
      0018DF 12r0Cr2F         [24] 5601 	lcall	_HEXtoASCII_8write
      0018E2 D0 06            [24] 5602 	pop	ar6
      0018E4 D0 07            [24] 5603 	pop	ar7
                                   5604 ;	ECEN4330Lab7.c:1659: currAddr0++;
      0018E6 05*29            [12] 5605 	inc	_currAddr0
      0018E8 E4               [12] 5606 	clr	a
      0018E9 B5*29 02         [24] 5607 	cjne	a,_currAddr0,00281$
      0018EC 05*2A            [12] 5608 	inc	(_currAddr0 + 1)
      0018EE                       5609 00281$:
                                   5610 ;	ECEN4330Lab7.c:1657: for(j = 0; j < addr3; j++){
      0018EE 0E               [12] 5611 	inc	r6
      0018EF BE 00 D3         [24] 5612 	cjne	r6,#0x00,00149$
      0018F2 0F               [12] 5613 	inc	r7
      0018F3 80 D0            [24] 5614 	sjmp	00149$
      0018F5                       5615 00110$:
                                   5616 ;	ECEN4330Lab7.c:1661: LCD_string_write("\n");
      0018F5 90r07rF2         [24] 5617 	mov	dptr,#___str_33
      0018F8 75 F0 80         [24] 5618 	mov	b,#0x80
      0018FB 12r09rC5         [24] 5619 	lcall	_LCD_string_write
                                   5620 ;	ECEN4330Lab7.c:1662: currAddr1++; 
      0018FE 05*2B            [12] 5621 	inc	_currAddr1
      001900 E4               [12] 5622 	clr	a
      001901 B5*2B 02         [24] 5623 	cjne	a,_currAddr1,00283$
      001904 05*2C            [12] 5624 	inc	(_currAddr1 + 1)
      001906                       5625 00283$:
                                   5626 ;	ECEN4330Lab7.c:1663: currAddr0 -= addr3;
      001906 E5*29            [12] 5627 	mov	a,_currAddr0
      001908 C3               [12] 5628 	clr	c
      001909 95*27            [12] 5629 	subb	a,_addr3
      00190B F5*29            [12] 5630 	mov	_currAddr0,a
      00190D E5*2A            [12] 5631 	mov	a,(_currAddr0 + 1)
      00190F 95*28            [12] 5632 	subb	a,(_addr3 + 1)
      001911 F5*2A            [12] 5633 	mov	(_currAddr0 + 1),a
      001913                       5634 00120$:
                                   5635 ;	ECEN4330Lab7.c:1667: setCursor(0, 250);
      001913 75*00 FA         [24] 5636 	mov	_setCursor_PARM_2,#0xfa
      001916 75*01 00         [24] 5637 	mov	(_setCursor_PARM_2 + 1),#0x00
      001919 90 00 00         [24] 5638 	mov	dptr,#0x0000
      00191C 12r02rC9         [24] 5639 	lcall	_setCursor
                                   5640 ;	ECEN4330Lab7.c:1668: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      00191F 90r07rF4         [24] 5641 	mov	dptr,#___str_34
      001922 75 F0 80         [24] 5642 	mov	b,#0x80
      001925 12r09rC5         [24] 5643 	lcall	_LCD_string_write
                                   5644 ;	ECEN4330Lab7.c:1669: HEXtoASCII_16write(currAddr1);
      001928 85*2B 82         [24] 5645 	mov	dpl,_currAddr1
      00192B 85*2C 83         [24] 5646 	mov	dph,(_currAddr1 + 1)
      00192E 12r0Cr6C         [24] 5647 	lcall	_HEXtoASCII_16write
                                   5648 ;	ECEN4330Lab7.c:1670: key = keyDetect();
      001931 12r0Ar04         [24] 5649 	lcall	_keyDetect
      001934 85 82*16         [24] 5650 	mov	_key,dpl
                                   5651 ;	ECEN4330Lab7.c:1671: switch (key)
      001937 74 30            [12] 5652 	mov	a,#0x30
      001939 B5*16 02         [24] 5653 	cjne	a,_key,00284$
      00193C 80 12            [24] 5654 	sjmp	00121$
      00193E                       5655 00284$:
      00193E 74 31            [12] 5656 	mov	a,#0x31
      001940 B5*16 02         [24] 5657 	cjne	a,_key,00285$
      001943 80 65            [24] 5658 	sjmp	00125$
      001945                       5659 00285$:
      001945 74 45            [12] 5660 	mov	a,#0x45
      001947 B5*16 03         [24] 5661 	cjne	a,_key,00286$
      00194A 02r1Ar47         [24] 5662 	ljmp	00129$
      00194D                       5663 00286$:
      00194D 02r1Ar5E         [24] 5664 	ljmp	00130$
                                   5665 ;	ECEN4330Lab7.c:1675: case '0':
      001950                       5666 00121$:
                                   5667 ;	ECEN4330Lab7.c:1676: validInput = 1;
      001950 75*1D 01         [24] 5668 	mov	_validInput,#0x01
                                   5669 ;	ECEN4330Lab7.c:1679: if(dataSize > 0){
      001953 E5*1B            [12] 5670 	mov	a,_dataSize
      001955 45*1C            [12] 5671 	orl	a,(_dataSize + 1)
      001957 60 06            [24] 5672 	jz	00123$
                                   5673 ;	ECEN4330Lab7.c:1680: dataEnd = 0;
      001959 75*1E 00         [24] 5674 	mov	_dataEnd,#0x00
      00195C 02r1ArA2         [24] 5675 	ljmp	00135$
      00195F                       5676 00123$:
                                   5677 ;	ECEN4330Lab7.c:1686: dataEnd = 0;
      00195F 75*1E 00         [24] 5678 	mov	_dataEnd,#0x00
                                   5679 ;	ECEN4330Lab7.c:1687: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      001962 85*1A*00         [24] 5680 	mov	__mulint_PARM_2,_dataType
      001965 75*01 00         [24] 5681 	mov	(__mulint_PARM_2 + 1),#0x00
      001968 85*25 82         [24] 5682 	mov	dpl,_addr2
      00196B 85*26 83         [24] 5683 	mov	dph,(_addr2 + 1)
      00196E 12r00r00         [24] 5684 	lcall	__mulint
      001971 AE 82            [24] 5685 	mov	r6,dpl
      001973 AF 83            [24] 5686 	mov	r7,dph
      001975 E5*29            [12] 5687 	mov	a,_currAddr0
      001977 C3               [12] 5688 	clr	c
      001978 9E               [12] 5689 	subb	a,r6
      001979 F5*29            [12] 5690 	mov	_currAddr0,a
      00197B E5*2A            [12] 5691 	mov	a,(_currAddr0 + 1)
      00197D 9F               [12] 5692 	subb	a,r7
      00197E F5*2A            [12] 5693 	mov	(_currAddr0 + 1),a
                                   5694 ;	ECEN4330Lab7.c:1688: dataSize += addr2;  // restore data size of previous page
      001980 E5*25            [12] 5695 	mov	a,_addr2
      001982 25*1B            [12] 5696 	add	a,_dataSize
      001984 F5*1B            [12] 5697 	mov	_dataSize,a
      001986 E5*26            [12] 5698 	mov	a,(_addr2 + 1)
      001988 35*1C            [12] 5699 	addc	a,(_dataSize + 1)
      00198A F5*1C            [12] 5700 	mov	(_dataSize + 1),a
                                   5701 ;	ECEN4330Lab7.c:1689: currAddr1--;
      00198C 15*2B            [12] 5702 	dec	_currAddr1
      00198E 74 FF            [12] 5703 	mov	a,#0xff
      001990 B5*2B 02         [24] 5704 	cjne	a,_currAddr1,00288$
      001993 15*2C            [12] 5705 	dec	(_currAddr1 + 1)
      001995                       5706 00288$:
                                   5707 ;	ECEN4330Lab7.c:1690: resetLCD();
      001995 12r0Dr53         [24] 5708 	lcall	_resetLCD
                                   5709 ;	ECEN4330Lab7.c:1691: LCD_string_write("\nEnd of Data.");
      001998 90r08r25         [24] 5710 	mov	dptr,#___str_35
      00199B 75 F0 80         [24] 5711 	mov	b,#0x80
      00199E 12r09rC5         [24] 5712 	lcall	_LCD_string_write
                                   5713 ;	ECEN4330Lab7.c:1692: delay(200);
      0019A1 90 00 C8         [24] 5714 	mov	dptr,#0x00c8
      0019A4 12r00r25         [24] 5715 	lcall	_delay
                                   5716 ;	ECEN4330Lab7.c:1694: break;
      0019A7 02r1ArA2         [24] 5717 	ljmp	00135$
                                   5718 ;	ECEN4330Lab7.c:1697: case '1':
      0019AA                       5719 00125$:
                                   5720 ;	ECEN4330Lab7.c:1700: if(currAddr1 > 1){
      0019AA C3               [12] 5721 	clr	c
      0019AB 74 01            [12] 5722 	mov	a,#0x01
      0019AD 95*2B            [12] 5723 	subb	a,_currAddr1
      0019AF E4               [12] 5724 	clr	a
      0019B0 95*2C            [12] 5725 	subb	a,(_currAddr1 + 1)
      0019B2 50 49            [24] 5726 	jnc	00127$
                                   5727 ;	ECEN4330Lab7.c:1701: dataEnd = 0;
      0019B4 75*1E 00         [24] 5728 	mov	_dataEnd,#0x00
                                   5729 ;	ECEN4330Lab7.c:1702: currAddr0 -= ((addr2 + 10) * dataType);
      0019B7 74 0A            [12] 5730 	mov	a,#0x0a
      0019B9 25*25            [12] 5731 	add	a,_addr2
      0019BB FE               [12] 5732 	mov	r6,a
      0019BC E4               [12] 5733 	clr	a
      0019BD 35*26            [12] 5734 	addc	a,(_addr2 + 1)
      0019BF FF               [12] 5735 	mov	r7,a
      0019C0 85*1A*00         [24] 5736 	mov	__mulint_PARM_2,_dataType
      0019C3 75*01 00         [24] 5737 	mov	(__mulint_PARM_2 + 1),#0x00
      0019C6 8E 82            [24] 5738 	mov	dpl,r6
      0019C8 8F 83            [24] 5739 	mov	dph,r7
      0019CA C0 07            [24] 5740 	push	ar7
      0019CC C0 06            [24] 5741 	push	ar6
      0019CE 12r00r00         [24] 5742 	lcall	__mulint
      0019D1 AC 82            [24] 5743 	mov	r4,dpl
      0019D3 AD 83            [24] 5744 	mov	r5,dph
      0019D5 D0 06            [24] 5745 	pop	ar6
      0019D7 D0 07            [24] 5746 	pop	ar7
      0019D9 E5*29            [12] 5747 	mov	a,_currAddr0
      0019DB C3               [12] 5748 	clr	c
      0019DC 9C               [12] 5749 	subb	a,r4
      0019DD F5*29            [12] 5750 	mov	_currAddr0,a
      0019DF E5*2A            [12] 5751 	mov	a,(_currAddr0 + 1)
      0019E1 9D               [12] 5752 	subb	a,r5
      0019E2 F5*2A            [12] 5753 	mov	(_currAddr0 + 1),a
                                   5754 ;	ECEN4330Lab7.c:1703: currAddr1 -= 2;
      0019E4 E5*2B            [12] 5755 	mov	a,_currAddr1
      0019E6 24 FE            [12] 5756 	add	a,#0xfe
      0019E8 F5*2B            [12] 5757 	mov	_currAddr1,a
      0019EA E5*2C            [12] 5758 	mov	a,(_currAddr1 + 1)
      0019EC 34 FF            [12] 5759 	addc	a,#0xff
      0019EE F5*2C            [12] 5760 	mov	(_currAddr1 + 1),a
                                   5761 ;	ECEN4330Lab7.c:1704: dataSize += (addr2 + 10);
      0019F0 EE               [12] 5762 	mov	a,r6
      0019F1 25*1B            [12] 5763 	add	a,_dataSize
      0019F3 F5*1B            [12] 5764 	mov	_dataSize,a
      0019F5 EF               [12] 5765 	mov	a,r7
      0019F6 35*1C            [12] 5766 	addc	a,(_dataSize + 1)
      0019F8 F5*1C            [12] 5767 	mov	(_dataSize + 1),a
      0019FA 02r1ArA2         [24] 5768 	ljmp	00135$
      0019FD                       5769 00127$:
                                   5770 ;	ECEN4330Lab7.c:1709: dataEnd = 0;
      0019FD 75*1E 00         [24] 5771 	mov	_dataEnd,#0x00
                                   5772 ;	ECEN4330Lab7.c:1710: resetLCD();
      001A00 12r0Dr53         [24] 5773 	lcall	_resetLCD
                                   5774 ;	ECEN4330Lab7.c:1711: LCD_string_write("End of Data");
      001A03 90r08r33         [24] 5775 	mov	dptr,#___str_36
      001A06 75 F0 80         [24] 5776 	mov	b,#0x80
      001A09 12r09rC5         [24] 5777 	lcall	_LCD_string_write
                                   5778 ;	ECEN4330Lab7.c:1712: delay(200);
      001A0C 90 00 C8         [24] 5779 	mov	dptr,#0x00c8
      001A0F 12r00r25         [24] 5780 	lcall	_delay
                                   5781 ;	ECEN4330Lab7.c:1713: currAddr0 -= (addr2 * dataType);
      001A12 85*1A*00         [24] 5782 	mov	__mulint_PARM_2,_dataType
      001A15 75*01 00         [24] 5783 	mov	(__mulint_PARM_2 + 1),#0x00
      001A18 85*25 82         [24] 5784 	mov	dpl,_addr2
      001A1B 85*26 83         [24] 5785 	mov	dph,(_addr2 + 1)
      001A1E 12r00r00         [24] 5786 	lcall	__mulint
      001A21 AE 82            [24] 5787 	mov	r6,dpl
      001A23 AF 83            [24] 5788 	mov	r7,dph
      001A25 E5*29            [12] 5789 	mov	a,_currAddr0
      001A27 C3               [12] 5790 	clr	c
      001A28 9E               [12] 5791 	subb	a,r6
      001A29 F5*29            [12] 5792 	mov	_currAddr0,a
      001A2B E5*2A            [12] 5793 	mov	a,(_currAddr0 + 1)
      001A2D 9F               [12] 5794 	subb	a,r7
      001A2E F5*2A            [12] 5795 	mov	(_currAddr0 + 1),a
                                   5796 ;	ECEN4330Lab7.c:1714: currAddr1--;
      001A30 15*2B            [12] 5797 	dec	_currAddr1
      001A32 74 FF            [12] 5798 	mov	a,#0xff
      001A34 B5*2B 02         [24] 5799 	cjne	a,_currAddr1,00290$
      001A37 15*2C            [12] 5800 	dec	(_currAddr1 + 1)
      001A39                       5801 00290$:
                                   5802 ;	ECEN4330Lab7.c:1715: dataSize += addr2;
      001A39 E5*25            [12] 5803 	mov	a,_addr2
      001A3B 25*1B            [12] 5804 	add	a,_dataSize
      001A3D F5*1B            [12] 5805 	mov	_dataSize,a
      001A3F E5*26            [12] 5806 	mov	a,(_addr2 + 1)
      001A41 35*1C            [12] 5807 	addc	a,(_dataSize + 1)
      001A43 F5*1C            [12] 5808 	mov	(_dataSize + 1),a
                                   5809 ;	ECEN4330Lab7.c:1717: break;
                                   5810 ;	ECEN4330Lab7.c:1720: case 'E':
      001A45 80 5B            [24] 5811 	sjmp	00135$
      001A47                       5812 00129$:
                                   5813 ;	ECEN4330Lab7.c:1721: resetLCD();
      001A47 12r0Dr53         [24] 5814 	lcall	_resetLCD
                                   5815 ;	ECEN4330Lab7.c:1722: LCD_string_write("\nReturning to\nMain Menu.");
      001A4A 90r08r3F         [24] 5816 	mov	dptr,#___str_37
      001A4D 75 F0 80         [24] 5817 	mov	b,#0x80
      001A50 12r09rC5         [24] 5818 	lcall	_LCD_string_write
                                   5819 ;	ECEN4330Lab7.c:1723: delay(200);
      001A53 90 00 C8         [24] 5820 	mov	dptr,#0x00c8
      001A56 12r00r25         [24] 5821 	lcall	_delay
                                   5822 ;	ECEN4330Lab7.c:1724: dataEnd = 1;
      001A59 75*1E 01         [24] 5823 	mov	_dataEnd,#0x01
                                   5824 ;	ECEN4330Lab7.c:1725: break;
                                   5825 ;	ECEN4330Lab7.c:1728: default:
      001A5C 80 44            [24] 5826 	sjmp	00135$
      001A5E                       5827 00130$:
                                   5828 ;	ECEN4330Lab7.c:1729: dataEnd = 0;
      001A5E 75*1E 00         [24] 5829 	mov	_dataEnd,#0x00
                                   5830 ;	ECEN4330Lab7.c:1730: invalidInput();
      001A61 12r0Dr7B         [24] 5831 	lcall	_invalidInput
                                   5832 ;	ECEN4330Lab7.c:1731: if(addr2 > 0 ){
      001A64 E5*25            [12] 5833 	mov	a,_addr2
      001A66 45*26            [12] 5834 	orl	a,(_addr2 + 1)
      001A68 60 38            [24] 5835 	jz	00135$
                                   5836 ;	ECEN4330Lab7.c:1732: currAddr0 -= (addr2 * dataType);
      001A6A 85*1A*00         [24] 5837 	mov	__mulint_PARM_2,_dataType
      001A6D 75*01 00         [24] 5838 	mov	(__mulint_PARM_2 + 1),#0x00
      001A70 85*25 82         [24] 5839 	mov	dpl,_addr2
      001A73 85*26 83         [24] 5840 	mov	dph,(_addr2 + 1)
      001A76 12r00r00         [24] 5841 	lcall	__mulint
      001A79 AE 82            [24] 5842 	mov	r6,dpl
      001A7B AF 83            [24] 5843 	mov	r7,dph
      001A7D E5*29            [12] 5844 	mov	a,_currAddr0
      001A7F C3               [12] 5845 	clr	c
      001A80 9E               [12] 5846 	subb	a,r6
      001A81 F5*29            [12] 5847 	mov	_currAddr0,a
      001A83 E5*2A            [12] 5848 	mov	a,(_currAddr0 + 1)
      001A85 9F               [12] 5849 	subb	a,r7
      001A86 F5*2A            [12] 5850 	mov	(_currAddr0 + 1),a
                                   5851 ;	ECEN4330Lab7.c:1733: currAddr1 --;
      001A88 15*2B            [12] 5852 	dec	_currAddr1
      001A8A 74 FF            [12] 5853 	mov	a,#0xff
      001A8C B5*2B 02         [24] 5854 	cjne	a,_currAddr1,00292$
      001A8F 15*2C            [12] 5855 	dec	(_currAddr1 + 1)
      001A91                       5856 00292$:
                                   5857 ;	ECEN4330Lab7.c:1734: dataSize += addr2;
      001A91 E5*25            [12] 5858 	mov	a,_addr2
      001A93 25*1B            [12] 5859 	add	a,_dataSize
      001A95 F5*1B            [12] 5860 	mov	_dataSize,a
      001A97 E5*26            [12] 5861 	mov	a,(_addr2 + 1)
      001A99 35*1C            [12] 5862 	addc	a,(_dataSize + 1)
      001A9B F5*1C            [12] 5863 	mov	(_dataSize + 1),a
                                   5864 ;	ECEN4330Lab7.c:1735: addr2 = 0;
      001A9D E4               [12] 5865 	clr	a
      001A9E F5*25            [12] 5866 	mov	_addr2,a
      001AA0 F5*26            [12] 5867 	mov	(_addr2 + 1),a
                                   5868 ;	ECEN4330Lab7.c:1738: }
      001AA2                       5869 00135$:
                                   5870 ;	ECEN4330Lab7.c:1739: } while(dataEnd == 0);
      001AA2 E5*1E            [12] 5871 	mov	a,_dataEnd
      001AA4 70 03            [24] 5872 	jnz	00293$
      001AA6 02r16rF0         [24] 5873 	ljmp	00134$
      001AA9                       5874 00293$:
                                   5875 ;	ECEN4330Lab7.c:1740: }
      001AA9 22               [24] 5876 	ret
                                   5877 ;------------------------------------------------------------
                                   5878 ;Allocation info for local variables in function 'DUMP'
                                   5879 ;------------------------------------------------------------
                                   5880 ;	ECEN4330Lab7.c:1748: void DUMP(){
                                   5881 ;	-----------------------------------------
                                   5882 ;	 function DUMP
                                   5883 ;	-----------------------------------------
      001AAA                       5884 _DUMP:
                                   5885 ;	ECEN4330Lab7.c:1749: endAddrCalc = 0;
      001AAA E4               [12] 5886 	clr	a
      001AAB F5*34            [12] 5887 	mov	_endAddrCalc,a
      001AAD F5*35            [12] 5888 	mov	(_endAddrCalc + 1),a
      001AAF F5*36            [12] 5889 	mov	(_endAddrCalc + 2),a
      001AB1 F5*37            [12] 5890 	mov	(_endAddrCalc + 3),a
                                   5891 ;	ECEN4330Lab7.c:1750: addr0 = 0;                      // Source Address
      001AB3 F5*21            [12] 5892 	mov	_addr0,a
      001AB5 F5*22            [12] 5893 	mov	(_addr0 + 1),a
                                   5894 ;	ECEN4330Lab7.c:1751: addr1 = 0;                      // Source End Address
      001AB7 F5*23            [12] 5895 	mov	_addr1,a
      001AB9 F5*24            [12] 5896 	mov	(_addr1 + 1),a
                                   5897 ;	ECEN4330Lab7.c:1752: dataType = 0;                   // Data Type
                                   5898 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001ABB F5*1A            [12] 5899 	mov	_dataType,a
                                   5900 ;	ECEN4330Lab7.c:1753: dataSize = 0;                   // Data Size
      001ABD F5*1B            [12] 5901 	mov	_dataSize,a
      001ABF F5*1C            [12] 5902 	mov	(_dataSize + 1),a
                                   5903 ;	ECEN4330Lab7.c:1754: addr3 = 0;						// Remainder
      001AC1 F5*27            [12] 5904 	mov	_addr3,a
      001AC3 F5*28            [12] 5905 	mov	(_addr3 + 1),a
                                   5906 ;	ECEN4330Lab7.c:1757: resetLCD();
      001AC5 12r0Dr53         [24] 5907 	lcall	_resetLCD
                                   5908 ;	ECEN4330Lab7.c:1758: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001AC8 90r08r58         [24] 5909 	mov	dptr,#___str_38
      001ACB 75 F0 80         [24] 5910 	mov	b,#0x80
      001ACE 12r09rC5         [24] 5911 	lcall	_LCD_string_write
                                   5912 ;	ECEN4330Lab7.c:1759: cursor_x -= 4 * textsize * 6;
      001AD1 E5*0C            [12] 5913 	mov	a,_textsize
      001AD3 75 F0 18         [24] 5914 	mov	b,#0x18
      001AD6 A4               [48] 5915 	mul	ab
      001AD7 FE               [12] 5916 	mov	r6,a
      001AD8 AF F0            [24] 5917 	mov	r7,b
      001ADA E5*08            [12] 5918 	mov	a,_cursor_x
      001ADC C3               [12] 5919 	clr	c
      001ADD 9E               [12] 5920 	subb	a,r6
      001ADE F5*08            [12] 5921 	mov	_cursor_x,a
      001AE0 E5*09            [12] 5922 	mov	a,(_cursor_x + 1)
      001AE2 9F               [12] 5923 	subb	a,r7
      001AE3 F5*09            [12] 5924 	mov	(_cursor_x + 1),a
                                   5925 ;	ECEN4330Lab7.c:1760: inputRead16();                  // Read input
      001AE5 12r0DrA4         [24] 5926 	lcall	_inputRead16
                                   5927 ;	ECEN4330Lab7.c:1761: addr0 = input16;                // Set starting address
      001AE8 85*17*21         [24] 5928 	mov	_addr0,_input16
      001AEB 85*18*22         [24] 5929 	mov	(_addr0 + 1),(_input16 + 1)
                                   5930 ;	ECEN4330Lab7.c:1764: inputDataType();                // Prompt & read input
      001AEE 12r0ErB3         [24] 5931 	lcall	_inputDataType
                                   5932 ;	ECEN4330Lab7.c:1767: resetLCD();
      001AF1 12r0Dr53         [24] 5933 	lcall	_resetLCD
                                   5934 ;	ECEN4330Lab7.c:1768: inputDataSize();                // Prompt & read input
      001AF4 12r0Fr70         [24] 5935 	lcall	_inputDataSize
                                   5936 ;	ECEN4330Lab7.c:1771: endAddrCalc = addr0 + (dataType * dataSize);
      001AF7 AE*1A            [24] 5937 	mov	r6,_dataType
      001AF9 7F 00            [12] 5938 	mov	r7,#0x00
      001AFB 85*1B*00         [24] 5939 	mov	__mulint_PARM_2,_dataSize
      001AFE 85*1C*01         [24] 5940 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001B01 8E 82            [24] 5941 	mov	dpl,r6
      001B03 8F 83            [24] 5942 	mov	dph,r7
      001B05 C0 07            [24] 5943 	push	ar7
      001B07 C0 06            [24] 5944 	push	ar6
      001B09 12r00r00         [24] 5945 	lcall	__mulint
      001B0C AC 82            [24] 5946 	mov	r4,dpl
      001B0E AD 83            [24] 5947 	mov	r5,dph
      001B10 D0 06            [24] 5948 	pop	ar6
      001B12 D0 07            [24] 5949 	pop	ar7
      001B14 EC               [12] 5950 	mov	a,r4
      001B15 25*21            [12] 5951 	add	a,_addr0
      001B17 FA               [12] 5952 	mov	r2,a
      001B18 ED               [12] 5953 	mov	a,r5
      001B19 35*22            [12] 5954 	addc	a,(_addr0 + 1)
      001B1B FB               [12] 5955 	mov	r3,a
      001B1C 8A*34            [24] 5956 	mov	_endAddrCalc,r2
      001B1E 8B*35            [24] 5957 	mov	(_endAddrCalc + 1),r3
      001B20 75*36 00         [24] 5958 	mov	(_endAddrCalc + 2),#0x00
      001B23 75*37 00         [24] 5959 	mov	(_endAddrCalc + 3),#0x00
                                   5960 ;	ECEN4330Lab7.c:1772: if(endAddrCalc < addr0){ // RAM overflow
      001B26 A8*21            [24] 5961 	mov	r0,_addr0
      001B28 A9*22            [24] 5962 	mov	r1,(_addr0 + 1)
      001B2A 7A 00            [12] 5963 	mov	r2,#0x00
      001B2C 7B 00            [12] 5964 	mov	r3,#0x00
      001B2E C3               [12] 5965 	clr	c
      001B2F E5*34            [12] 5966 	mov	a,_endAddrCalc
      001B31 98               [12] 5967 	subb	a,r0
      001B32 E5*35            [12] 5968 	mov	a,(_endAddrCalc + 1)
      001B34 99               [12] 5969 	subb	a,r1
      001B35 E5*36            [12] 5970 	mov	a,(_endAddrCalc + 2)
      001B37 9A               [12] 5971 	subb	a,r2
      001B38 E5*37            [12] 5972 	mov	a,(_endAddrCalc + 3)
      001B3A 9B               [12] 5973 	subb	a,r3
      001B3B 50 08            [24] 5974 	jnc	00102$
                                   5975 ;	ECEN4330Lab7.c:1773: addr1 = 0xFFFF;             // Set end address
      001B3D 75*23 FF         [24] 5976 	mov	_addr1,#0xff
      001B40 75*24 FF         [24] 5977 	mov	(_addr1 + 1),#0xff
      001B43 80 12            [24] 5978 	sjmp	00103$
      001B45                       5979 00102$:
                                   5980 ;	ECEN4330Lab7.c:1776: addr1 = addr0 + (dataType * dataSize) - 1;
      001B45 EC               [12] 5981 	mov	a,r4
      001B46 25*21            [12] 5982 	add	a,_addr0
      001B48 FC               [12] 5983 	mov	r4,a
      001B49 ED               [12] 5984 	mov	a,r5
      001B4A 35*22            [12] 5985 	addc	a,(_addr0 + 1)
      001B4C FD               [12] 5986 	mov	r5,a
      001B4D EC               [12] 5987 	mov	a,r4
      001B4E 24 FF            [12] 5988 	add	a,#0xff
      001B50 F5*23            [12] 5989 	mov	_addr1,a
      001B52 ED               [12] 5990 	mov	a,r5
      001B53 34 FF            [12] 5991 	addc	a,#0xff
      001B55 F5*24            [12] 5992 	mov	(_addr1 + 1),a
      001B57                       5993 00103$:
                                   5994 ;	ECEN4330Lab7.c:1778: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001B57 E5*23            [12] 5995 	mov	a,_addr1
      001B59 C3               [12] 5996 	clr	c
      001B5A 95*21            [12] 5997 	subb	a,_addr0
      001B5C FC               [12] 5998 	mov	r4,a
      001B5D E5*24            [12] 5999 	mov	a,(_addr1 + 1)
      001B5F 95*22            [12] 6000 	subb	a,(_addr0 + 1)
      001B61 FD               [12] 6001 	mov	r5,a
      001B62 0C               [12] 6002 	inc	r4
      001B63 BC 00 01         [24] 6003 	cjne	r4,#0x00,00111$
      001B66 0D               [12] 6004 	inc	r5
      001B67                       6005 00111$:
      001B67 8E*00            [24] 6006 	mov	__divuint_PARM_2,r6
      001B69 8F*01            [24] 6007 	mov	(__divuint_PARM_2 + 1),r7
      001B6B 8C 82            [24] 6008 	mov	dpl,r4
      001B6D 8D 83            [24] 6009 	mov	dph,r5
      001B6F C0 07            [24] 6010 	push	ar7
      001B71 C0 06            [24] 6011 	push	ar6
      001B73 C0 05            [24] 6012 	push	ar5
      001B75 C0 04            [24] 6013 	push	ar4
      001B77 12r00r00         [24] 6014 	lcall	__divuint
      001B7A 85 82*1B         [24] 6015 	mov	_dataSize,dpl
      001B7D 85 83*1C         [24] 6016 	mov	(_dataSize + 1),dph
      001B80 D0 04            [24] 6017 	pop	ar4
      001B82 D0 05            [24] 6018 	pop	ar5
      001B84 D0 06            [24] 6019 	pop	ar6
      001B86 D0 07            [24] 6020 	pop	ar7
                                   6021 ;	ECEN4330Lab7.c:1779: addr3 = ((addr1 - addr0) + 1) % dataType;
      001B88 8E*00            [24] 6022 	mov	__moduint_PARM_2,r6
      001B8A 8F*01            [24] 6023 	mov	(__moduint_PARM_2 + 1),r7
      001B8C 8C 82            [24] 6024 	mov	dpl,r4
      001B8E 8D 83            [24] 6025 	mov	dph,r5
      001B90 12r00r00         [24] 6026 	lcall	__moduint
      001B93 85 82*27         [24] 6027 	mov	_addr3,dpl
      001B96 85 83*28         [24] 6028 	mov	(_addr3 + 1),dph
                                   6029 ;	ECEN4330Lab7.c:1798: DUMP_display();                 // Display dump data
                                   6030 ;	ECEN4330Lab7.c:1799: }
      001B99 02r16rDF         [24] 6031 	ljmp	_DUMP_display
                                   6032 ;------------------------------------------------------------
                                   6033 ;Allocation info for local variables in function 'EDIT_display'
                                   6034 ;------------------------------------------------------------
                                   6035 ;addr                      Allocated to registers r6 r7 
                                   6036 ;------------------------------------------------------------
                                   6037 ;	ECEN4330Lab7.c:1809: void EDIT_display(unsigned int addr){
                                   6038 ;	-----------------------------------------
                                   6039 ;	 function EDIT_display
                                   6040 ;	-----------------------------------------
      001B9C                       6041 _EDIT_display:
                                   6042 ;	ECEN4330Lab7.c:1812: data = RAMread(addr);
      001B9C AE 82            [24] 6043 	mov	r6,dpl
      001B9E AF 83            [24] 6044 	mov  r7,dph
      001BA0 C0 07            [24] 6045 	push	ar7
      001BA2 C0 06            [24] 6046 	push	ar6
      001BA4 12r0Dr40         [24] 6047 	lcall	_RAMread
      001BA7 85 82*20         [24] 6048 	mov	_data,dpl
                                   6049 ;	ECEN4330Lab7.c:1815: resetLCD();
      001BAA 12r0Dr53         [24] 6050 	lcall	_resetLCD
                                   6051 ;	ECEN4330Lab7.c:1816: LCD_string_write("\n");
      001BAD 90r07rF2         [24] 6052 	mov	dptr,#___str_33
      001BB0 75 F0 80         [24] 6053 	mov	b,#0x80
      001BB3 12r09rC5         [24] 6054 	lcall	_LCD_string_write
      001BB6 D0 06            [24] 6055 	pop	ar6
      001BB8 D0 07            [24] 6056 	pop	ar7
                                   6057 ;	ECEN4330Lab7.c:1817: HEXtoASCII_16write(addr);
      001BBA 8E 82            [24] 6058 	mov	dpl,r6
      001BBC 8F 83            [24] 6059 	mov	dph,r7
      001BBE C0 07            [24] 6060 	push	ar7
      001BC0 C0 06            [24] 6061 	push	ar6
      001BC2 12r0Cr6C         [24] 6062 	lcall	_HEXtoASCII_16write
                                   6063 ;	ECEN4330Lab7.c:1818: LCD_string_write(": 0x");
      001BC5 90r06r1A         [24] 6064 	mov	dptr,#___str_14
      001BC8 75 F0 80         [24] 6065 	mov	b,#0x80
      001BCB 12r09rC5         [24] 6066 	lcall	_LCD_string_write
                                   6067 ;	ECEN4330Lab7.c:1819: HEXtoASCII_8write(data);
      001BCE 85*20 82         [24] 6068 	mov	dpl,_data
      001BD1 12r0Cr2F         [24] 6069 	lcall	_HEXtoASCII_8write
                                   6070 ;	ECEN4330Lab7.c:1822: LCD_string_write("\n\nNew value:\n  0x__");
      001BD4 90r08r86         [24] 6071 	mov	dptr,#___str_39
      001BD7 75 F0 80         [24] 6072 	mov	b,#0x80
      001BDA 12r09rC5         [24] 6073 	lcall	_LCD_string_write
                                   6074 ;	ECEN4330Lab7.c:1823: cursor_x -= 2 * textsize * 6;
      001BDD E5*0C            [12] 6075 	mov	a,_textsize
      001BDF 75 F0 0C         [24] 6076 	mov	b,#0x0c
      001BE2 A4               [48] 6077 	mul	ab
      001BE3 FC               [12] 6078 	mov	r4,a
      001BE4 AD F0            [24] 6079 	mov	r5,b
      001BE6 E5*08            [12] 6080 	mov	a,_cursor_x
      001BE8 C3               [12] 6081 	clr	c
      001BE9 9C               [12] 6082 	subb	a,r4
      001BEA F5*08            [12] 6083 	mov	_cursor_x,a
      001BEC E5*09            [12] 6084 	mov	a,(_cursor_x + 1)
      001BEE 9D               [12] 6085 	subb	a,r5
      001BEF F5*09            [12] 6086 	mov	(_cursor_x + 1),a
                                   6087 ;	ECEN4330Lab7.c:1824: inputRead8();
      001BF1 12r0Er5F         [24] 6088 	lcall	_inputRead8
      001BF4 D0 06            [24] 6089 	pop	ar6
      001BF6 D0 07            [24] 6090 	pop	ar7
                                   6091 ;	ECEN4330Lab7.c:1825: RAMwrite(addr, input8);
      001BF8 85*19*00         [24] 6092 	mov	_RAMwrite_PARM_2,_input8
      001BFB 8E 82            [24] 6093 	mov	dpl,r6
      001BFD 8F 83            [24] 6094 	mov	dph,r7
      001BFF 12r0Dr11         [24] 6095 	lcall	_RAMwrite
                                   6096 ;	ECEN4330Lab7.c:1828: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001C02 90r08r9A         [24] 6097 	mov	dptr,#___str_40
      001C05 75 F0 80         [24] 6098 	mov	b,#0x80
      001C08 12r09rC5         [24] 6099 	lcall	_LCD_string_write
                                   6100 ;	ECEN4330Lab7.c:1829: LCD_string_write("(E) End");
      001C0B 90r08rBB         [24] 6101 	mov	dptr,#___str_41
      001C0E 75 F0 80         [24] 6102 	mov	b,#0x80
                                   6103 ;	ECEN4330Lab7.c:1830: }
      001C11 02r09rC5         [24] 6104 	ljmp	_LCD_string_write
                                   6105 ;------------------------------------------------------------
                                   6106 ;Allocation info for local variables in function 'EDIT'
                                   6107 ;------------------------------------------------------------
                                   6108 ;	ECEN4330Lab7.c:1843: void EDIT(){
                                   6109 ;	-----------------------------------------
                                   6110 ;	 function EDIT
                                   6111 ;	-----------------------------------------
      001C14                       6112 _EDIT:
                                   6113 ;	ECEN4330Lab7.c:1844: dataEnd = 0;
      001C14 75*1E 00         [24] 6114 	mov	_dataEnd,#0x00
                                   6115 ;	ECEN4330Lab7.c:1845: scrollEnd = 0;
      001C17 75*1F 00         [24] 6116 	mov	_scrollEnd,#0x00
                                   6117 ;	ECEN4330Lab7.c:1846: validInput = 0;
      001C1A 75*1D 00         [24] 6118 	mov	_validInput,#0x00
                                   6119 ;	ECEN4330Lab7.c:1849: resetLCD();
      001C1D 12r0Dr53         [24] 6120 	lcall	_resetLCD
                                   6121 ;	ECEN4330Lab7.c:1850: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001C20 90r07r72         [24] 6122 	mov	dptr,#___str_25
      001C23 75 F0 80         [24] 6123 	mov	b,#0x80
      001C26 12r09rC5         [24] 6124 	lcall	_LCD_string_write
                                   6125 ;	ECEN4330Lab7.c:1851: cursor_x -= 4 * textsize * 6;
      001C29 E5*0C            [12] 6126 	mov	a,_textsize
      001C2B 75 F0 18         [24] 6127 	mov	b,#0x18
      001C2E A4               [48] 6128 	mul	ab
      001C2F FE               [12] 6129 	mov	r6,a
      001C30 AF F0            [24] 6130 	mov	r7,b
      001C32 E5*08            [12] 6131 	mov	a,_cursor_x
      001C34 C3               [12] 6132 	clr	c
      001C35 9E               [12] 6133 	subb	a,r6
      001C36 F5*08            [12] 6134 	mov	_cursor_x,a
      001C38 E5*09            [12] 6135 	mov	a,(_cursor_x + 1)
      001C3A 9F               [12] 6136 	subb	a,r7
      001C3B F5*09            [12] 6137 	mov	(_cursor_x + 1),a
                                   6138 ;	ECEN4330Lab7.c:1854: inputRead16();
      001C3D 12r0DrA4         [24] 6139 	lcall	_inputRead16
                                   6140 ;	ECEN4330Lab7.c:1857: while(scrollEnd == 0 && dataEnd == 0){
      001C40                       6141 00112$:
      001C40 E5*1F            [12] 6142 	mov	a,_scrollEnd
      001C42 70 52            [24] 6143 	jnz	00114$
      001C44 E5*1E            [12] 6144 	mov	a,_dataEnd
      001C46 70 4E            [24] 6145 	jnz	00114$
                                   6146 ;	ECEN4330Lab7.c:1860: do
      001C48                       6147 00108$:
                                   6148 ;	ECEN4330Lab7.c:1862: EDIT_display(input16);
      001C48 85*17 82         [24] 6149 	mov	dpl,_input16
      001C4B 85*18 83         [24] 6150 	mov	dph,(_input16 + 1)
      001C4E 12r1Br9C         [24] 6151 	lcall	_EDIT_display
                                   6152 ;	ECEN4330Lab7.c:1863: key = keyDetect();
      001C51 12r0Ar04         [24] 6153 	lcall	_keyDetect
      001C54 85 82*16         [24] 6154 	mov	_key,dpl
                                   6155 ;	ECEN4330Lab7.c:1865: switch (key)
      001C57 74 31            [12] 6156 	mov	a,#0x31
      001C59 B5*16 02         [24] 6157 	cjne	a,_key,00153$
      001C5C 80 07            [24] 6158 	sjmp	00101$
      001C5E                       6159 00153$:
      001C5E 74 45            [12] 6160 	mov	a,#0x45
                                   6161 ;	ECEN4330Lab7.c:1869: case '1':
      001C60 B5*16 27         [24] 6162 	cjne	a,_key,00106$
      001C63 80 1D            [24] 6163 	sjmp	00105$
      001C65                       6164 00101$:
                                   6165 ;	ECEN4330Lab7.c:1870: validInput = 1;
      001C65 75*1D 01         [24] 6166 	mov	_validInput,#0x01
                                   6167 ;	ECEN4330Lab7.c:1873: if(input16 == 0xFFFF){
      001C68 74 FF            [12] 6168 	mov	a,#0xff
      001C6A B5*17 08         [24] 6169 	cjne	a,_input16,00103$
      001C6D B5*18 05         [24] 6170 	cjne	a,(_input16 + 1),00103$
                                   6171 ;	ECEN4330Lab7.c:1874: scrollEnd = 1;
      001C70 75*1F 01         [24] 6172 	mov	_scrollEnd,#0x01
      001C73 80 1B            [24] 6173 	sjmp	00109$
      001C75                       6174 00103$:
                                   6175 ;	ECEN4330Lab7.c:1879: input16++;
      001C75 05*17            [12] 6176 	inc	_input16
      001C77 E4               [12] 6177 	clr	a
      001C78 B5*17 02         [24] 6178 	cjne	a,_input16,00157$
      001C7B 05*18            [12] 6179 	inc	(_input16 + 1)
      001C7D                       6180 00157$:
                                   6181 ;	ECEN4330Lab7.c:1880: scrollEnd = 0;
      001C7D 75*1F 00         [24] 6182 	mov	_scrollEnd,#0x00
                                   6183 ;	ECEN4330Lab7.c:1882: break;
                                   6184 ;	ECEN4330Lab7.c:1885: case 'E':
      001C80 80 0E            [24] 6185 	sjmp	00109$
      001C82                       6186 00105$:
                                   6187 ;	ECEN4330Lab7.c:1886: validInput = 1;
      001C82 75*1D 01         [24] 6188 	mov	_validInput,#0x01
                                   6189 ;	ECEN4330Lab7.c:1887: dataEnd = 1;
      001C85 75*1E 01         [24] 6190 	mov	_dataEnd,#0x01
                                   6191 ;	ECEN4330Lab7.c:1888: break;
                                   6192 ;	ECEN4330Lab7.c:1891: default:
      001C88 80 06            [24] 6193 	sjmp	00109$
      001C8A                       6194 00106$:
                                   6195 ;	ECEN4330Lab7.c:1892: validInput = 0;
      001C8A 75*1D 00         [24] 6196 	mov	_validInput,#0x00
                                   6197 ;	ECEN4330Lab7.c:1893: invalidInput();
      001C8D 12r0Dr7B         [24] 6198 	lcall	_invalidInput
                                   6199 ;	ECEN4330Lab7.c:1895: }
      001C90                       6200 00109$:
                                   6201 ;	ECEN4330Lab7.c:1896: } while (validInput == 0);
      001C90 E5*1D            [12] 6202 	mov	a,_validInput
      001C92 60 B4            [24] 6203 	jz	00108$
      001C94 80 AA            [24] 6204 	sjmp	00112$
      001C96                       6205 00114$:
                                   6206 ;	ECEN4330Lab7.c:1900: resetLCD();
      001C96 12r0Dr53         [24] 6207 	lcall	_resetLCD
                                   6208 ;	ECEN4330Lab7.c:1901: if(scrollEnd == 1){
      001C99 74 01            [12] 6209 	mov	a,#0x01
      001C9B B5*1F 14         [24] 6210 	cjne	a,_scrollEnd,00116$
                                   6211 ;	ECEN4330Lab7.c:1902: setTextColor(RED, BLACK);
      001C9E E4               [12] 6212 	clr	a
      001C9F F5*00            [12] 6213 	mov	_setTextColor_PARM_2,a
      001CA1 F5*01            [12] 6214 	mov	(_setTextColor_PARM_2 + 1),a
      001CA3 90 F8 00         [24] 6215 	mov	dptr,#0xf800
      001CA6 12r02rD6         [24] 6216 	lcall	_setTextColor
                                   6217 ;	ECEN4330Lab7.c:1903: LCD_string_write("\nEnd of data.\n");
      001CA9 90r08rC3         [24] 6218 	mov	dptr,#___str_42
      001CAC 75 F0 80         [24] 6219 	mov	b,#0x80
      001CAF 12r09rC5         [24] 6220 	lcall	_LCD_string_write
      001CB2                       6221 00116$:
                                   6222 ;	ECEN4330Lab7.c:1907: setTextColor(WHITE, BLACK);
      001CB2 E4               [12] 6223 	clr	a
      001CB3 F5*00            [12] 6224 	mov	_setTextColor_PARM_2,a
      001CB5 F5*01            [12] 6225 	mov	(_setTextColor_PARM_2 + 1),a
      001CB7 90 FF FF         [24] 6226 	mov	dptr,#0xffff
      001CBA 12r02rD6         [24] 6227 	lcall	_setTextColor
                                   6228 ;	ECEN4330Lab7.c:1908: LCD_string_write("\nReturning to\nmain menu.");
      001CBD 90r08rD2         [24] 6229 	mov	dptr,#___str_43
      001CC0 75 F0 80         [24] 6230 	mov	b,#0x80
      001CC3 12r09rC5         [24] 6231 	lcall	_LCD_string_write
                                   6232 ;	ECEN4330Lab7.c:1909: delay(200);
      001CC6 90 00 C8         [24] 6233 	mov	dptr,#0x00c8
                                   6234 ;	ECEN4330Lab7.c:1910: }
      001CC9 02r00r25         [24] 6235 	ljmp	_delay
                                   6236 ;------------------------------------------------------------
                                   6237 ;Allocation info for local variables in function 'FIND_display'
                                   6238 ;------------------------------------------------------------
                                   6239 ;	ECEN4330Lab7.c:1924: void FIND_display(){
                                   6240 ;	-----------------------------------------
                                   6241 ;	 function FIND_display
                                   6242 ;	-----------------------------------------
      001CCC                       6243 _FIND_display:
                                   6244 ;	ECEN4330Lab7.c:1925: addr2 = 0;						// first addr of page
      001CCC E4               [12] 6245 	clr	a
      001CCD F5*25            [12] 6246 	mov	_addr2,a
      001CCF F5*26            [12] 6247 	mov	(_addr2 + 1),a
                                   6248 ;	ECEN4330Lab7.c:1926: currAddr1 = 0;					// page count
      001CD1 F5*2B            [12] 6249 	mov	_currAddr1,a
      001CD3 F5*2C            [12] 6250 	mov	(_currAddr1 + 1),a
                                   6251 ;	ECEN4330Lab7.c:1927: resetLCD();
      001CD5 12r0Dr53         [24] 6252 	lcall	_resetLCD
                                   6253 ;	ECEN4330Lab7.c:1928: currAddr0 = addr0;				// Load starting address
      001CD8 85*21*29         [24] 6254 	mov	_currAddr0,_addr0
      001CDB 85*22*2A         [24] 6255 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6256 ;	ECEN4330Lab7.c:1929: data = RAMread(currAddr0);		// Read data from starting address
      001CDE 85*29 82         [24] 6257 	mov	dpl,_currAddr0
      001CE1 85*2A 83         [24] 6258 	mov	dph,(_currAddr0 + 1)
      001CE4 12r0Dr40         [24] 6259 	lcall	_RAMread
      001CE7 85 82*20         [24] 6260 	mov	_data,dpl
                                   6261 ;	ECEN4330Lab7.c:1932: while(data != byte1 && currAddr0 < addr1){
      001CEA                       6262 00102$:
      001CEA AE*20            [24] 6263 	mov	r6,_data
      001CEC 7F 00            [12] 6264 	mov	r7,#0x00
      001CEE EE               [12] 6265 	mov	a,r6
      001CEF B5*2F 06         [24] 6266 	cjne	a,_byte1,00235$
      001CF2 EF               [12] 6267 	mov	a,r7
      001CF3 B5*30 02         [24] 6268 	cjne	a,(_byte1 + 1),00235$
      001CF6 80 21            [24] 6269 	sjmp	00104$
      001CF8                       6270 00235$:
      001CF8 C3               [12] 6271 	clr	c
      001CF9 E5*29            [12] 6272 	mov	a,_currAddr0
      001CFB 95*23            [12] 6273 	subb	a,_addr1
      001CFD E5*2A            [12] 6274 	mov	a,(_currAddr0 + 1)
      001CFF 95*24            [12] 6275 	subb	a,(_addr1 + 1)
      001D01 50 16            [24] 6276 	jnc	00104$
                                   6277 ;	ECEN4330Lab7.c:1933: currAddr0++;				// Next RAM address
      001D03 05*29            [12] 6278 	inc	_currAddr0
      001D05 E4               [12] 6279 	clr	a
      001D06 B5*29 02         [24] 6280 	cjne	a,_currAddr0,00237$
      001D09 05*2A            [12] 6281 	inc	(_currAddr0 + 1)
      001D0B                       6282 00237$:
                                   6283 ;	ECEN4330Lab7.c:1934: data = RAMread(currAddr0);	// Read data from RAM
      001D0B 85*29 82         [24] 6284 	mov	dpl,_currAddr0
      001D0E 85*2A 83         [24] 6285 	mov	dph,(_currAddr0 + 1)
      001D11 12r0Dr40         [24] 6286 	lcall	_RAMread
      001D14 85 82*20         [24] 6287 	mov	_data,dpl
      001D17 80 D1            [24] 6288 	sjmp	00102$
      001D19                       6289 00104$:
                                   6290 ;	ECEN4330Lab7.c:1938: if(data != byte1 && currAddr0 == addr1){
      001D19 AE*20            [24] 6291 	mov	r6,_data
      001D1B 7F 00            [12] 6292 	mov	r7,#0x00
      001D1D EE               [12] 6293 	mov	a,r6
      001D1E B5*2F 06         [24] 6294 	cjne	a,_byte1,00238$
      001D21 EF               [12] 6295 	mov	a,r7
      001D22 B5*30 02         [24] 6296 	cjne	a,(_byte1 + 1),00238$
      001D25 80 58            [24] 6297 	sjmp	00142$
      001D27                       6298 00238$:
      001D27 E5*23            [12] 6299 	mov	a,_addr1
      001D29 B5*29 53         [24] 6300 	cjne	a,_currAddr0,00142$
      001D2C E5*24            [12] 6301 	mov	a,(_addr1 + 1)
      001D2E B5*2A 4E         [24] 6302 	cjne	a,(_currAddr0 + 1),00142$
                                   6303 ;	ECEN4330Lab7.c:1939: resetLCD();
      001D31 12r0Dr53         [24] 6304 	lcall	_resetLCD
                                   6305 ;	ECEN4330Lab7.c:1940: LCD_string_write("\n0x");
      001D34 90r07rB6         [24] 6306 	mov	dptr,#___str_27
      001D37 75 F0 80         [24] 6307 	mov	b,#0x80
      001D3A 12r09rC5         [24] 6308 	lcall	_LCD_string_write
                                   6309 ;	ECEN4330Lab7.c:1941: HEXtoASCII_8write(byte1);
      001D3D 85*2F 82         [24] 6310 	mov	dpl,_byte1
      001D40 12r0Cr2F         [24] 6311 	lcall	_HEXtoASCII_8write
                                   6312 ;	ECEN4330Lab7.c:1942: LCD_string_write(" not\nfound in\naddress range\n\n");
      001D43 90r08rEB         [24] 6313 	mov	dptr,#___str_44
      001D46 75 F0 80         [24] 6314 	mov	b,#0x80
      001D49 12r09rC5         [24] 6315 	lcall	_LCD_string_write
                                   6316 ;	ECEN4330Lab7.c:1943: HEXtoASCII_16write(addr0);
      001D4C 85*21 82         [24] 6317 	mov	dpl,_addr0
      001D4F 85*22 83         [24] 6318 	mov	dph,(_addr0 + 1)
      001D52 12r0Cr6C         [24] 6319 	lcall	_HEXtoASCII_16write
                                   6320 ;	ECEN4330Lab7.c:1944: LCD_string_write(" -\n");
      001D55 90r07rEE         [24] 6321 	mov	dptr,#___str_32
      001D58 75 F0 80         [24] 6322 	mov	b,#0x80
      001D5B 12r09rC5         [24] 6323 	lcall	_LCD_string_write
                                   6324 ;	ECEN4330Lab7.c:1945: HEXtoASCII_16write(addr1);
      001D5E 85*23 82         [24] 6325 	mov	dpl,_addr1
      001D61 85*24 83         [24] 6326 	mov	dph,(_addr1 + 1)
      001D64 12r0Cr6C         [24] 6327 	lcall	_HEXtoASCII_16write
                                   6328 ;	ECEN4330Lab7.c:1946: delay(200);
      001D67 90 00 C8         [24] 6329 	mov	dptr,#0x00c8
      001D6A 12r00r25         [24] 6330 	lcall	_delay
                                   6331 ;	ECEN4330Lab7.c:1947: resetLCD();
      001D6D 12r0Dr53         [24] 6332 	lcall	_resetLCD
                                   6333 ;	ECEN4330Lab7.c:1948: LCD_string_write("Returning to\nmain menu.");
      001D70 90r06r1F         [24] 6334 	mov	dptr,#___str_15
      001D73 75 F0 80         [24] 6335 	mov	b,#0x80
      001D76 12r09rC5         [24] 6336 	lcall	_LCD_string_write
                                   6337 ;	ECEN4330Lab7.c:1949: delay(100);
      001D79 90 00 64         [24] 6338 	mov	dptr,#0x0064
      001D7C 02r00r25         [24] 6339 	ljmp	_delay
      001D7F                       6340 00142$:
                                   6341 ;	ECEN4330Lab7.c:1957: resetLCD();
      001D7F 12r0Dr53         [24] 6342 	lcall	_resetLCD
                                   6343 ;	ECEN4330Lab7.c:1958: setTextColor(GREEN, BLACK);
      001D82 E4               [12] 6344 	clr	a
      001D83 F5*00            [12] 6345 	mov	_setTextColor_PARM_2,a
      001D85 F5*01            [12] 6346 	mov	(_setTextColor_PARM_2 + 1),a
      001D87 90 07 E0         [24] 6347 	mov	dptr,#0x07e0
      001D8A 12r02rD6         [24] 6348 	lcall	_setTextColor
                                   6349 ;	ECEN4330Lab7.c:1959: LCD_string_write("\n0x");
      001D8D 90r07rB6         [24] 6350 	mov	dptr,#___str_27
      001D90 75 F0 80         [24] 6351 	mov	b,#0x80
      001D93 12r09rC5         [24] 6352 	lcall	_LCD_string_write
                                   6353 ;	ECEN4330Lab7.c:1960: HEXtoASCII_8write(byte1);
      001D96 85*2F 82         [24] 6354 	mov	dpl,_byte1
      001D99 12r0Cr2F         [24] 6355 	lcall	_HEXtoASCII_8write
                                   6356 ;	ECEN4330Lab7.c:1961: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001D9C 90r09r09         [24] 6357 	mov	dptr,#___str_45
      001D9F 75 F0 80         [24] 6358 	mov	b,#0x80
      001DA2 12r09rC5         [24] 6359 	lcall	_LCD_string_write
                                   6360 ;	ECEN4330Lab7.c:1962: delay(200);
      001DA5 90 00 C8         [24] 6361 	mov	dptr,#0x00c8
      001DA8 12r00r25         [24] 6362 	lcall	_delay
                                   6363 ;	ECEN4330Lab7.c:1963: addr2 = currAddr0;					// Load first found address of page
      001DAB 85*29*25         [24] 6364 	mov	_addr2,_currAddr0
      001DAE 85*2A*26         [24] 6365 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6366 ;	ECEN4330Lab7.c:1968: do{
      001DB1                       6367 00138$:
                                   6368 ;	ECEN4330Lab7.c:1969: resetLCD();
      001DB1 12r0Dr53         [24] 6369 	lcall	_resetLCD
                                   6370 ;	ECEN4330Lab7.c:1970: currAddr0 = addr2;				// Load current address	
      001DB4 85*25*29         [24] 6371 	mov	_currAddr0,_addr2
      001DB7 85*26*2A         [24] 6372 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6373 ;	ECEN4330Lab7.c:1971: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001DBA 85*29 82         [24] 6374 	mov	dpl,_currAddr0
      001DBD 85*2A 83         [24] 6375 	mov	dph,(_currAddr0 + 1)
      001DC0 12r0Cr6C         [24] 6376 	lcall	_HEXtoASCII_16write
                                   6377 ;	ECEN4330Lab7.c:1972: count = 7;						// Set page address display counter
      001DC3 75*32 07         [24] 6378 	mov	_count,#0x07
      001DC6 75*33 00         [24] 6379 	mov	(_count + 1),#0x00
                                   6380 ;	ECEN4330Lab7.c:1973: currAddr1++;					// Increment page count
      001DC9 05*2B            [12] 6381 	inc	_currAddr1
      001DCB E4               [12] 6382 	clr	a
      001DCC B5*2B 02         [24] 6383 	cjne	a,_currAddr1,00241$
      001DCF 05*2C            [12] 6384 	inc	(_currAddr1 + 1)
      001DD1                       6385 00241$:
                                   6386 ;	ECEN4330Lab7.c:1979: if(currAddr0 != 0xFFFF){
      001DD1 74 FF            [12] 6387 	mov	a,#0xff
      001DD3 B5*29 05         [24] 6388 	cjne	a,_currAddr0,00242$
      001DD6 B5*2A 02         [24] 6389 	cjne	a,(_currAddr0 + 1),00242$
      001DD9 80 4C            [24] 6390 	sjmp	00112$
      001DDB                       6391 00242$:
                                   6392 ;	ECEN4330Lab7.c:1980: do{
      001DDB                       6393 00108$:
                                   6394 ;	ECEN4330Lab7.c:1981: currAddr0++;				// Next RAM address
      001DDB 05*29            [12] 6395 	inc	_currAddr0
      001DDD E4               [12] 6396 	clr	a
      001DDE B5*29 02         [24] 6397 	cjne	a,_currAddr0,00243$
      001DE1 05*2A            [12] 6398 	inc	(_currAddr0 + 1)
      001DE3                       6399 00243$:
                                   6400 ;	ECEN4330Lab7.c:1982: data = RAMread(currAddr0);	// Read data
      001DE3 85*29 82         [24] 6401 	mov	dpl,_currAddr0
      001DE6 85*2A 83         [24] 6402 	mov	dph,(_currAddr0 + 1)
      001DE9 12r0Dr40         [24] 6403 	lcall	_RAMread
      001DEC 85 82*20         [24] 6404 	mov	_data,dpl
                                   6405 ;	ECEN4330Lab7.c:1983: if(data == byte1){			// If data = search value
      001DEF AE*20            [24] 6406 	mov	r6,_data
      001DF1 7F 00            [12] 6407 	mov	r7,#0x00
      001DF3 EE               [12] 6408 	mov	a,r6
      001DF4 B5*2F 1F         [24] 6409 	cjne	a,_byte1,00109$
      001DF7 EF               [12] 6410 	mov	a,r7
      001DF8 B5*30 1B         [24] 6411 	cjne	a,(_byte1 + 1),00109$
                                   6412 ;	ECEN4330Lab7.c:1984: count--;				// Decrement page address display counter
      001DFB 15*32            [12] 6413 	dec	_count
      001DFD 74 FF            [12] 6414 	mov	a,#0xff
      001DFF B5*32 02         [24] 6415 	cjne	a,_count,00246$
      001E02 15*33            [12] 6416 	dec	(_count + 1)
      001E04                       6417 00246$:
                                   6418 ;	ECEN4330Lab7.c:1985: LCD_string_write("\n");	// Next line
      001E04 90r07rF2         [24] 6419 	mov	dptr,#___str_33
      001E07 75 F0 80         [24] 6420 	mov	b,#0x80
      001E0A 12r09rC5         [24] 6421 	lcall	_LCD_string_write
                                   6422 ;	ECEN4330Lab7.c:1986: HEXtoASCII_16write(currAddr0);	// Display found address
      001E0D 85*29 82         [24] 6423 	mov	dpl,_currAddr0
      001E10 85*2A 83         [24] 6424 	mov	dph,(_currAddr0 + 1)
      001E13 12r0Cr6C         [24] 6425 	lcall	_HEXtoASCII_16write
      001E16                       6426 00109$:
                                   6427 ;	ECEN4330Lab7.c:1988: }while(currAddr0 < addr1 && count > 0);
      001E16 C3               [12] 6428 	clr	c
      001E17 E5*29            [12] 6429 	mov	a,_currAddr0
      001E19 95*23            [12] 6430 	subb	a,_addr1
      001E1B E5*2A            [12] 6431 	mov	a,(_currAddr0 + 1)
      001E1D 95*24            [12] 6432 	subb	a,(_addr1 + 1)
      001E1F 50 06            [24] 6433 	jnc	00112$
      001E21 E5*32            [12] 6434 	mov	a,_count
      001E23 45*33            [12] 6435 	orl	a,(_count + 1)
      001E25 70 B4            [24] 6436 	jnz	00108$
      001E27                       6437 00112$:
                                   6438 ;	ECEN4330Lab7.c:1995: setCursor(0, 250);
      001E27 75*00 FA         [24] 6439 	mov	_setCursor_PARM_2,#0xfa
      001E2A 75*01 00         [24] 6440 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E2D 90 00 00         [24] 6441 	mov	dptr,#0x0000
      001E30 12r02rC9         [24] 6442 	lcall	_setCursor
                                   6443 ;	ECEN4330Lab7.c:1996: setTextSize(2);
      001E33 75 82 02         [24] 6444 	mov	dpl,#0x02
      001E36 12r02rE3         [24] 6445 	lcall	_setTextSize
                                   6446 ;	ECEN4330Lab7.c:1997: setTextColor(WHITE, BLACK);
      001E39 E4               [12] 6447 	clr	a
      001E3A F5*00            [12] 6448 	mov	_setTextColor_PARM_2,a
      001E3C F5*01            [12] 6449 	mov	(_setTextColor_PARM_2 + 1),a
      001E3E 90 FF FF         [24] 6450 	mov	dptr,#0xffff
      001E41 12r02rD6         [24] 6451 	lcall	_setTextColor
                                   6452 ;	ECEN4330Lab7.c:1998: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001E44 90r07rF4         [24] 6453 	mov	dptr,#___str_34
      001E47 75 F0 80         [24] 6454 	mov	b,#0x80
      001E4A 12r09rC5         [24] 6455 	lcall	_LCD_string_write
                                   6456 ;	ECEN4330Lab7.c:1999: HEXtoASCII_16write(currAddr1);
      001E4D 85*2B 82         [24] 6457 	mov	dpl,_currAddr1
      001E50 85*2C 83         [24] 6458 	mov	dph,(_currAddr1 + 1)
      001E53 12r0Cr6C         [24] 6459 	lcall	_HEXtoASCII_16write
                                   6460 ;	ECEN4330Lab7.c:2005: key = keyDetect();
      001E56 12r0Ar04         [24] 6461 	lcall	_keyDetect
      001E59 85 82*16         [24] 6462 	mov	_key,dpl
                                   6463 ;	ECEN4330Lab7.c:2006: switch (key)
      001E5C 74 30            [12] 6464 	mov	a,#0x30
      001E5E B5*16 02         [24] 6465 	cjne	a,_key,00249$
      001E61 80 13            [24] 6466 	sjmp	00113$
      001E63                       6467 00249$:
      001E63 74 31            [12] 6468 	mov	a,#0x31
      001E65 B5*16 03         [24] 6469 	cjne	a,_key,00250$
      001E68 02r1Fr17         [24] 6470 	ljmp	00126$
      001E6B                       6471 00250$:
      001E6B 74 45            [12] 6472 	mov	a,#0x45
      001E6D B5*16 03         [24] 6473 	cjne	a,_key,00251$
      001E70 02r1Fr97         [24] 6474 	ljmp	00135$
      001E73                       6475 00251$:
      001E73 02r1FrAB         [24] 6476 	ljmp	00136$
                                   6477 ;	ECEN4330Lab7.c:2012: case '0':
      001E76                       6478 00113$:
                                   6479 ;	ECEN4330Lab7.c:2017: if(currAddr0 >= addr1){
      001E76 C3               [12] 6480 	clr	c
      001E77 E5*29            [12] 6481 	mov	a,_currAddr0
      001E79 95*23            [12] 6482 	subb	a,_addr1
      001E7B E5*2A            [12] 6483 	mov	a,(_currAddr0 + 1)
      001E7D 95*24            [12] 6484 	subb	a,(_addr1 + 1)
      001E7F 40 1E            [24] 6485 	jc	00117$
                                   6486 ;	ECEN4330Lab7.c:2018: resetLCD();
      001E81 12r0Dr53         [24] 6487 	lcall	_resetLCD
                                   6488 ;	ECEN4330Lab7.c:2019: LCD_string_write("End of Data.");
      001E84 90r09r2E         [24] 6489 	mov	dptr,#___str_46
      001E87 75 F0 80         [24] 6490 	mov	b,#0x80
      001E8A 12r09rC5         [24] 6491 	lcall	_LCD_string_write
                                   6492 ;	ECEN4330Lab7.c:2020: delay(200);
      001E8D 90 00 C8         [24] 6493 	mov	dptr,#0x00c8
      001E90 12r00r25         [24] 6494 	lcall	_delay
                                   6495 ;	ECEN4330Lab7.c:2021: currAddr1--;	// Reset page count to last displayed page 
      001E93 15*2B            [12] 6496 	dec	_currAddr1
      001E95 74 FF            [12] 6497 	mov	a,#0xff
      001E97 B5*2B 02         [24] 6498 	cjne	a,_currAddr1,00253$
      001E9A 15*2C            [12] 6499 	dec	(_currAddr1 + 1)
      001E9C                       6500 00253$:
      001E9C 02r1FrB7         [24] 6501 	ljmp	00139$
                                   6502 ;	ECEN4330Lab7.c:2034: do{
      001E9F                       6503 00117$:
                                   6504 ;	ECEN4330Lab7.c:2035: currAddr0++;			// Next RAM address
      001E9F 05*29            [12] 6505 	inc	_currAddr0
      001EA1 E4               [12] 6506 	clr	a
      001EA2 B5*29 02         [24] 6507 	cjne	a,_currAddr0,00254$
      001EA5 05*2A            [12] 6508 	inc	(_currAddr0 + 1)
      001EA7                       6509 00254$:
                                   6510 ;	ECEN4330Lab7.c:2036: data = RAMread(currAddr0);	// Read data
      001EA7 85*29 82         [24] 6511 	mov	dpl,_currAddr0
      001EAA 85*2A 83         [24] 6512 	mov	dph,(_currAddr0 + 1)
      001EAD 12r0Dr40         [24] 6513 	lcall	_RAMread
      001EB0 85 82*20         [24] 6514 	mov	_data,dpl
                                   6515 ;	ECEN4330Lab7.c:2037: if(data == byte1){			// If data matches search value
      001EB3 AE*20            [24] 6516 	mov	r6,_data
      001EB5 7F 00            [12] 6517 	mov	r7,#0x00
      001EB7 EE               [12] 6518 	mov	a,r6
      001EB8 B5*2F 0A         [24] 6519 	cjne	a,_byte1,00118$
      001EBB EF               [12] 6520 	mov	a,r7
      001EBC B5*30 06         [24] 6521 	cjne	a,(_byte1 + 1),00118$
                                   6522 ;	ECEN4330Lab7.c:2038: addr2 = currAddr0;		// Set first address of display page
      001EBF 85*29*25         [24] 6523 	mov	_addr2,_currAddr0
      001EC2 85*2A*26         [24] 6524 	mov	(_addr2 + 1),(_currAddr0 + 1)
      001EC5                       6525 00118$:
                                   6526 ;	ECEN4330Lab7.c:2040: }while(currAddr0 < addr1 && data != byte1);
      001EC5 C3               [12] 6527 	clr	c
      001EC6 E5*29            [12] 6528 	mov	a,_currAddr0
      001EC8 95*23            [12] 6529 	subb	a,_addr1
      001ECA E5*2A            [12] 6530 	mov	a,(_currAddr0 + 1)
      001ECC 95*24            [12] 6531 	subb	a,(_addr1 + 1)
      001ECE 50 0C            [24] 6532 	jnc	00119$
      001ED0 AE*20            [24] 6533 	mov	r6,_data
      001ED2 7F 00            [12] 6534 	mov	r7,#0x00
      001ED4 EE               [12] 6535 	mov	a,r6
      001ED5 B5*2F C7         [24] 6536 	cjne	a,_byte1,00117$
      001ED8 EF               [12] 6537 	mov	a,r7
      001ED9 B5*30 C3         [24] 6538 	cjne	a,(_byte1 + 1),00117$
      001EDC                       6539 00119$:
                                   6540 ;	ECEN4330Lab7.c:2046: if(currAddr0 >= addr1 && data != byte1){
      001EDC C3               [12] 6541 	clr	c
      001EDD E5*29            [12] 6542 	mov	a,_currAddr0
      001EDF 95*23            [12] 6543 	subb	a,_addr1
      001EE1 E5*2A            [12] 6544 	mov	a,(_currAddr0 + 1)
      001EE3 95*24            [12] 6545 	subb	a,(_addr1 + 1)
      001EE5 50 03            [24] 6546 	jnc	00260$
      001EE7 02r1FrB7         [24] 6547 	ljmp	00139$
      001EEA                       6548 00260$:
      001EEA AE*20            [24] 6549 	mov	r6,_data
      001EEC 7F 00            [12] 6550 	mov	r7,#0x00
      001EEE EE               [12] 6551 	mov	a,r6
      001EEF B5*2F 07         [24] 6552 	cjne	a,_byte1,00261$
      001EF2 EF               [12] 6553 	mov	a,r7
      001EF3 B5*30 03         [24] 6554 	cjne	a,(_byte1 + 1),00261$
      001EF6 02r1FrB7         [24] 6555 	ljmp	00139$
      001EF9                       6556 00261$:
                                   6557 ;	ECEN4330Lab7.c:2047: resetLCD();
      001EF9 12r0Dr53         [24] 6558 	lcall	_resetLCD
                                   6559 ;	ECEN4330Lab7.c:2048: LCD_string_write("End of Data.");
      001EFC 90r09r2E         [24] 6560 	mov	dptr,#___str_46
      001EFF 75 F0 80         [24] 6561 	mov	b,#0x80
      001F02 12r09rC5         [24] 6562 	lcall	_LCD_string_write
                                   6563 ;	ECEN4330Lab7.c:2049: delay(200);
      001F05 90 00 C8         [24] 6564 	mov	dptr,#0x00c8
      001F08 12r00r25         [24] 6565 	lcall	_delay
                                   6566 ;	ECEN4330Lab7.c:2050: currAddr1--;	// Reset page count to last displayed page
      001F0B 15*2B            [12] 6567 	dec	_currAddr1
      001F0D 74 FF            [12] 6568 	mov	a,#0xff
      001F0F B5*2B 02         [24] 6569 	cjne	a,_currAddr1,00262$
      001F12 15*2C            [12] 6570 	dec	(_currAddr1 + 1)
      001F14                       6571 00262$:
                                   6572 ;	ECEN4330Lab7.c:2055: break;
      001F14 02r1FrB7         [24] 6573 	ljmp	00139$
                                   6574 ;	ECEN4330Lab7.c:2062: case '1':
      001F17                       6575 00126$:
                                   6576 ;	ECEN4330Lab7.c:2066: if(currAddr1 == 1){
      001F17 74 01            [12] 6577 	mov	a,#0x01
      001F19 B5*2B 06         [24] 6578 	cjne	a,_currAddr1,00263$
      001F1C 14               [12] 6579 	dec	a
      001F1D B5*2C 02         [24] 6580 	cjne	a,(_currAddr1 + 1),00263$
      001F20 80 02            [24] 6581 	sjmp	00264$
      001F22                       6582 00263$:
      001F22 80 1E            [24] 6583 	sjmp	00133$
      001F24                       6584 00264$:
                                   6585 ;	ECEN4330Lab7.c:2067: resetLCD();
      001F24 12r0Dr53         [24] 6586 	lcall	_resetLCD
                                   6587 ;	ECEN4330Lab7.c:2068: LCD_string_write("End of Data.");
      001F27 90r09r2E         [24] 6588 	mov	dptr,#___str_46
      001F2A 75 F0 80         [24] 6589 	mov	b,#0x80
      001F2D 12r09rC5         [24] 6590 	lcall	_LCD_string_write
                                   6591 ;	ECEN4330Lab7.c:2069: delay(200);
      001F30 90 00 C8         [24] 6592 	mov	dptr,#0x00c8
      001F33 12r00r25         [24] 6593 	lcall	_delay
                                   6594 ;	ECEN4330Lab7.c:2070: currAddr1--;	// Reset page count to last displayed page
      001F36 15*2B            [12] 6595 	dec	_currAddr1
      001F38 74 FF            [12] 6596 	mov	a,#0xff
      001F3A B5*2B 02         [24] 6597 	cjne	a,_currAddr1,00265$
      001F3D 15*2C            [12] 6598 	dec	(_currAddr1 + 1)
      001F3F                       6599 00265$:
      001F3F 02r1FrB7         [24] 6600 	ljmp	00139$
      001F42                       6601 00133$:
                                   6602 ;	ECEN4330Lab7.c:2078: currAddr0 = addr2;
      001F42 85*25*29         [24] 6603 	mov	_currAddr0,_addr2
      001F45 85*26*2A         [24] 6604 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6605 ;	ECEN4330Lab7.c:2079: count = 0;
      001F48 E4               [12] 6606 	clr	a
      001F49 F5*32            [12] 6607 	mov	_count,a
      001F4B F5*33            [12] 6608 	mov	(_count + 1),a
                                   6609 ;	ECEN4330Lab7.c:2080: while(count < 8){
      001F4D                       6610 00129$:
      001F4D C3               [12] 6611 	clr	c
      001F4E E5*32            [12] 6612 	mov	a,_count
      001F50 94 08            [12] 6613 	subb	a,#0x08
      001F52 E5*33            [12] 6614 	mov	a,(_count + 1)
      001F54 94 00            [12] 6615 	subb	a,#0x00
      001F56 50 2B            [24] 6616 	jnc	00131$
                                   6617 ;	ECEN4330Lab7.c:2081: currAddr0--;
      001F58 15*29            [12] 6618 	dec	_currAddr0
      001F5A 74 FF            [12] 6619 	mov	a,#0xff
      001F5C B5*29 02         [24] 6620 	cjne	a,_currAddr0,00267$
      001F5F 15*2A            [12] 6621 	dec	(_currAddr0 + 1)
      001F61                       6622 00267$:
                                   6623 ;	ECEN4330Lab7.c:2082: data = RAMread(currAddr0);
      001F61 85*29 82         [24] 6624 	mov	dpl,_currAddr0
      001F64 85*2A 83         [24] 6625 	mov	dph,(_currAddr0 + 1)
      001F67 12r0Dr40         [24] 6626 	lcall	_RAMread
      001F6A 85 82*20         [24] 6627 	mov	_data,dpl
                                   6628 ;	ECEN4330Lab7.c:2083: if(data == byte1){
      001F6D AE*20            [24] 6629 	mov	r6,_data
      001F6F 7F 00            [12] 6630 	mov	r7,#0x00
      001F71 EE               [12] 6631 	mov	a,r6
      001F72 B5*2F D8         [24] 6632 	cjne	a,_byte1,00129$
      001F75 EF               [12] 6633 	mov	a,r7
      001F76 B5*30 D4         [24] 6634 	cjne	a,(_byte1 + 1),00129$
                                   6635 ;	ECEN4330Lab7.c:2084: count++;
      001F79 05*32            [12] 6636 	inc	_count
      001F7B E4               [12] 6637 	clr	a
      001F7C B5*32 CE         [24] 6638 	cjne	a,_count,00129$
      001F7F 05*33            [12] 6639 	inc	(_count + 1)
      001F81 80 CA            [24] 6640 	sjmp	00129$
      001F83                       6641 00131$:
                                   6642 ;	ECEN4330Lab7.c:2087: addr2 = currAddr0;
      001F83 85*29*25         [24] 6643 	mov	_addr2,_currAddr0
      001F86 85*2A*26         [24] 6644 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6645 ;	ECEN4330Lab7.c:2088: currAddr1 -= 2;
      001F89 E5*2B            [12] 6646 	mov	a,_currAddr1
      001F8B 24 FE            [12] 6647 	add	a,#0xfe
      001F8D F5*2B            [12] 6648 	mov	_currAddr1,a
      001F8F E5*2C            [12] 6649 	mov	a,(_currAddr1 + 1)
      001F91 34 FF            [12] 6650 	addc	a,#0xff
      001F93 F5*2C            [12] 6651 	mov	(_currAddr1 + 1),a
                                   6652 ;	ECEN4330Lab7.c:2090: break;
                                   6653 ;	ECEN4330Lab7.c:2096: case 'E':
      001F95 80 20            [24] 6654 	sjmp	00139$
      001F97                       6655 00135$:
                                   6656 ;	ECEN4330Lab7.c:2097: resetLCD();
      001F97 12r0Dr53         [24] 6657 	lcall	_resetLCD
                                   6658 ;	ECEN4330Lab7.c:2098: LCD_string_write("Returning to\nmain menu.");
      001F9A 90r06r1F         [24] 6659 	mov	dptr,#___str_15
      001F9D 75 F0 80         [24] 6660 	mov	b,#0x80
      001FA0 12r09rC5         [24] 6661 	lcall	_LCD_string_write
                                   6662 ;	ECEN4330Lab7.c:2099: delay(200);
      001FA3 90 00 C8         [24] 6663 	mov	dptr,#0x00c8
      001FA6 12r00r25         [24] 6664 	lcall	_delay
                                   6665 ;	ECEN4330Lab7.c:2100: break;
                                   6666 ;	ECEN4330Lab7.c:2106: default:
      001FA9 80 0C            [24] 6667 	sjmp	00139$
      001FAB                       6668 00136$:
                                   6669 ;	ECEN4330Lab7.c:2107: invalidInput();
      001FAB 12r0Dr7B         [24] 6670 	lcall	_invalidInput
                                   6671 ;	ECEN4330Lab7.c:2108: currAddr1--;
      001FAE 15*2B            [12] 6672 	dec	_currAddr1
      001FB0 74 FF            [12] 6673 	mov	a,#0xff
      001FB2 B5*2B 02         [24] 6674 	cjne	a,_currAddr1,00271$
      001FB5 15*2C            [12] 6675 	dec	(_currAddr1 + 1)
      001FB7                       6676 00271$:
                                   6677 ;	ECEN4330Lab7.c:2111: }
      001FB7                       6678 00139$:
                                   6679 ;	ECEN4330Lab7.c:2112: }while(key != 'E');
      001FB7 74 45            [12] 6680 	mov	a,#0x45
      001FB9 B5*16 01         [24] 6681 	cjne	a,_key,00272$
      001FBC 22               [24] 6682 	ret
      001FBD                       6683 00272$:
      001FBD 02r1DrB1         [24] 6684 	ljmp	00138$
                                   6685 ;	ECEN4330Lab7.c:2114: }
      001FC0 22               [24] 6686 	ret
                                   6687 ;------------------------------------------------------------
                                   6688 ;Allocation info for local variables in function 'FIND'
                                   6689 ;------------------------------------------------------------
                                   6690 ;	ECEN4330Lab7.c:2122: void FIND(){
                                   6691 ;	-----------------------------------------
                                   6692 ;	 function FIND
                                   6693 ;	-----------------------------------------
      001FC1                       6694 _FIND:
                                   6695 ;	ECEN4330Lab7.c:2123: endAddrCalc = 0;
      001FC1 E4               [12] 6696 	clr	a
      001FC2 F5*34            [12] 6697 	mov	_endAddrCalc,a
      001FC4 F5*35            [12] 6698 	mov	(_endAddrCalc + 1),a
      001FC6 F5*36            [12] 6699 	mov	(_endAddrCalc + 2),a
      001FC8 F5*37            [12] 6700 	mov	(_endAddrCalc + 3),a
                                   6701 ;	ECEN4330Lab7.c:2124: addr0 = 0;                      // Starting Address
      001FCA F5*21            [12] 6702 	mov	_addr0,a
      001FCC F5*22            [12] 6703 	mov	(_addr0 + 1),a
                                   6704 ;	ECEN4330Lab7.c:2125: addr1 = 0;                      // End Address
      001FCE F5*23            [12] 6705 	mov	_addr1,a
      001FD0 F5*24            [12] 6706 	mov	(_addr1 + 1),a
                                   6707 ;	ECEN4330Lab7.c:2126: dataType = 0;                   // Data Type
                                   6708 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001FD2 F5*1A            [12] 6709 	mov	_dataType,a
                                   6710 ;	ECEN4330Lab7.c:2127: dataSize = 0;                   // Data Size
      001FD4 F5*1B            [12] 6711 	mov	_dataSize,a
      001FD6 F5*1C            [12] 6712 	mov	(_dataSize + 1),a
                                   6713 ;	ECEN4330Lab7.c:2128: byte1 = 0;                       // Find Value
      001FD8 F5*2F            [12] 6714 	mov	_byte1,a
      001FDA F5*30            [12] 6715 	mov	(_byte1 + 1),a
                                   6716 ;	ECEN4330Lab7.c:2131: resetLCD();
      001FDC 12r0Dr53         [24] 6717 	lcall	_resetLCD
                                   6718 ;	ECEN4330Lab7.c:2132: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      001FDF 90r09r3B         [24] 6719 	mov	dptr,#___str_47
      001FE2 75 F0 80         [24] 6720 	mov	b,#0x80
      001FE5 12r09rC5         [24] 6721 	lcall	_LCD_string_write
                                   6722 ;	ECEN4330Lab7.c:2133: cursor_x -= 4 * textsize * 6;
      001FE8 E5*0C            [12] 6723 	mov	a,_textsize
      001FEA 75 F0 18         [24] 6724 	mov	b,#0x18
      001FED A4               [48] 6725 	mul	ab
      001FEE FE               [12] 6726 	mov	r6,a
      001FEF AF F0            [24] 6727 	mov	r7,b
      001FF1 E5*08            [12] 6728 	mov	a,_cursor_x
      001FF3 C3               [12] 6729 	clr	c
      001FF4 9E               [12] 6730 	subb	a,r6
      001FF5 F5*08            [12] 6731 	mov	_cursor_x,a
      001FF7 E5*09            [12] 6732 	mov	a,(_cursor_x + 1)
      001FF9 9F               [12] 6733 	subb	a,r7
      001FFA F5*09            [12] 6734 	mov	(_cursor_x + 1),a
                                   6735 ;	ECEN4330Lab7.c:2134: inputRead16();                  // Read input
      001FFC 12r0DrA4         [24] 6736 	lcall	_inputRead16
                                   6737 ;	ECEN4330Lab7.c:2135: addr0 = input16;                // Start address
      001FFF 85*17*21         [24] 6738 	mov	_addr0,_input16
      002002 85*18*22         [24] 6739 	mov	(_addr0 + 1),(_input16 + 1)
                                   6740 ;	ECEN4330Lab7.c:2141: resetLCD();
      002005 12r0Dr53         [24] 6741 	lcall	_resetLCD
                                   6742 ;	ECEN4330Lab7.c:2142: inputDataSize();                // Prompt & read input
      002008 12r0Fr70         [24] 6743 	lcall	_inputDataSize
                                   6744 ;	ECEN4330Lab7.c:2145: resetLCD();
      00200B 12r0Dr53         [24] 6745 	lcall	_resetLCD
                                   6746 ;	ECEN4330Lab7.c:2146: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      00200E 90r09r63         [24] 6747 	mov	dptr,#___str_48
      002011 75 F0 80         [24] 6748 	mov	b,#0x80
      002014 12r09rC5         [24] 6749 	lcall	_LCD_string_write
                                   6750 ;	ECEN4330Lab7.c:2147: cursor_x -= 2 * textsize * 6;
      002017 E5*0C            [12] 6751 	mov	a,_textsize
      002019 75 F0 0C         [24] 6752 	mov	b,#0x0c
      00201C A4               [48] 6753 	mul	ab
      00201D FE               [12] 6754 	mov	r6,a
      00201E AF F0            [24] 6755 	mov	r7,b
      002020 E5*08            [12] 6756 	mov	a,_cursor_x
      002022 C3               [12] 6757 	clr	c
      002023 9E               [12] 6758 	subb	a,r6
      002024 F5*08            [12] 6759 	mov	_cursor_x,a
      002026 E5*09            [12] 6760 	mov	a,(_cursor_x + 1)
      002028 9F               [12] 6761 	subb	a,r7
      002029 F5*09            [12] 6762 	mov	(_cursor_x + 1),a
                                   6763 ;	ECEN4330Lab7.c:2148: inputRead8();                  // Read input
      00202B 12r0Er5F         [24] 6764 	lcall	_inputRead8
                                   6765 ;	ECEN4330Lab7.c:2149: byte1 = input8;                 // Find value
      00202E 85*19*2F         [24] 6766 	mov	_byte1,_input8
      002031 75*30 00         [24] 6767 	mov	(_byte1 + 1),#0x00
                                   6768 ;	ECEN4330Lab7.c:2152: endAddrCalc = addr0 + dataSize;
      002034 E5*1B            [12] 6769 	mov	a,_dataSize
      002036 25*21            [12] 6770 	add	a,_addr0
      002038 FE               [12] 6771 	mov	r6,a
      002039 E5*1C            [12] 6772 	mov	a,(_dataSize + 1)
      00203B 35*22            [12] 6773 	addc	a,(_addr0 + 1)
      00203D FF               [12] 6774 	mov	r7,a
      00203E 8E*34            [24] 6775 	mov	_endAddrCalc,r6
      002040 8F*35            [24] 6776 	mov	(_endAddrCalc + 1),r7
      002042 75*36 00         [24] 6777 	mov	(_endAddrCalc + 2),#0x00
      002045 75*37 00         [24] 6778 	mov	(_endAddrCalc + 3),#0x00
                                   6779 ;	ECEN4330Lab7.c:2153: if(endAddrCalc < addr0){ // RAM overflow
      002048 AC*21            [24] 6780 	mov	r4,_addr0
      00204A AD*22            [24] 6781 	mov	r5,(_addr0 + 1)
      00204C 7E 00            [12] 6782 	mov	r6,#0x00
      00204E 7F 00            [12] 6783 	mov	r7,#0x00
      002050 C3               [12] 6784 	clr	c
      002051 E5*34            [12] 6785 	mov	a,_endAddrCalc
      002053 9C               [12] 6786 	subb	a,r4
      002054 E5*35            [12] 6787 	mov	a,(_endAddrCalc + 1)
      002056 9D               [12] 6788 	subb	a,r5
      002057 E5*36            [12] 6789 	mov	a,(_endAddrCalc + 2)
      002059 9E               [12] 6790 	subb	a,r6
      00205A E5*37            [12] 6791 	mov	a,(_endAddrCalc + 3)
      00205C 9F               [12] 6792 	subb	a,r7
      00205D 50 14            [24] 6793 	jnc	00102$
                                   6794 ;	ECEN4330Lab7.c:2154: addr1 = 0xFFFF;             // Set end address
      00205F 75*23 FF         [24] 6795 	mov	_addr1,#0xff
                                   6796 ;	ECEN4330Lab7.c:2155: dataSize = addr1 - addr0;   // Recalculate data size
      002062 74 FF            [12] 6797 	mov	a,#0xff
      002064 F5*24            [12] 6798 	mov	(_addr1 + 1),a
      002066 C3               [12] 6799 	clr	c
      002067 95*21            [12] 6800 	subb	a,_addr0
      002069 F5*1B            [12] 6801 	mov	_dataSize,a
      00206B 74 FF            [12] 6802 	mov	a,#0xff
      00206D 95*22            [12] 6803 	subb	a,(_addr0 + 1)
      00206F F5*1C            [12] 6804 	mov	(_dataSize + 1),a
      002071 80 0C            [24] 6805 	sjmp	00103$
      002073                       6806 00102$:
                                   6807 ;	ECEN4330Lab7.c:2158: addr1 = addr0 + dataSize;
      002073 E5*1B            [12] 6808 	mov	a,_dataSize
      002075 25*21            [12] 6809 	add	a,_addr0
      002077 F5*23            [12] 6810 	mov	_addr1,a
      002079 E5*1C            [12] 6811 	mov	a,(_dataSize + 1)
      00207B 35*22            [12] 6812 	addc	a,(_addr0 + 1)
      00207D F5*24            [12] 6813 	mov	(_addr1 + 1),a
      00207F                       6814 00103$:
                                   6815 ;	ECEN4330Lab7.c:2178: FIND_display();                 // Display dump data
                                   6816 ;	ECEN4330Lab7.c:2179: }
      00207F 02r1CrCC         [24] 6817 	ljmp	_FIND_display
                                   6818 ;------------------------------------------------------------
                                   6819 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   6820 ;------------------------------------------------------------
                                   6821 ;__1310720043              Allocated to registers 
                                   6822 ;__1310720044              Allocated to registers 
                                   6823 ;map_address               Allocated to registers 
                                   6824 ;d                         Allocated to registers 
                                   6825 ;__1966080046              Allocated to registers 
                                   6826 ;__1966080047              Allocated to registers 
                                   6827 ;map_address               Allocated to registers 
                                   6828 ;d                         Allocated to registers 
                                   6829 ;__1966080049              Allocated to registers 
                                   6830 ;__1966080050              Allocated to registers 
                                   6831 ;map_address               Allocated to registers 
                                   6832 ;d                         Allocated to registers 
                                   6833 ;__1966080052              Allocated to registers 
                                   6834 ;__1966080053              Allocated to registers 
                                   6835 ;map_address               Allocated to registers 
                                   6836 ;d                         Allocated to registers 
                                   6837 ;__1966080055              Allocated to registers 
                                   6838 ;__1966080056              Allocated to registers 
                                   6839 ;map_address               Allocated to registers 
                                   6840 ;d                         Allocated to registers 
                                   6841 ;__1966080058              Allocated to registers 
                                   6842 ;__1966080059              Allocated to registers 
                                   6843 ;map_address               Allocated to registers 
                                   6844 ;d                         Allocated to registers 
                                   6845 ;__1966080061              Allocated to registers 
                                   6846 ;__1966080062              Allocated to registers 
                                   6847 ;map_address               Allocated to registers 
                                   6848 ;d                         Allocated to registers 
                                   6849 ;__1966080064              Allocated to registers 
                                   6850 ;__1966080065              Allocated to registers 
                                   6851 ;map_address               Allocated to registers 
                                   6852 ;d                         Allocated to registers 
                                   6853 ;------------------------------------------------------------
                                   6854 ;	ECEN4330Lab7.c:2241: void LCD_mainMenu() {
                                   6855 ;	-----------------------------------------
                                   6856 ;	 function LCD_mainMenu
                                   6857 ;	-----------------------------------------
      002082                       6858 _LCD_mainMenu:
                                   6859 ;	ECEN4330Lab7.c:2243: key = 0;
      002082 75*16 00         [24] 6860 	mov	_key,#0x00
                                   6861 ;	ECEN4330Lab7.c:2244: iowrite8(seg7_address, 0xC0);
      002085 85*04 82         [24] 6862 	mov	dpl,_seg7_address
      002088 85*05 83         [24] 6863 	mov	dph,(_seg7_address + 1)
                                   6864 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   6865 ;	assignBit
      00208B D2 B4            [12] 6866 	setb	_P3_4
                                   6867 ;	ECEN4330Lab7.c:167: *map_address = d;
      00208D 74 C0            [12] 6868 	mov	a,#0xc0
      00208F F0               [24] 6869 	movx	@dptr,a
                                   6870 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   6871 ;	assignBit
      002090 C2 B4            [12] 6872 	clr	_P3_4
                                   6873 ;	ECEN4330Lab7.c:2247: resetLCD();
      002092 12r0Dr53         [24] 6874 	lcall	_resetLCD
                                   6875 ;	ECEN4330Lab7.c:2248: setTextColor(GREEN, BLACK);
      002095 E4               [12] 6876 	clr	a
      002096 F5*00            [12] 6877 	mov	_setTextColor_PARM_2,a
      002098 F5*01            [12] 6878 	mov	(_setTextColor_PARM_2 + 1),a
      00209A 90 07 E0         [24] 6879 	mov	dptr,#0x07e0
      00209D 12r02rD6         [24] 6880 	lcall	_setTextColor
                                   6881 ;	ECEN4330Lab7.c:2249: LCD_string_write("   Cameron\n   Biniamow\n");
      0020A0 90r09r81         [24] 6882 	mov	dptr,#___str_49
      0020A3 75 F0 80         [24] 6883 	mov	b,#0x80
      0020A6 12r09rC5         [24] 6884 	lcall	_LCD_string_write
                                   6885 ;	ECEN4330Lab7.c:2250: LCD_string_write("  ECEN-4330\n\n");
      0020A9 90r09r99         [24] 6886 	mov	dptr,#___str_50
      0020AC 75 F0 80         [24] 6887 	mov	b,#0x80
      0020AF 12r09rC5         [24] 6888 	lcall	_LCD_string_write
                                   6889 ;	ECEN4330Lab7.c:2253: setTextColor(WHITE, BLACK);
      0020B2 E4               [12] 6890 	clr	a
      0020B3 F5*00            [12] 6891 	mov	_setTextColor_PARM_2,a
      0020B5 F5*01            [12] 6892 	mov	(_setTextColor_PARM_2 + 1),a
      0020B7 90 FF FF         [24] 6893 	mov	dptr,#0xffff
      0020BA 12r02rD6         [24] 6894 	lcall	_setTextColor
                                   6895 ;	ECEN4330Lab7.c:2254: LCD_string_write("(A) RAM CHECK\n");
      0020BD 90r09rA7         [24] 6896 	mov	dptr,#___str_51
      0020C0 75 F0 80         [24] 6897 	mov	b,#0x80
      0020C3 12r09rC5         [24] 6898 	lcall	_LCD_string_write
                                   6899 ;	ECEN4330Lab7.c:2255: LCD_string_write("(B) MOVE\n");
      0020C6 90r09rB6         [24] 6900 	mov	dptr,#___str_52
      0020C9 75 F0 80         [24] 6901 	mov	b,#0x80
      0020CC 12r09rC5         [24] 6902 	lcall	_LCD_string_write
                                   6903 ;	ECEN4330Lab7.c:2256: LCD_string_write("(C) COUNT\n");
      0020CF 90r09rC0         [24] 6904 	mov	dptr,#___str_53
      0020D2 75 F0 80         [24] 6905 	mov	b,#0x80
      0020D5 12r09rC5         [24] 6906 	lcall	_LCD_string_write
                                   6907 ;	ECEN4330Lab7.c:2257: LCD_string_write("(D) DUMP\n");
      0020D8 90r09rCB         [24] 6908 	mov	dptr,#___str_54
      0020DB 75 F0 80         [24] 6909 	mov	b,#0x80
      0020DE 12r09rC5         [24] 6910 	lcall	_LCD_string_write
                                   6911 ;	ECEN4330Lab7.c:2258: LCD_string_write("(E) EDIT\n");
      0020E1 90r09rD5         [24] 6912 	mov	dptr,#___str_55
      0020E4 75 F0 80         [24] 6913 	mov	b,#0x80
      0020E7 12r09rC5         [24] 6914 	lcall	_LCD_string_write
                                   6915 ;	ECEN4330Lab7.c:2259: LCD_string_write("(F) FIND\n");
      0020EA 90r09rDF         [24] 6916 	mov	dptr,#___str_56
      0020ED 75 F0 80         [24] 6917 	mov	b,#0x80
      0020F0 12r09rC5         [24] 6918 	lcall	_LCD_string_write
                                   6919 ;	ECEN4330Lab7.c:2262: setTextColor(WHITE, BLACK);
      0020F3 E4               [12] 6920 	clr	a
      0020F4 F5*00            [12] 6921 	mov	_setTextColor_PARM_2,a
      0020F6 F5*01            [12] 6922 	mov	(_setTextColor_PARM_2 + 1),a
      0020F8 90 FF FF         [24] 6923 	mov	dptr,#0xffff
      0020FB 12r02rD6         [24] 6924 	lcall	_setTextColor
                                   6925 ;	ECEN4330Lab7.c:2263: setTextSize(1);
      0020FE 75 82 01         [24] 6926 	mov	dpl,#0x01
      002101 12r02rE3         [24] 6927 	lcall	_setTextSize
                                   6928 ;	ECEN4330Lab7.c:2264: setCursor(3, 304);
      002104 75*00 30         [24] 6929 	mov	_setCursor_PARM_2,#0x30
      002107 75*01 01         [24] 6930 	mov	(_setCursor_PARM_2 + 1),#0x01
      00210A 90 00 03         [24] 6931 	mov	dptr,#0x0003
      00210D 12r02rC9         [24] 6932 	lcall	_setCursor
                                   6933 ;	ECEN4330Lab7.c:2265: LCD_string_write("Spring 2021");
      002110 90r09rE9         [24] 6934 	mov	dptr,#___str_57
      002113 75 F0 80         [24] 6935 	mov	b,#0x80
      002116 12r09rC5         [24] 6936 	lcall	_LCD_string_write
                                   6937 ;	ECEN4330Lab7.c:2266: rtcPrint();
      002119 12r01r6D         [24] 6938 	lcall	_rtcPrint
                                   6939 ;	ECEN4330Lab7.c:2269: key = keyDetect();
      00211C 12r0Ar04         [24] 6940 	lcall	_keyDetect
      00211F 85 82*16         [24] 6941 	mov	_key,dpl
                                   6942 ;	ECEN4330Lab7.c:2270: switch (key)
      002122 74 41            [12] 6943 	mov	a,#0x41
      002124 B5*16 02         [24] 6944 	cjne	a,_key,00143$
      002127 80 23            [24] 6945 	sjmp	00101$
      002129                       6946 00143$:
      002129 74 42            [12] 6947 	mov	a,#0x42
      00212B B5*16 02         [24] 6948 	cjne	a,_key,00144$
      00212E 80 2C            [24] 6949 	sjmp	00102$
      002130                       6950 00144$:
      002130 74 43            [12] 6951 	mov	a,#0x43
      002132 B5*16 02         [24] 6952 	cjne	a,_key,00145$
      002135 80 35            [24] 6953 	sjmp	00103$
      002137                       6954 00145$:
      002137 74 44            [12] 6955 	mov	a,#0x44
      002139 B5*16 02         [24] 6956 	cjne	a,_key,00146$
      00213C 80 3E            [24] 6957 	sjmp	00104$
      00213E                       6958 00146$:
      00213E 74 45            [12] 6959 	mov	a,#0x45
      002140 B5*16 02         [24] 6960 	cjne	a,_key,00147$
      002143 80 47            [24] 6961 	sjmp	00105$
      002145                       6962 00147$:
      002145 74 46            [12] 6963 	mov	a,#0x46
                                   6964 ;	ECEN4330Lab7.c:2272: case 'A':
      002147 B5*16 62         [24] 6965 	cjne	a,_key,00107$
      00214A 80 50            [24] 6966 	sjmp	00106$
      00214C                       6967 00101$:
                                   6968 ;	ECEN4330Lab7.c:2273: iowrite8(seg7_address, 0x88);
      00214C 85*04 82         [24] 6969 	mov	dpl,_seg7_address
      00214F 85*05 83         [24] 6970 	mov	dph,(_seg7_address + 1)
                                   6971 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   6972 ;	assignBit
      002152 D2 B4            [12] 6973 	setb	_P3_4
                                   6974 ;	ECEN4330Lab7.c:167: *map_address = d;
      002154 74 88            [12] 6975 	mov	a,#0x88
      002156 F0               [24] 6976 	movx	@dptr,a
                                   6977 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   6978 ;	assignBit
      002157 C2 B4            [12] 6979 	clr	_P3_4
                                   6980 ;	ECEN4330Lab7.c:2274: RAM_CHECK();
                                   6981 ;	ECEN4330Lab7.c:2275: break;
                                   6982 ;	ECEN4330Lab7.c:2276: case 'B':
      002159 02r10rA7         [24] 6983 	ljmp	_RAM_CHECK
      00215C                       6984 00102$:
                                   6985 ;	ECEN4330Lab7.c:2277: iowrite8(seg7_address, 0x83);
      00215C 85*04 82         [24] 6986 	mov	dpl,_seg7_address
      00215F 85*05 83         [24] 6987 	mov	dph,(_seg7_address + 1)
                                   6988 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   6989 ;	assignBit
      002162 D2 B4            [12] 6990 	setb	_P3_4
                                   6991 ;	ECEN4330Lab7.c:167: *map_address = d;
      002164 74 83            [12] 6992 	mov	a,#0x83
      002166 F0               [24] 6993 	movx	@dptr,a
                                   6994 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   6995 ;	assignBit
      002167 C2 B4            [12] 6996 	clr	_P3_4
                                   6997 ;	ECEN4330Lab7.c:2278: MOVE();
                                   6998 ;	ECEN4330Lab7.c:2279: break;
                                   6999 ;	ECEN4330Lab7.c:2280: case 'C':
      002169 02r12rE0         [24] 7000 	ljmp	_MOVE
      00216C                       7001 00103$:
                                   7002 ;	ECEN4330Lab7.c:2281: iowrite8(seg7_address, 0xC6);
      00216C 85*04 82         [24] 7003 	mov	dpl,_seg7_address
      00216F 85*05 83         [24] 7004 	mov	dph,(_seg7_address + 1)
                                   7005 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7006 ;	assignBit
      002172 D2 B4            [12] 7007 	setb	_P3_4
                                   7008 ;	ECEN4330Lab7.c:167: *map_address = d;
      002174 74 C6            [12] 7009 	mov	a,#0xc6
      002176 F0               [24] 7010 	movx	@dptr,a
                                   7011 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7012 ;	assignBit
      002177 C2 B4            [12] 7013 	clr	_P3_4
                                   7014 ;	ECEN4330Lab7.c:2282: COUNT();
                                   7015 ;	ECEN4330Lab7.c:2283: break;
                                   7016 ;	ECEN4330Lab7.c:2284: case 'D':
      002179 02r14rFC         [24] 7017 	ljmp	_COUNT
      00217C                       7018 00104$:
                                   7019 ;	ECEN4330Lab7.c:2285: iowrite8(seg7_address, 0xA1);
      00217C 85*04 82         [24] 7020 	mov	dpl,_seg7_address
      00217F 85*05 83         [24] 7021 	mov	dph,(_seg7_address + 1)
                                   7022 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7023 ;	assignBit
      002182 D2 B4            [12] 7024 	setb	_P3_4
                                   7025 ;	ECEN4330Lab7.c:167: *map_address = d;
      002184 74 A1            [12] 7026 	mov	a,#0xa1
      002186 F0               [24] 7027 	movx	@dptr,a
                                   7028 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7029 ;	assignBit
      002187 C2 B4            [12] 7030 	clr	_P3_4
                                   7031 ;	ECEN4330Lab7.c:2286: DUMP();
                                   7032 ;	ECEN4330Lab7.c:2287: break;
                                   7033 ;	ECEN4330Lab7.c:2288: case 'E':
      002189 02r1ArAA         [24] 7034 	ljmp	_DUMP
      00218C                       7035 00105$:
                                   7036 ;	ECEN4330Lab7.c:2289: iowrite8(seg7_address, 0x86);
      00218C 85*04 82         [24] 7037 	mov	dpl,_seg7_address
      00218F 85*05 83         [24] 7038 	mov	dph,(_seg7_address + 1)
                                   7039 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7040 ;	assignBit
      002192 D2 B4            [12] 7041 	setb	_P3_4
                                   7042 ;	ECEN4330Lab7.c:167: *map_address = d;
      002194 74 86            [12] 7043 	mov	a,#0x86
      002196 F0               [24] 7044 	movx	@dptr,a
                                   7045 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7046 ;	assignBit
      002197 C2 B4            [12] 7047 	clr	_P3_4
                                   7048 ;	ECEN4330Lab7.c:2290: EDIT();
                                   7049 ;	ECEN4330Lab7.c:2291: break;
                                   7050 ;	ECEN4330Lab7.c:2292: case 'F':
      002199 02r1Cr14         [24] 7051 	ljmp	_EDIT
      00219C                       7052 00106$:
                                   7053 ;	ECEN4330Lab7.c:2293: iowrite8(seg7_address, 0x8E);
      00219C 85*04 82         [24] 7054 	mov	dpl,_seg7_address
      00219F 85*05 83         [24] 7055 	mov	dph,(_seg7_address + 1)
                                   7056 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7057 ;	assignBit
      0021A2 D2 B4            [12] 7058 	setb	_P3_4
                                   7059 ;	ECEN4330Lab7.c:167: *map_address = d;
      0021A4 74 8E            [12] 7060 	mov	a,#0x8e
      0021A6 F0               [24] 7061 	movx	@dptr,a
                                   7062 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7063 ;	assignBit
      0021A7 C2 B4            [12] 7064 	clr	_P3_4
                                   7065 ;	ECEN4330Lab7.c:2294: FIND();
                                   7066 ;	ECEN4330Lab7.c:2295: break;
                                   7067 ;	ECEN4330Lab7.c:2304: default:
      0021A9 02r1FrC1         [24] 7068 	ljmp	_FIND
      0021AC                       7069 00107$:
                                   7070 ;	ECEN4330Lab7.c:2305: iowrite8(seg7_address, 0xFF);
      0021AC 85*04 82         [24] 7071 	mov	dpl,_seg7_address
      0021AF 85*05 83         [24] 7072 	mov	dph,(_seg7_address + 1)
                                   7073 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7074 ;	assignBit
      0021B2 D2 B4            [12] 7075 	setb	_P3_4
                                   7076 ;	ECEN4330Lab7.c:167: *map_address = d;
      0021B4 74 FF            [12] 7077 	mov	a,#0xff
      0021B6 F0               [24] 7078 	movx	@dptr,a
                                   7079 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7080 ;	assignBit
      0021B7 C2 B4            [12] 7081 	clr	_P3_4
                                   7082 ;	ECEN4330Lab7.c:2306: invalidInput();
                                   7083 ;	ECEN4330Lab7.c:2308: }
                                   7084 ;	ECEN4330Lab7.c:2309: }
      0021B9 02r0Dr7B         [24] 7085 	ljmp	_invalidInput
                                   7086 ;------------------------------------------------------------
                                   7087 ;Allocation info for local variables in function 'main'
                                   7088 ;------------------------------------------------------------
                                   7089 ;__1310720067              Allocated to registers 
                                   7090 ;__1310720068              Allocated to registers 
                                   7091 ;map_address               Allocated to registers 
                                   7092 ;d                         Allocated to registers 
                                   7093 ;__1310720070              Allocated to registers 
                                   7094 ;__1310720071              Allocated to registers 
                                   7095 ;map_address               Allocated to registers 
                                   7096 ;d                         Allocated to registers 
                                   7097 ;__1310720073              Allocated to registers 
                                   7098 ;__1310720074              Allocated to registers 
                                   7099 ;map_address               Allocated to registers 
                                   7100 ;d                         Allocated to registers 
                                   7101 ;__1310720076              Allocated to registers 
                                   7102 ;__1310720077              Allocated to registers 
                                   7103 ;map_address               Allocated to registers 
                                   7104 ;d                         Allocated to registers 
                                   7105 ;__1310720079              Allocated to registers 
                                   7106 ;__1310720080              Allocated to registers 
                                   7107 ;map_address               Allocated to registers 
                                   7108 ;d                         Allocated to registers 
                                   7109 ;__1310720082              Allocated to registers 
                                   7110 ;__1310720083              Allocated to registers 
                                   7111 ;map_address               Allocated to registers 
                                   7112 ;d                         Allocated to registers 
                                   7113 ;__1310720085              Allocated to registers 
                                   7114 ;__1310720086              Allocated to registers 
                                   7115 ;map_address               Allocated to registers 
                                   7116 ;d                         Allocated to registers 
                                   7117 ;------------------------------------------------------------
                                   7118 ;	ECEN4330Lab7.c:2318: void main (void) {
                                   7119 ;	-----------------------------------------
                                   7120 ;	 function main
                                   7121 ;	-----------------------------------------
      0021BC                       7122 _main:
                                   7123 ;	ECEN4330Lab7.c:2319: CD = 0;
                                   7124 ;	assignBit
      0021BC C2 B5            [12] 7125 	clr	_P3_5
                                   7126 ;	ECEN4330Lab7.c:2320: IOM = 0;
                                   7127 ;	assignBit
      0021BE C2 B4            [12] 7128 	clr	_P3_4
                                   7129 ;	ECEN4330Lab7.c:2322: UART_Init();
      0021C0 12r00r0C         [24] 7130 	lcall	_UART_Init
                                   7131 ;	ECEN4330Lab7.c:2323: rtcInit();
      0021C3 12r00rB6         [24] 7132 	lcall	_rtcInit
                                   7133 ;	ECEN4330Lab7.c:2325: iowrite8(seg7_address, 0xFE);//a
      0021C6 85*04 82         [24] 7134 	mov	dpl,_seg7_address
      0021C9 85*05 83         [24] 7135 	mov	dph,(_seg7_address + 1)
                                   7136 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7137 ;	assignBit
      0021CC D2 B4            [12] 7138 	setb	_P3_4
                                   7139 ;	ECEN4330Lab7.c:167: *map_address = d;
      0021CE 74 FE            [12] 7140 	mov	a,#0xfe
      0021D0 F0               [24] 7141 	movx	@dptr,a
                                   7142 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7143 ;	assignBit
      0021D1 C2 B4            [12] 7144 	clr	_P3_4
                                   7145 ;	ECEN4330Lab7.c:2326: delay(100);
      0021D3 90 00 64         [24] 7146 	mov	dptr,#0x0064
      0021D6 12r00r25         [24] 7147 	lcall	_delay
                                   7148 ;	ECEN4330Lab7.c:2327: iowrite8(seg7_address, 0xFC);//a & b
      0021D9 85*04 82         [24] 7149 	mov	dpl,_seg7_address
      0021DC 85*05 83         [24] 7150 	mov	dph,(_seg7_address + 1)
                                   7151 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7152 ;	assignBit
      0021DF D2 B4            [12] 7153 	setb	_P3_4
                                   7154 ;	ECEN4330Lab7.c:167: *map_address = d;
      0021E1 74 FC            [12] 7155 	mov	a,#0xfc
      0021E3 F0               [24] 7156 	movx	@dptr,a
                                   7157 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7158 ;	assignBit
      0021E4 C2 B4            [12] 7159 	clr	_P3_4
                                   7160 ;	ECEN4330Lab7.c:2328: delay(100);
      0021E6 90 00 64         [24] 7161 	mov	dptr,#0x0064
      0021E9 12r00r25         [24] 7162 	lcall	_delay
                                   7163 ;	ECEN4330Lab7.c:2329: iowrite8(seg7_address, 0xF8);//a & b & c
      0021EC 85*04 82         [24] 7164 	mov	dpl,_seg7_address
      0021EF 85*05 83         [24] 7165 	mov	dph,(_seg7_address + 1)
                                   7166 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7167 ;	assignBit
      0021F2 D2 B4            [12] 7168 	setb	_P3_4
                                   7169 ;	ECEN4330Lab7.c:167: *map_address = d;
      0021F4 74 F8            [12] 7170 	mov	a,#0xf8
      0021F6 F0               [24] 7171 	movx	@dptr,a
                                   7172 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7173 ;	assignBit
      0021F7 C2 B4            [12] 7174 	clr	_P3_4
                                   7175 ;	ECEN4330Lab7.c:2330: delay(100);
      0021F9 90 00 64         [24] 7176 	mov	dptr,#0x0064
      0021FC 12r00r25         [24] 7177 	lcall	_delay
                                   7178 ;	ECEN4330Lab7.c:2331: iowrite8(seg7_address, 0xF0);//a & b & c & d
      0021FF 85*04 82         [24] 7179 	mov	dpl,_seg7_address
      002202 85*05 83         [24] 7180 	mov	dph,(_seg7_address + 1)
                                   7181 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7182 ;	assignBit
      002205 D2 B4            [12] 7183 	setb	_P3_4
                                   7184 ;	ECEN4330Lab7.c:167: *map_address = d;
      002207 74 F0            [12] 7185 	mov	a,#0xf0
      002209 F0               [24] 7186 	movx	@dptr,a
                                   7187 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7188 ;	assignBit
      00220A C2 B4            [12] 7189 	clr	_P3_4
                                   7190 ;	ECEN4330Lab7.c:2332: delay(100);
      00220C 90 00 64         [24] 7191 	mov	dptr,#0x0064
      00220F 12r00r25         [24] 7192 	lcall	_delay
                                   7193 ;	ECEN4330Lab7.c:2333: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      002212 85*04 82         [24] 7194 	mov	dpl,_seg7_address
      002215 85*05 83         [24] 7195 	mov	dph,(_seg7_address + 1)
                                   7196 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7197 ;	assignBit
      002218 D2 B4            [12] 7198 	setb	_P3_4
                                   7199 ;	ECEN4330Lab7.c:167: *map_address = d;
      00221A 74 E0            [12] 7200 	mov	a,#0xe0
      00221C F0               [24] 7201 	movx	@dptr,a
                                   7202 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7203 ;	assignBit
      00221D C2 B4            [12] 7204 	clr	_P3_4
                                   7205 ;	ECEN4330Lab7.c:2334: delay(100);
      00221F 90 00 64         [24] 7206 	mov	dptr,#0x0064
      002222 12r00r25         [24] 7207 	lcall	_delay
                                   7208 ;	ECEN4330Lab7.c:2335: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      002225 85*04 82         [24] 7209 	mov	dpl,_seg7_address
      002228 85*05 83         [24] 7210 	mov	dph,(_seg7_address + 1)
                                   7211 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7212 ;	assignBit
      00222B D2 B4            [12] 7213 	setb	_P3_4
                                   7214 ;	ECEN4330Lab7.c:167: *map_address = d;
      00222D 74 C0            [12] 7215 	mov	a,#0xc0
      00222F F0               [24] 7216 	movx	@dptr,a
                                   7217 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7218 ;	assignBit
      002230 C2 B4            [12] 7219 	clr	_P3_4
                                   7220 ;	ECEN4330Lab7.c:2336: delay(100);
      002232 90 00 64         [24] 7221 	mov	dptr,#0x0064
      002235 12r00r25         [24] 7222 	lcall	_delay
                                   7223 ;	ECEN4330Lab7.c:2337: IOM = 0;
                                   7224 ;	assignBit
      002238 C2 B4            [12] 7225 	clr	_P3_4
                                   7226 ;	ECEN4330Lab7.c:2338: CD = 1;
                                   7227 ;	assignBit
      00223A D2 B5            [12] 7228 	setb	_P3_5
                                   7229 ;	ECEN4330Lab7.c:2340: TFT_LCD_INIT();
      00223C 12r04r01         [24] 7230 	lcall	_TFT_LCD_INIT
                                   7231 ;	ECEN4330Lab7.c:2341: iowrite8(seg7_address, 0xF9);
      00223F 85*04 82         [24] 7232 	mov	dpl,_seg7_address
      002242 85*05 83         [24] 7233 	mov	dph,(_seg7_address + 1)
                                   7234 ;	ECEN4330Lab7.c:166: IOM = 1;
                                   7235 ;	assignBit
      002245 D2 B4            [12] 7236 	setb	_P3_4
                                   7237 ;	ECEN4330Lab7.c:167: *map_address = d;
      002247 74 F9            [12] 7238 	mov	a,#0xf9
      002249 F0               [24] 7239 	movx	@dptr,a
                                   7240 ;	ECEN4330Lab7.c:168: IOM = 0;
                                   7241 ;	assignBit
      00224A C2 B4            [12] 7242 	clr	_P3_4
                                   7243 ;	ECEN4330Lab7.c:2342: resetLCD();
      00224C 12r0Dr53         [24] 7244 	lcall	_resetLCD
                                   7245 ;	ECEN4330Lab7.c:2344: while(1) {
      00224F                       7246 00102$:
                                   7247 ;	ECEN4330Lab7.c:2345: LCD_mainMenu();
      00224F 12r20r82         [24] 7248 	lcall	_LCD_mainMenu
                                   7249 ;	ECEN4330Lab7.c:2347: }
      002252 80 FB            [24] 7250 	sjmp	00102$
                                   7251 	.area CSEG    (CODE)
                                   7252 	.area CONST   (CODE)
      000000                       7253 _font:
      000000 00                    7254 	.db #0x00	; 0
      000001 00                    7255 	.db #0x00	; 0
      000002 00                    7256 	.db #0x00	; 0
      000003 00                    7257 	.db #0x00	; 0
      000004 00                    7258 	.db #0x00	; 0
      000005 3E                    7259 	.db #0x3e	; 62
      000006 5B                    7260 	.db #0x5b	; 91
      000007 4F                    7261 	.db #0x4f	; 79	'O'
      000008 5B                    7262 	.db #0x5b	; 91
      000009 3E                    7263 	.db #0x3e	; 62
      00000A 3E                    7264 	.db #0x3e	; 62
      00000B 6B                    7265 	.db #0x6b	; 107	'k'
      00000C 4F                    7266 	.db #0x4f	; 79	'O'
      00000D 6B                    7267 	.db #0x6b	; 107	'k'
      00000E 3E                    7268 	.db #0x3e	; 62
      00000F 1C                    7269 	.db #0x1c	; 28
      000010 3E                    7270 	.db #0x3e	; 62
      000011 7C                    7271 	.db #0x7c	; 124
      000012 3E                    7272 	.db #0x3e	; 62
      000013 1C                    7273 	.db #0x1c	; 28
      000014 18                    7274 	.db #0x18	; 24
      000015 3C                    7275 	.db #0x3c	; 60
      000016 7E                    7276 	.db #0x7e	; 126
      000017 3C                    7277 	.db #0x3c	; 60
      000018 18                    7278 	.db #0x18	; 24
      000019 1C                    7279 	.db #0x1c	; 28
      00001A 57                    7280 	.db #0x57	; 87	'W'
      00001B 7D                    7281 	.db #0x7d	; 125
      00001C 57                    7282 	.db #0x57	; 87	'W'
      00001D 1C                    7283 	.db #0x1c	; 28
      00001E 1C                    7284 	.db #0x1c	; 28
      00001F 5E                    7285 	.db #0x5e	; 94
      000020 7F                    7286 	.db #0x7f	; 127
      000021 5E                    7287 	.db #0x5e	; 94
      000022 1C                    7288 	.db #0x1c	; 28
      000023 00                    7289 	.db #0x00	; 0
      000024 18                    7290 	.db #0x18	; 24
      000025 3C                    7291 	.db #0x3c	; 60
      000026 18                    7292 	.db #0x18	; 24
      000027 00                    7293 	.db #0x00	; 0
      000028 FF                    7294 	.db #0xff	; 255
      000029 E7                    7295 	.db #0xe7	; 231
      00002A C3                    7296 	.db #0xc3	; 195
      00002B E7                    7297 	.db #0xe7	; 231
      00002C FF                    7298 	.db #0xff	; 255
      00002D 00                    7299 	.db #0x00	; 0
      00002E 18                    7300 	.db #0x18	; 24
      00002F 24                    7301 	.db #0x24	; 36
      000030 18                    7302 	.db #0x18	; 24
      000031 00                    7303 	.db #0x00	; 0
      000032 FF                    7304 	.db #0xff	; 255
      000033 E7                    7305 	.db #0xe7	; 231
      000034 DB                    7306 	.db #0xdb	; 219
      000035 E7                    7307 	.db #0xe7	; 231
      000036 FF                    7308 	.db #0xff	; 255
      000037 30                    7309 	.db #0x30	; 48	'0'
      000038 48                    7310 	.db #0x48	; 72	'H'
      000039 3A                    7311 	.db #0x3a	; 58
      00003A 06                    7312 	.db #0x06	; 6
      00003B 0E                    7313 	.db #0x0e	; 14
      00003C 26                    7314 	.db #0x26	; 38
      00003D 29                    7315 	.db #0x29	; 41
      00003E 79                    7316 	.db #0x79	; 121	'y'
      00003F 29                    7317 	.db #0x29	; 41
      000040 26                    7318 	.db #0x26	; 38
      000041 40                    7319 	.db #0x40	; 64
      000042 7F                    7320 	.db #0x7f	; 127
      000043 05                    7321 	.db #0x05	; 5
      000044 05                    7322 	.db #0x05	; 5
      000045 07                    7323 	.db #0x07	; 7
      000046 40                    7324 	.db #0x40	; 64
      000047 7F                    7325 	.db #0x7f	; 127
      000048 05                    7326 	.db #0x05	; 5
      000049 25                    7327 	.db #0x25	; 37
      00004A 3F                    7328 	.db #0x3f	; 63
      00004B 5A                    7329 	.db #0x5a	; 90	'Z'
      00004C 3C                    7330 	.db #0x3c	; 60
      00004D E7                    7331 	.db #0xe7	; 231
      00004E 3C                    7332 	.db #0x3c	; 60
      00004F 5A                    7333 	.db #0x5a	; 90	'Z'
      000050 7F                    7334 	.db #0x7f	; 127
      000051 3E                    7335 	.db #0x3e	; 62
      000052 1C                    7336 	.db #0x1c	; 28
      000053 1C                    7337 	.db #0x1c	; 28
      000054 08                    7338 	.db #0x08	; 8
      000055 08                    7339 	.db #0x08	; 8
      000056 1C                    7340 	.db #0x1c	; 28
      000057 1C                    7341 	.db #0x1c	; 28
      000058 3E                    7342 	.db #0x3e	; 62
      000059 7F                    7343 	.db #0x7f	; 127
      00005A 14                    7344 	.db #0x14	; 20
      00005B 22                    7345 	.db #0x22	; 34
      00005C 7F                    7346 	.db #0x7f	; 127
      00005D 22                    7347 	.db #0x22	; 34
      00005E 14                    7348 	.db #0x14	; 20
      00005F 5F                    7349 	.db #0x5f	; 95
      000060 5F                    7350 	.db #0x5f	; 95
      000061 00                    7351 	.db #0x00	; 0
      000062 5F                    7352 	.db #0x5f	; 95
      000063 5F                    7353 	.db #0x5f	; 95
      000064 06                    7354 	.db #0x06	; 6
      000065 09                    7355 	.db #0x09	; 9
      000066 7F                    7356 	.db #0x7f	; 127
      000067 01                    7357 	.db #0x01	; 1
      000068 7F                    7358 	.db #0x7f	; 127
      000069 00                    7359 	.db #0x00	; 0
      00006A 66                    7360 	.db #0x66	; 102	'f'
      00006B 89                    7361 	.db #0x89	; 137
      00006C 95                    7362 	.db #0x95	; 149
      00006D 6A                    7363 	.db #0x6a	; 106	'j'
      00006E 60                    7364 	.db #0x60	; 96
      00006F 60                    7365 	.db #0x60	; 96
      000070 60                    7366 	.db #0x60	; 96
      000071 60                    7367 	.db #0x60	; 96
      000072 60                    7368 	.db #0x60	; 96
      000073 94                    7369 	.db #0x94	; 148
      000074 A2                    7370 	.db #0xa2	; 162
      000075 FF                    7371 	.db #0xff	; 255
      000076 A2                    7372 	.db #0xa2	; 162
      000077 94                    7373 	.db #0x94	; 148
      000078 08                    7374 	.db #0x08	; 8
      000079 04                    7375 	.db #0x04	; 4
      00007A 7E                    7376 	.db #0x7e	; 126
      00007B 04                    7377 	.db #0x04	; 4
      00007C 08                    7378 	.db #0x08	; 8
      00007D 10                    7379 	.db #0x10	; 16
      00007E 20                    7380 	.db #0x20	; 32
      00007F 7E                    7381 	.db #0x7e	; 126
      000080 20                    7382 	.db #0x20	; 32
      000081 10                    7383 	.db #0x10	; 16
      000082 08                    7384 	.db #0x08	; 8
      000083 08                    7385 	.db #0x08	; 8
      000084 2A                    7386 	.db #0x2a	; 42
      000085 1C                    7387 	.db #0x1c	; 28
      000086 08                    7388 	.db #0x08	; 8
      000087 08                    7389 	.db #0x08	; 8
      000088 1C                    7390 	.db #0x1c	; 28
      000089 2A                    7391 	.db #0x2a	; 42
      00008A 08                    7392 	.db #0x08	; 8
      00008B 08                    7393 	.db #0x08	; 8
      00008C 1E                    7394 	.db #0x1e	; 30
      00008D 10                    7395 	.db #0x10	; 16
      00008E 10                    7396 	.db #0x10	; 16
      00008F 10                    7397 	.db #0x10	; 16
      000090 10                    7398 	.db #0x10	; 16
      000091 0C                    7399 	.db #0x0c	; 12
      000092 1E                    7400 	.db #0x1e	; 30
      000093 0C                    7401 	.db #0x0c	; 12
      000094 1E                    7402 	.db #0x1e	; 30
      000095 0C                    7403 	.db #0x0c	; 12
      000096 30                    7404 	.db #0x30	; 48	'0'
      000097 38                    7405 	.db #0x38	; 56	'8'
      000098 3E                    7406 	.db #0x3e	; 62
      000099 38                    7407 	.db #0x38	; 56	'8'
      00009A 30                    7408 	.db #0x30	; 48	'0'
      00009B 06                    7409 	.db #0x06	; 6
      00009C 0E                    7410 	.db #0x0e	; 14
      00009D 3E                    7411 	.db #0x3e	; 62
      00009E 0E                    7412 	.db #0x0e	; 14
      00009F 06                    7413 	.db #0x06	; 6
      0000A0 00                    7414 	.db #0x00	; 0
      0000A1 00                    7415 	.db #0x00	; 0
      0000A2 00                    7416 	.db #0x00	; 0
      0000A3 00                    7417 	.db #0x00	; 0
      0000A4 00                    7418 	.db #0x00	; 0
      0000A5 00                    7419 	.db #0x00	; 0
      0000A6 00                    7420 	.db #0x00	; 0
      0000A7 5F                    7421 	.db #0x5f	; 95
      0000A8 00                    7422 	.db #0x00	; 0
      0000A9 00                    7423 	.db #0x00	; 0
      0000AA 00                    7424 	.db #0x00	; 0
      0000AB 07                    7425 	.db #0x07	; 7
      0000AC 00                    7426 	.db #0x00	; 0
      0000AD 07                    7427 	.db #0x07	; 7
      0000AE 00                    7428 	.db #0x00	; 0
      0000AF 14                    7429 	.db #0x14	; 20
      0000B0 7F                    7430 	.db #0x7f	; 127
      0000B1 14                    7431 	.db #0x14	; 20
      0000B2 7F                    7432 	.db #0x7f	; 127
      0000B3 14                    7433 	.db #0x14	; 20
      0000B4 24                    7434 	.db #0x24	; 36
      0000B5 2A                    7435 	.db #0x2a	; 42
      0000B6 7F                    7436 	.db #0x7f	; 127
      0000B7 2A                    7437 	.db #0x2a	; 42
      0000B8 12                    7438 	.db #0x12	; 18
      0000B9 23                    7439 	.db #0x23	; 35
      0000BA 13                    7440 	.db #0x13	; 19
      0000BB 08                    7441 	.db #0x08	; 8
      0000BC 64                    7442 	.db #0x64	; 100	'd'
      0000BD 62                    7443 	.db #0x62	; 98	'b'
      0000BE 36                    7444 	.db #0x36	; 54	'6'
      0000BF 49                    7445 	.db #0x49	; 73	'I'
      0000C0 56                    7446 	.db #0x56	; 86	'V'
      0000C1 20                    7447 	.db #0x20	; 32
      0000C2 50                    7448 	.db #0x50	; 80	'P'
      0000C3 00                    7449 	.db #0x00	; 0
      0000C4 08                    7450 	.db #0x08	; 8
      0000C5 07                    7451 	.db #0x07	; 7
      0000C6 03                    7452 	.db #0x03	; 3
      0000C7 00                    7453 	.db #0x00	; 0
      0000C8 00                    7454 	.db #0x00	; 0
      0000C9 1C                    7455 	.db #0x1c	; 28
      0000CA 22                    7456 	.db #0x22	; 34
      0000CB 41                    7457 	.db #0x41	; 65	'A'
      0000CC 00                    7458 	.db #0x00	; 0
      0000CD 00                    7459 	.db #0x00	; 0
      0000CE 41                    7460 	.db #0x41	; 65	'A'
      0000CF 22                    7461 	.db #0x22	; 34
      0000D0 1C                    7462 	.db #0x1c	; 28
      0000D1 00                    7463 	.db #0x00	; 0
      0000D2 2A                    7464 	.db #0x2a	; 42
      0000D3 1C                    7465 	.db #0x1c	; 28
      0000D4 7F                    7466 	.db #0x7f	; 127
      0000D5 1C                    7467 	.db #0x1c	; 28
      0000D6 2A                    7468 	.db #0x2a	; 42
      0000D7 08                    7469 	.db #0x08	; 8
      0000D8 08                    7470 	.db #0x08	; 8
      0000D9 3E                    7471 	.db #0x3e	; 62
      0000DA 08                    7472 	.db #0x08	; 8
      0000DB 08                    7473 	.db #0x08	; 8
      0000DC 00                    7474 	.db #0x00	; 0
      0000DD 80                    7475 	.db #0x80	; 128
      0000DE 70                    7476 	.db #0x70	; 112	'p'
      0000DF 30                    7477 	.db #0x30	; 48	'0'
      0000E0 00                    7478 	.db #0x00	; 0
      0000E1 08                    7479 	.db #0x08	; 8
      0000E2 08                    7480 	.db #0x08	; 8
      0000E3 08                    7481 	.db #0x08	; 8
      0000E4 08                    7482 	.db #0x08	; 8
      0000E5 08                    7483 	.db #0x08	; 8
      0000E6 00                    7484 	.db #0x00	; 0
      0000E7 00                    7485 	.db #0x00	; 0
      0000E8 60                    7486 	.db #0x60	; 96
      0000E9 60                    7487 	.db #0x60	; 96
      0000EA 00                    7488 	.db #0x00	; 0
      0000EB 20                    7489 	.db #0x20	; 32
      0000EC 10                    7490 	.db #0x10	; 16
      0000ED 08                    7491 	.db #0x08	; 8
      0000EE 04                    7492 	.db #0x04	; 4
      0000EF 02                    7493 	.db #0x02	; 2
      0000F0 3E                    7494 	.db #0x3e	; 62
      0000F1 51                    7495 	.db #0x51	; 81	'Q'
      0000F2 49                    7496 	.db #0x49	; 73	'I'
      0000F3 45                    7497 	.db #0x45	; 69	'E'
      0000F4 3E                    7498 	.db #0x3e	; 62
      0000F5 00                    7499 	.db #0x00	; 0
      0000F6 42                    7500 	.db #0x42	; 66	'B'
      0000F7 7F                    7501 	.db #0x7f	; 127
      0000F8 40                    7502 	.db #0x40	; 64
      0000F9 00                    7503 	.db #0x00	; 0
      0000FA 72                    7504 	.db #0x72	; 114	'r'
      0000FB 49                    7505 	.db #0x49	; 73	'I'
      0000FC 49                    7506 	.db #0x49	; 73	'I'
      0000FD 49                    7507 	.db #0x49	; 73	'I'
      0000FE 46                    7508 	.db #0x46	; 70	'F'
      0000FF 21                    7509 	.db #0x21	; 33
      000100 41                    7510 	.db #0x41	; 65	'A'
      000101 49                    7511 	.db #0x49	; 73	'I'
      000102 4D                    7512 	.db #0x4d	; 77	'M'
      000103 33                    7513 	.db #0x33	; 51	'3'
      000104 18                    7514 	.db #0x18	; 24
      000105 14                    7515 	.db #0x14	; 20
      000106 12                    7516 	.db #0x12	; 18
      000107 7F                    7517 	.db #0x7f	; 127
      000108 10                    7518 	.db #0x10	; 16
      000109 27                    7519 	.db #0x27	; 39
      00010A 45                    7520 	.db #0x45	; 69	'E'
      00010B 45                    7521 	.db #0x45	; 69	'E'
      00010C 45                    7522 	.db #0x45	; 69	'E'
      00010D 39                    7523 	.db #0x39	; 57	'9'
      00010E 3C                    7524 	.db #0x3c	; 60
      00010F 4A                    7525 	.db #0x4a	; 74	'J'
      000110 49                    7526 	.db #0x49	; 73	'I'
      000111 49                    7527 	.db #0x49	; 73	'I'
      000112 31                    7528 	.db #0x31	; 49	'1'
      000113 41                    7529 	.db #0x41	; 65	'A'
      000114 21                    7530 	.db #0x21	; 33
      000115 11                    7531 	.db #0x11	; 17
      000116 09                    7532 	.db #0x09	; 9
      000117 07                    7533 	.db #0x07	; 7
      000118 36                    7534 	.db #0x36	; 54	'6'
      000119 49                    7535 	.db #0x49	; 73	'I'
      00011A 49                    7536 	.db #0x49	; 73	'I'
      00011B 49                    7537 	.db #0x49	; 73	'I'
      00011C 36                    7538 	.db #0x36	; 54	'6'
      00011D 46                    7539 	.db #0x46	; 70	'F'
      00011E 49                    7540 	.db #0x49	; 73	'I'
      00011F 49                    7541 	.db #0x49	; 73	'I'
      000120 29                    7542 	.db #0x29	; 41
      000121 1E                    7543 	.db #0x1e	; 30
      000122 00                    7544 	.db #0x00	; 0
      000123 00                    7545 	.db #0x00	; 0
      000124 14                    7546 	.db #0x14	; 20
      000125 00                    7547 	.db #0x00	; 0
      000126 00                    7548 	.db #0x00	; 0
      000127 00                    7549 	.db #0x00	; 0
      000128 40                    7550 	.db #0x40	; 64
      000129 34                    7551 	.db #0x34	; 52	'4'
      00012A 00                    7552 	.db #0x00	; 0
      00012B 00                    7553 	.db #0x00	; 0
      00012C 00                    7554 	.db #0x00	; 0
      00012D 08                    7555 	.db #0x08	; 8
      00012E 14                    7556 	.db #0x14	; 20
      00012F 22                    7557 	.db #0x22	; 34
      000130 41                    7558 	.db #0x41	; 65	'A'
      000131 14                    7559 	.db #0x14	; 20
      000132 14                    7560 	.db #0x14	; 20
      000133 14                    7561 	.db #0x14	; 20
      000134 14                    7562 	.db #0x14	; 20
      000135 14                    7563 	.db #0x14	; 20
      000136 00                    7564 	.db #0x00	; 0
      000137 41                    7565 	.db #0x41	; 65	'A'
      000138 22                    7566 	.db #0x22	; 34
      000139 14                    7567 	.db #0x14	; 20
      00013A 08                    7568 	.db #0x08	; 8
      00013B 02                    7569 	.db #0x02	; 2
      00013C 01                    7570 	.db #0x01	; 1
      00013D 59                    7571 	.db #0x59	; 89	'Y'
      00013E 09                    7572 	.db #0x09	; 9
      00013F 06                    7573 	.db #0x06	; 6
      000140 3E                    7574 	.db #0x3e	; 62
      000141 41                    7575 	.db #0x41	; 65	'A'
      000142 5D                    7576 	.db #0x5d	; 93
      000143 59                    7577 	.db #0x59	; 89	'Y'
      000144 4E                    7578 	.db #0x4e	; 78	'N'
      000145 7C                    7579 	.db #0x7c	; 124
      000146 12                    7580 	.db #0x12	; 18
      000147 11                    7581 	.db #0x11	; 17
      000148 12                    7582 	.db #0x12	; 18
      000149 7C                    7583 	.db #0x7c	; 124
      00014A 7F                    7584 	.db #0x7f	; 127
      00014B 49                    7585 	.db #0x49	; 73	'I'
      00014C 49                    7586 	.db #0x49	; 73	'I'
      00014D 49                    7587 	.db #0x49	; 73	'I'
      00014E 36                    7588 	.db #0x36	; 54	'6'
      00014F 3E                    7589 	.db #0x3e	; 62
      000150 41                    7590 	.db #0x41	; 65	'A'
      000151 41                    7591 	.db #0x41	; 65	'A'
      000152 41                    7592 	.db #0x41	; 65	'A'
      000153 22                    7593 	.db #0x22	; 34
      000154 7F                    7594 	.db #0x7f	; 127
      000155 41                    7595 	.db #0x41	; 65	'A'
      000156 41                    7596 	.db #0x41	; 65	'A'
      000157 41                    7597 	.db #0x41	; 65	'A'
      000158 3E                    7598 	.db #0x3e	; 62
      000159 7F                    7599 	.db #0x7f	; 127
      00015A 49                    7600 	.db #0x49	; 73	'I'
      00015B 49                    7601 	.db #0x49	; 73	'I'
      00015C 49                    7602 	.db #0x49	; 73	'I'
      00015D 41                    7603 	.db #0x41	; 65	'A'
      00015E 7F                    7604 	.db #0x7f	; 127
      00015F 09                    7605 	.db #0x09	; 9
      000160 09                    7606 	.db #0x09	; 9
      000161 09                    7607 	.db #0x09	; 9
      000162 01                    7608 	.db #0x01	; 1
      000163 3E                    7609 	.db #0x3e	; 62
      000164 41                    7610 	.db #0x41	; 65	'A'
      000165 41                    7611 	.db #0x41	; 65	'A'
      000166 51                    7612 	.db #0x51	; 81	'Q'
      000167 73                    7613 	.db #0x73	; 115	's'
      000168 7F                    7614 	.db #0x7f	; 127
      000169 08                    7615 	.db #0x08	; 8
      00016A 08                    7616 	.db #0x08	; 8
      00016B 08                    7617 	.db #0x08	; 8
      00016C 7F                    7618 	.db #0x7f	; 127
      00016D 00                    7619 	.db #0x00	; 0
      00016E 41                    7620 	.db #0x41	; 65	'A'
      00016F 7F                    7621 	.db #0x7f	; 127
      000170 41                    7622 	.db #0x41	; 65	'A'
      000171 00                    7623 	.db #0x00	; 0
      000172 20                    7624 	.db #0x20	; 32
      000173 40                    7625 	.db #0x40	; 64
      000174 41                    7626 	.db #0x41	; 65	'A'
      000175 3F                    7627 	.db #0x3f	; 63
      000176 01                    7628 	.db #0x01	; 1
      000177 7F                    7629 	.db #0x7f	; 127
      000178 08                    7630 	.db #0x08	; 8
      000179 14                    7631 	.db #0x14	; 20
      00017A 22                    7632 	.db #0x22	; 34
      00017B 41                    7633 	.db #0x41	; 65	'A'
      00017C 7F                    7634 	.db #0x7f	; 127
      00017D 40                    7635 	.db #0x40	; 64
      00017E 40                    7636 	.db #0x40	; 64
      00017F 40                    7637 	.db #0x40	; 64
      000180 40                    7638 	.db #0x40	; 64
      000181 7F                    7639 	.db #0x7f	; 127
      000182 02                    7640 	.db #0x02	; 2
      000183 1C                    7641 	.db #0x1c	; 28
      000184 02                    7642 	.db #0x02	; 2
      000185 7F                    7643 	.db #0x7f	; 127
      000186 7F                    7644 	.db #0x7f	; 127
      000187 04                    7645 	.db #0x04	; 4
      000188 08                    7646 	.db #0x08	; 8
      000189 10                    7647 	.db #0x10	; 16
      00018A 7F                    7648 	.db #0x7f	; 127
      00018B 3E                    7649 	.db #0x3e	; 62
      00018C 41                    7650 	.db #0x41	; 65	'A'
      00018D 41                    7651 	.db #0x41	; 65	'A'
      00018E 41                    7652 	.db #0x41	; 65	'A'
      00018F 3E                    7653 	.db #0x3e	; 62
      000190 7F                    7654 	.db #0x7f	; 127
      000191 09                    7655 	.db #0x09	; 9
      000192 09                    7656 	.db #0x09	; 9
      000193 09                    7657 	.db #0x09	; 9
      000194 06                    7658 	.db #0x06	; 6
      000195 3E                    7659 	.db #0x3e	; 62
      000196 41                    7660 	.db #0x41	; 65	'A'
      000197 51                    7661 	.db #0x51	; 81	'Q'
      000198 21                    7662 	.db #0x21	; 33
      000199 5E                    7663 	.db #0x5e	; 94
      00019A 7F                    7664 	.db #0x7f	; 127
      00019B 09                    7665 	.db #0x09	; 9
      00019C 19                    7666 	.db #0x19	; 25
      00019D 29                    7667 	.db #0x29	; 41
      00019E 46                    7668 	.db #0x46	; 70	'F'
      00019F 26                    7669 	.db #0x26	; 38
      0001A0 49                    7670 	.db #0x49	; 73	'I'
      0001A1 49                    7671 	.db #0x49	; 73	'I'
      0001A2 49                    7672 	.db #0x49	; 73	'I'
      0001A3 32                    7673 	.db #0x32	; 50	'2'
      0001A4 03                    7674 	.db #0x03	; 3
      0001A5 01                    7675 	.db #0x01	; 1
      0001A6 7F                    7676 	.db #0x7f	; 127
      0001A7 01                    7677 	.db #0x01	; 1
      0001A8 03                    7678 	.db #0x03	; 3
      0001A9 3F                    7679 	.db #0x3f	; 63
      0001AA 40                    7680 	.db #0x40	; 64
      0001AB 40                    7681 	.db #0x40	; 64
      0001AC 40                    7682 	.db #0x40	; 64
      0001AD 3F                    7683 	.db #0x3f	; 63
      0001AE 1F                    7684 	.db #0x1f	; 31
      0001AF 20                    7685 	.db #0x20	; 32
      0001B0 40                    7686 	.db #0x40	; 64
      0001B1 20                    7687 	.db #0x20	; 32
      0001B2 1F                    7688 	.db #0x1f	; 31
      0001B3 3F                    7689 	.db #0x3f	; 63
      0001B4 40                    7690 	.db #0x40	; 64
      0001B5 38                    7691 	.db #0x38	; 56	'8'
      0001B6 40                    7692 	.db #0x40	; 64
      0001B7 3F                    7693 	.db #0x3f	; 63
      0001B8 63                    7694 	.db #0x63	; 99	'c'
      0001B9 14                    7695 	.db #0x14	; 20
      0001BA 08                    7696 	.db #0x08	; 8
      0001BB 14                    7697 	.db #0x14	; 20
      0001BC 63                    7698 	.db #0x63	; 99	'c'
      0001BD 03                    7699 	.db #0x03	; 3
      0001BE 04                    7700 	.db #0x04	; 4
      0001BF 78                    7701 	.db #0x78	; 120	'x'
      0001C0 04                    7702 	.db #0x04	; 4
      0001C1 03                    7703 	.db #0x03	; 3
      0001C2 61                    7704 	.db #0x61	; 97	'a'
      0001C3 59                    7705 	.db #0x59	; 89	'Y'
      0001C4 49                    7706 	.db #0x49	; 73	'I'
      0001C5 4D                    7707 	.db #0x4d	; 77	'M'
      0001C6 43                    7708 	.db #0x43	; 67	'C'
      0001C7 00                    7709 	.db #0x00	; 0
      0001C8 7F                    7710 	.db #0x7f	; 127
      0001C9 41                    7711 	.db #0x41	; 65	'A'
      0001CA 41                    7712 	.db #0x41	; 65	'A'
      0001CB 41                    7713 	.db #0x41	; 65	'A'
      0001CC 02                    7714 	.db #0x02	; 2
      0001CD 04                    7715 	.db #0x04	; 4
      0001CE 08                    7716 	.db #0x08	; 8
      0001CF 10                    7717 	.db #0x10	; 16
      0001D0 20                    7718 	.db #0x20	; 32
      0001D1 00                    7719 	.db #0x00	; 0
      0001D2 41                    7720 	.db #0x41	; 65	'A'
      0001D3 41                    7721 	.db #0x41	; 65	'A'
      0001D4 41                    7722 	.db #0x41	; 65	'A'
      0001D5 7F                    7723 	.db #0x7f	; 127
      0001D6 04                    7724 	.db #0x04	; 4
      0001D7 02                    7725 	.db #0x02	; 2
      0001D8 01                    7726 	.db #0x01	; 1
      0001D9 02                    7727 	.db #0x02	; 2
      0001DA 04                    7728 	.db #0x04	; 4
      0001DB 40                    7729 	.db #0x40	; 64
      0001DC 40                    7730 	.db #0x40	; 64
      0001DD 40                    7731 	.db #0x40	; 64
      0001DE 40                    7732 	.db #0x40	; 64
      0001DF 40                    7733 	.db #0x40	; 64
      0001E0 00                    7734 	.db #0x00	; 0
      0001E1 03                    7735 	.db #0x03	; 3
      0001E2 07                    7736 	.db #0x07	; 7
      0001E3 08                    7737 	.db #0x08	; 8
      0001E4 00                    7738 	.db #0x00	; 0
      0001E5 20                    7739 	.db #0x20	; 32
      0001E6 54                    7740 	.db #0x54	; 84	'T'
      0001E7 54                    7741 	.db #0x54	; 84	'T'
      0001E8 78                    7742 	.db #0x78	; 120	'x'
      0001E9 40                    7743 	.db #0x40	; 64
      0001EA 7F                    7744 	.db #0x7f	; 127
      0001EB 28                    7745 	.db #0x28	; 40
      0001EC 44                    7746 	.db #0x44	; 68	'D'
      0001ED 44                    7747 	.db #0x44	; 68	'D'
      0001EE 38                    7748 	.db #0x38	; 56	'8'
      0001EF 38                    7749 	.db #0x38	; 56	'8'
      0001F0 44                    7750 	.db #0x44	; 68	'D'
      0001F1 44                    7751 	.db #0x44	; 68	'D'
      0001F2 44                    7752 	.db #0x44	; 68	'D'
      0001F3 28                    7753 	.db #0x28	; 40
      0001F4 38                    7754 	.db #0x38	; 56	'8'
      0001F5 44                    7755 	.db #0x44	; 68	'D'
      0001F6 44                    7756 	.db #0x44	; 68	'D'
      0001F7 28                    7757 	.db #0x28	; 40
      0001F8 7F                    7758 	.db #0x7f	; 127
      0001F9 38                    7759 	.db #0x38	; 56	'8'
      0001FA 54                    7760 	.db #0x54	; 84	'T'
      0001FB 54                    7761 	.db #0x54	; 84	'T'
      0001FC 54                    7762 	.db #0x54	; 84	'T'
      0001FD 18                    7763 	.db #0x18	; 24
      0001FE 00                    7764 	.db #0x00	; 0
      0001FF 08                    7765 	.db #0x08	; 8
      000200 7E                    7766 	.db #0x7e	; 126
      000201 09                    7767 	.db #0x09	; 9
      000202 02                    7768 	.db #0x02	; 2
      000203 18                    7769 	.db #0x18	; 24
      000204 A4                    7770 	.db #0xa4	; 164
      000205 A4                    7771 	.db #0xa4	; 164
      000206 9C                    7772 	.db #0x9c	; 156
      000207 78                    7773 	.db #0x78	; 120	'x'
      000208 7F                    7774 	.db #0x7f	; 127
      000209 08                    7775 	.db #0x08	; 8
      00020A 04                    7776 	.db #0x04	; 4
      00020B 04                    7777 	.db #0x04	; 4
      00020C 78                    7778 	.db #0x78	; 120	'x'
      00020D 00                    7779 	.db #0x00	; 0
      00020E 44                    7780 	.db #0x44	; 68	'D'
      00020F 7D                    7781 	.db #0x7d	; 125
      000210 40                    7782 	.db #0x40	; 64
      000211 00                    7783 	.db #0x00	; 0
      000212 20                    7784 	.db #0x20	; 32
      000213 40                    7785 	.db #0x40	; 64
      000214 40                    7786 	.db #0x40	; 64
      000215 3D                    7787 	.db #0x3d	; 61
      000216 00                    7788 	.db #0x00	; 0
      000217 7F                    7789 	.db #0x7f	; 127
      000218 10                    7790 	.db #0x10	; 16
      000219 28                    7791 	.db #0x28	; 40
      00021A 44                    7792 	.db #0x44	; 68	'D'
      00021B 00                    7793 	.db #0x00	; 0
      00021C 00                    7794 	.db #0x00	; 0
      00021D 41                    7795 	.db #0x41	; 65	'A'
      00021E 7F                    7796 	.db #0x7f	; 127
      00021F 40                    7797 	.db #0x40	; 64
      000220 00                    7798 	.db #0x00	; 0
      000221 7C                    7799 	.db #0x7c	; 124
      000222 04                    7800 	.db #0x04	; 4
      000223 78                    7801 	.db #0x78	; 120	'x'
      000224 04                    7802 	.db #0x04	; 4
      000225 78                    7803 	.db #0x78	; 120	'x'
      000226 7C                    7804 	.db #0x7c	; 124
      000227 08                    7805 	.db #0x08	; 8
      000228 04                    7806 	.db #0x04	; 4
      000229 04                    7807 	.db #0x04	; 4
      00022A 78                    7808 	.db #0x78	; 120	'x'
      00022B 38                    7809 	.db #0x38	; 56	'8'
      00022C 44                    7810 	.db #0x44	; 68	'D'
      00022D 44                    7811 	.db #0x44	; 68	'D'
      00022E 44                    7812 	.db #0x44	; 68	'D'
      00022F 38                    7813 	.db #0x38	; 56	'8'
      000230 FC                    7814 	.db #0xfc	; 252
      000231 18                    7815 	.db #0x18	; 24
      000232 24                    7816 	.db #0x24	; 36
      000233 24                    7817 	.db #0x24	; 36
      000234 18                    7818 	.db #0x18	; 24
      000235 18                    7819 	.db #0x18	; 24
      000236 24                    7820 	.db #0x24	; 36
      000237 24                    7821 	.db #0x24	; 36
      000238 18                    7822 	.db #0x18	; 24
      000239 FC                    7823 	.db #0xfc	; 252
      00023A 7C                    7824 	.db #0x7c	; 124
      00023B 08                    7825 	.db #0x08	; 8
      00023C 04                    7826 	.db #0x04	; 4
      00023D 04                    7827 	.db #0x04	; 4
      00023E 08                    7828 	.db #0x08	; 8
      00023F 48                    7829 	.db #0x48	; 72	'H'
      000240 54                    7830 	.db #0x54	; 84	'T'
      000241 54                    7831 	.db #0x54	; 84	'T'
      000242 54                    7832 	.db #0x54	; 84	'T'
      000243 24                    7833 	.db #0x24	; 36
      000244 04                    7834 	.db #0x04	; 4
      000245 04                    7835 	.db #0x04	; 4
      000246 3F                    7836 	.db #0x3f	; 63
      000247 44                    7837 	.db #0x44	; 68	'D'
      000248 24                    7838 	.db #0x24	; 36
      000249 3C                    7839 	.db #0x3c	; 60
      00024A 40                    7840 	.db #0x40	; 64
      00024B 40                    7841 	.db #0x40	; 64
      00024C 20                    7842 	.db #0x20	; 32
      00024D 7C                    7843 	.db #0x7c	; 124
      00024E 1C                    7844 	.db #0x1c	; 28
      00024F 20                    7845 	.db #0x20	; 32
      000250 40                    7846 	.db #0x40	; 64
      000251 20                    7847 	.db #0x20	; 32
      000252 1C                    7848 	.db #0x1c	; 28
      000253 3C                    7849 	.db #0x3c	; 60
      000254 40                    7850 	.db #0x40	; 64
      000255 30                    7851 	.db #0x30	; 48	'0'
      000256 40                    7852 	.db #0x40	; 64
      000257 3C                    7853 	.db #0x3c	; 60
      000258 44                    7854 	.db #0x44	; 68	'D'
      000259 28                    7855 	.db #0x28	; 40
      00025A 10                    7856 	.db #0x10	; 16
      00025B 28                    7857 	.db #0x28	; 40
      00025C 44                    7858 	.db #0x44	; 68	'D'
      00025D 4C                    7859 	.db #0x4c	; 76	'L'
      00025E 90                    7860 	.db #0x90	; 144
      00025F 90                    7861 	.db #0x90	; 144
      000260 90                    7862 	.db #0x90	; 144
      000261 7C                    7863 	.db #0x7c	; 124
      000262 44                    7864 	.db #0x44	; 68	'D'
      000263 64                    7865 	.db #0x64	; 100	'd'
      000264 54                    7866 	.db #0x54	; 84	'T'
      000265 4C                    7867 	.db #0x4c	; 76	'L'
      000266 44                    7868 	.db #0x44	; 68	'D'
      000267 00                    7869 	.db #0x00	; 0
      000268 08                    7870 	.db #0x08	; 8
      000269 36                    7871 	.db #0x36	; 54	'6'
      00026A 41                    7872 	.db #0x41	; 65	'A'
      00026B 00                    7873 	.db #0x00	; 0
      00026C 00                    7874 	.db #0x00	; 0
      00026D 00                    7875 	.db #0x00	; 0
      00026E 77                    7876 	.db #0x77	; 119	'w'
      00026F 00                    7877 	.db #0x00	; 0
      000270 00                    7878 	.db #0x00	; 0
      000271 00                    7879 	.db #0x00	; 0
      000272 41                    7880 	.db #0x41	; 65	'A'
      000273 36                    7881 	.db #0x36	; 54	'6'
      000274 08                    7882 	.db #0x08	; 8
      000275 00                    7883 	.db #0x00	; 0
      000276 02                    7884 	.db #0x02	; 2
      000277 01                    7885 	.db #0x01	; 1
      000278 02                    7886 	.db #0x02	; 2
      000279 04                    7887 	.db #0x04	; 4
      00027A 02                    7888 	.db #0x02	; 2
      00027B 3C                    7889 	.db #0x3c	; 60
      00027C 26                    7890 	.db #0x26	; 38
      00027D 23                    7891 	.db #0x23	; 35
      00027E 26                    7892 	.db #0x26	; 38
      00027F 3C                    7893 	.db #0x3c	; 60
      000280 1E                    7894 	.db #0x1e	; 30
      000281 A1                    7895 	.db #0xa1	; 161
      000282 A1                    7896 	.db #0xa1	; 161
      000283 61                    7897 	.db #0x61	; 97	'a'
      000284 12                    7898 	.db #0x12	; 18
      000285 3A                    7899 	.db #0x3a	; 58
      000286 40                    7900 	.db #0x40	; 64
      000287 40                    7901 	.db #0x40	; 64
      000288 20                    7902 	.db #0x20	; 32
      000289 7A                    7903 	.db #0x7a	; 122	'z'
      00028A 38                    7904 	.db #0x38	; 56	'8'
      00028B 54                    7905 	.db #0x54	; 84	'T'
      00028C 54                    7906 	.db #0x54	; 84	'T'
      00028D 55                    7907 	.db #0x55	; 85	'U'
      00028E 59                    7908 	.db #0x59	; 89	'Y'
      00028F 21                    7909 	.db #0x21	; 33
      000290 55                    7910 	.db #0x55	; 85	'U'
      000291 55                    7911 	.db #0x55	; 85	'U'
      000292 79                    7912 	.db #0x79	; 121	'y'
      000293 41                    7913 	.db #0x41	; 65	'A'
      000294 22                    7914 	.db #0x22	; 34
      000295 54                    7915 	.db #0x54	; 84	'T'
      000296 54                    7916 	.db #0x54	; 84	'T'
      000297 78                    7917 	.db #0x78	; 120	'x'
      000298 42                    7918 	.db #0x42	; 66	'B'
      000299 21                    7919 	.db #0x21	; 33
      00029A 55                    7920 	.db #0x55	; 85	'U'
      00029B 54                    7921 	.db #0x54	; 84	'T'
      00029C 78                    7922 	.db #0x78	; 120	'x'
      00029D 40                    7923 	.db #0x40	; 64
      00029E 20                    7924 	.db #0x20	; 32
      00029F 54                    7925 	.db #0x54	; 84	'T'
      0002A0 55                    7926 	.db #0x55	; 85	'U'
      0002A1 79                    7927 	.db #0x79	; 121	'y'
      0002A2 40                    7928 	.db #0x40	; 64
      0002A3 0C                    7929 	.db #0x0c	; 12
      0002A4 1E                    7930 	.db #0x1e	; 30
      0002A5 52                    7931 	.db #0x52	; 82	'R'
      0002A6 72                    7932 	.db #0x72	; 114	'r'
      0002A7 12                    7933 	.db #0x12	; 18
      0002A8 39                    7934 	.db #0x39	; 57	'9'
      0002A9 55                    7935 	.db #0x55	; 85	'U'
      0002AA 55                    7936 	.db #0x55	; 85	'U'
      0002AB 55                    7937 	.db #0x55	; 85	'U'
      0002AC 59                    7938 	.db #0x59	; 89	'Y'
      0002AD 39                    7939 	.db #0x39	; 57	'9'
      0002AE 54                    7940 	.db #0x54	; 84	'T'
      0002AF 54                    7941 	.db #0x54	; 84	'T'
      0002B0 54                    7942 	.db #0x54	; 84	'T'
      0002B1 59                    7943 	.db #0x59	; 89	'Y'
      0002B2 39                    7944 	.db #0x39	; 57	'9'
      0002B3 55                    7945 	.db #0x55	; 85	'U'
      0002B4 54                    7946 	.db #0x54	; 84	'T'
      0002B5 54                    7947 	.db #0x54	; 84	'T'
      0002B6 58                    7948 	.db #0x58	; 88	'X'
      0002B7 00                    7949 	.db #0x00	; 0
      0002B8 00                    7950 	.db #0x00	; 0
      0002B9 45                    7951 	.db #0x45	; 69	'E'
      0002BA 7C                    7952 	.db #0x7c	; 124
      0002BB 41                    7953 	.db #0x41	; 65	'A'
      0002BC 00                    7954 	.db #0x00	; 0
      0002BD 02                    7955 	.db #0x02	; 2
      0002BE 45                    7956 	.db #0x45	; 69	'E'
      0002BF 7D                    7957 	.db #0x7d	; 125
      0002C0 42                    7958 	.db #0x42	; 66	'B'
      0002C1 00                    7959 	.db #0x00	; 0
      0002C2 01                    7960 	.db #0x01	; 1
      0002C3 45                    7961 	.db #0x45	; 69	'E'
      0002C4 7C                    7962 	.db #0x7c	; 124
      0002C5 40                    7963 	.db #0x40	; 64
      0002C6 7D                    7964 	.db #0x7d	; 125
      0002C7 12                    7965 	.db #0x12	; 18
      0002C8 11                    7966 	.db #0x11	; 17
      0002C9 12                    7967 	.db #0x12	; 18
      0002CA 7D                    7968 	.db #0x7d	; 125
      0002CB F0                    7969 	.db #0xf0	; 240
      0002CC 28                    7970 	.db #0x28	; 40
      0002CD 25                    7971 	.db #0x25	; 37
      0002CE 28                    7972 	.db #0x28	; 40
      0002CF F0                    7973 	.db #0xf0	; 240
      0002D0 7C                    7974 	.db #0x7c	; 124
      0002D1 54                    7975 	.db #0x54	; 84	'T'
      0002D2 55                    7976 	.db #0x55	; 85	'U'
      0002D3 45                    7977 	.db #0x45	; 69	'E'
      0002D4 00                    7978 	.db #0x00	; 0
      0002D5 20                    7979 	.db #0x20	; 32
      0002D6 54                    7980 	.db #0x54	; 84	'T'
      0002D7 54                    7981 	.db #0x54	; 84	'T'
      0002D8 7C                    7982 	.db #0x7c	; 124
      0002D9 54                    7983 	.db #0x54	; 84	'T'
      0002DA 7C                    7984 	.db #0x7c	; 124
      0002DB 0A                    7985 	.db #0x0a	; 10
      0002DC 09                    7986 	.db #0x09	; 9
      0002DD 7F                    7987 	.db #0x7f	; 127
      0002DE 49                    7988 	.db #0x49	; 73	'I'
      0002DF 32                    7989 	.db #0x32	; 50	'2'
      0002E0 49                    7990 	.db #0x49	; 73	'I'
      0002E1 49                    7991 	.db #0x49	; 73	'I'
      0002E2 49                    7992 	.db #0x49	; 73	'I'
      0002E3 32                    7993 	.db #0x32	; 50	'2'
      0002E4 3A                    7994 	.db #0x3a	; 58
      0002E5 44                    7995 	.db #0x44	; 68	'D'
      0002E6 44                    7996 	.db #0x44	; 68	'D'
      0002E7 44                    7997 	.db #0x44	; 68	'D'
      0002E8 3A                    7998 	.db #0x3a	; 58
      0002E9 32                    7999 	.db #0x32	; 50	'2'
      0002EA 4A                    8000 	.db #0x4a	; 74	'J'
      0002EB 48                    8001 	.db #0x48	; 72	'H'
      0002EC 48                    8002 	.db #0x48	; 72	'H'
      0002ED 30                    8003 	.db #0x30	; 48	'0'
      0002EE 3A                    8004 	.db #0x3a	; 58
      0002EF 41                    8005 	.db #0x41	; 65	'A'
      0002F0 41                    8006 	.db #0x41	; 65	'A'
      0002F1 21                    8007 	.db #0x21	; 33
      0002F2 7A                    8008 	.db #0x7a	; 122	'z'
      0002F3 3A                    8009 	.db #0x3a	; 58
      0002F4 42                    8010 	.db #0x42	; 66	'B'
      0002F5 40                    8011 	.db #0x40	; 64
      0002F6 20                    8012 	.db #0x20	; 32
      0002F7 78                    8013 	.db #0x78	; 120	'x'
      0002F8 00                    8014 	.db #0x00	; 0
      0002F9 9D                    8015 	.db #0x9d	; 157
      0002FA A0                    8016 	.db #0xa0	; 160
      0002FB A0                    8017 	.db #0xa0	; 160
      0002FC 7D                    8018 	.db #0x7d	; 125
      0002FD 3D                    8019 	.db #0x3d	; 61
      0002FE 42                    8020 	.db #0x42	; 66	'B'
      0002FF 42                    8021 	.db #0x42	; 66	'B'
      000300 42                    8022 	.db #0x42	; 66	'B'
      000301 3D                    8023 	.db #0x3d	; 61
      000302 3D                    8024 	.db #0x3d	; 61
      000303 40                    8025 	.db #0x40	; 64
      000304 40                    8026 	.db #0x40	; 64
      000305 40                    8027 	.db #0x40	; 64
      000306 3D                    8028 	.db #0x3d	; 61
      000307 3C                    8029 	.db #0x3c	; 60
      000308 24                    8030 	.db #0x24	; 36
      000309 FF                    8031 	.db #0xff	; 255
      00030A 24                    8032 	.db #0x24	; 36
      00030B 24                    8033 	.db #0x24	; 36
      00030C 48                    8034 	.db #0x48	; 72	'H'
      00030D 7E                    8035 	.db #0x7e	; 126
      00030E 49                    8036 	.db #0x49	; 73	'I'
      00030F 43                    8037 	.db #0x43	; 67	'C'
      000310 66                    8038 	.db #0x66	; 102	'f'
      000311 2B                    8039 	.db #0x2b	; 43
      000312 2F                    8040 	.db #0x2f	; 47
      000313 FC                    8041 	.db #0xfc	; 252
      000314 2F                    8042 	.db #0x2f	; 47
      000315 2B                    8043 	.db #0x2b	; 43
      000316 FF                    8044 	.db #0xff	; 255
      000317 09                    8045 	.db #0x09	; 9
      000318 29                    8046 	.db #0x29	; 41
      000319 F6                    8047 	.db #0xf6	; 246
      00031A 20                    8048 	.db #0x20	; 32
      00031B C0                    8049 	.db #0xc0	; 192
      00031C 88                    8050 	.db #0x88	; 136
      00031D 7E                    8051 	.db #0x7e	; 126
      00031E 09                    8052 	.db #0x09	; 9
      00031F 03                    8053 	.db #0x03	; 3
      000320 20                    8054 	.db #0x20	; 32
      000321 54                    8055 	.db #0x54	; 84	'T'
      000322 54                    8056 	.db #0x54	; 84	'T'
      000323 79                    8057 	.db #0x79	; 121	'y'
      000324 41                    8058 	.db #0x41	; 65	'A'
      000325 00                    8059 	.db #0x00	; 0
      000326 00                    8060 	.db #0x00	; 0
      000327 44                    8061 	.db #0x44	; 68	'D'
      000328 7D                    8062 	.db #0x7d	; 125
      000329 41                    8063 	.db #0x41	; 65	'A'
      00032A 30                    8064 	.db #0x30	; 48	'0'
      00032B 48                    8065 	.db #0x48	; 72	'H'
      00032C 48                    8066 	.db #0x48	; 72	'H'
      00032D 4A                    8067 	.db #0x4a	; 74	'J'
      00032E 32                    8068 	.db #0x32	; 50	'2'
      00032F 38                    8069 	.db #0x38	; 56	'8'
      000330 40                    8070 	.db #0x40	; 64
      000331 40                    8071 	.db #0x40	; 64
      000332 22                    8072 	.db #0x22	; 34
      000333 7A                    8073 	.db #0x7a	; 122	'z'
      000334 00                    8074 	.db #0x00	; 0
      000335 7A                    8075 	.db #0x7a	; 122	'z'
      000336 0A                    8076 	.db #0x0a	; 10
      000337 0A                    8077 	.db #0x0a	; 10
      000338 72                    8078 	.db #0x72	; 114	'r'
      000339 7D                    8079 	.db #0x7d	; 125
      00033A 0D                    8080 	.db #0x0d	; 13
      00033B 19                    8081 	.db #0x19	; 25
      00033C 31                    8082 	.db #0x31	; 49	'1'
      00033D 7D                    8083 	.db #0x7d	; 125
      00033E 26                    8084 	.db #0x26	; 38
      00033F 29                    8085 	.db #0x29	; 41
      000340 29                    8086 	.db #0x29	; 41
      000341 2F                    8087 	.db #0x2f	; 47
      000342 28                    8088 	.db #0x28	; 40
      000343 26                    8089 	.db #0x26	; 38
      000344 29                    8090 	.db #0x29	; 41
      000345 29                    8091 	.db #0x29	; 41
      000346 29                    8092 	.db #0x29	; 41
      000347 26                    8093 	.db #0x26	; 38
      000348 30                    8094 	.db #0x30	; 48	'0'
      000349 48                    8095 	.db #0x48	; 72	'H'
      00034A 4D                    8096 	.db #0x4d	; 77	'M'
      00034B 40                    8097 	.db #0x40	; 64
      00034C 20                    8098 	.db #0x20	; 32
      00034D 38                    8099 	.db #0x38	; 56	'8'
      00034E 08                    8100 	.db #0x08	; 8
      00034F 08                    8101 	.db #0x08	; 8
      000350 08                    8102 	.db #0x08	; 8
      000351 08                    8103 	.db #0x08	; 8
      000352 08                    8104 	.db #0x08	; 8
      000353 08                    8105 	.db #0x08	; 8
      000354 08                    8106 	.db #0x08	; 8
      000355 08                    8107 	.db #0x08	; 8
      000356 38                    8108 	.db #0x38	; 56	'8'
      000357 2F                    8109 	.db #0x2f	; 47
      000358 10                    8110 	.db #0x10	; 16
      000359 C8                    8111 	.db #0xc8	; 200
      00035A AC                    8112 	.db #0xac	; 172
      00035B BA                    8113 	.db #0xba	; 186
      00035C 2F                    8114 	.db #0x2f	; 47
      00035D 10                    8115 	.db #0x10	; 16
      00035E 28                    8116 	.db #0x28	; 40
      00035F 34                    8117 	.db #0x34	; 52	'4'
      000360 FA                    8118 	.db #0xfa	; 250
      000361 00                    8119 	.db #0x00	; 0
      000362 00                    8120 	.db #0x00	; 0
      000363 7B                    8121 	.db #0x7b	; 123
      000364 00                    8122 	.db #0x00	; 0
      000365 00                    8123 	.db #0x00	; 0
      000366 08                    8124 	.db #0x08	; 8
      000367 14                    8125 	.db #0x14	; 20
      000368 2A                    8126 	.db #0x2a	; 42
      000369 14                    8127 	.db #0x14	; 20
      00036A 22                    8128 	.db #0x22	; 34
      00036B 22                    8129 	.db #0x22	; 34
      00036C 14                    8130 	.db #0x14	; 20
      00036D 2A                    8131 	.db #0x2a	; 42
      00036E 14                    8132 	.db #0x14	; 20
      00036F 08                    8133 	.db #0x08	; 8
      000370 AA                    8134 	.db #0xaa	; 170
      000371 00                    8135 	.db #0x00	; 0
      000372 55                    8136 	.db #0x55	; 85	'U'
      000373 00                    8137 	.db #0x00	; 0
      000374 AA                    8138 	.db #0xaa	; 170
      000375 AA                    8139 	.db #0xaa	; 170
      000376 55                    8140 	.db #0x55	; 85	'U'
      000377 AA                    8141 	.db #0xaa	; 170
      000378 55                    8142 	.db #0x55	; 85	'U'
      000379 AA                    8143 	.db #0xaa	; 170
      00037A 00                    8144 	.db #0x00	; 0
      00037B 00                    8145 	.db #0x00	; 0
      00037C 00                    8146 	.db #0x00	; 0
      00037D FF                    8147 	.db #0xff	; 255
      00037E 00                    8148 	.db #0x00	; 0
      00037F 10                    8149 	.db #0x10	; 16
      000380 10                    8150 	.db #0x10	; 16
      000381 10                    8151 	.db #0x10	; 16
      000382 FF                    8152 	.db #0xff	; 255
      000383 00                    8153 	.db #0x00	; 0
      000384 14                    8154 	.db #0x14	; 20
      000385 14                    8155 	.db #0x14	; 20
      000386 14                    8156 	.db #0x14	; 20
      000387 FF                    8157 	.db #0xff	; 255
      000388 00                    8158 	.db #0x00	; 0
      000389 10                    8159 	.db #0x10	; 16
      00038A 10                    8160 	.db #0x10	; 16
      00038B FF                    8161 	.db #0xff	; 255
      00038C 00                    8162 	.db #0x00	; 0
      00038D FF                    8163 	.db #0xff	; 255
      00038E 10                    8164 	.db #0x10	; 16
      00038F 10                    8165 	.db #0x10	; 16
      000390 F0                    8166 	.db #0xf0	; 240
      000391 10                    8167 	.db #0x10	; 16
      000392 F0                    8168 	.db #0xf0	; 240
      000393 14                    8169 	.db #0x14	; 20
      000394 14                    8170 	.db #0x14	; 20
      000395 14                    8171 	.db #0x14	; 20
      000396 FC                    8172 	.db #0xfc	; 252
      000397 00                    8173 	.db #0x00	; 0
      000398 14                    8174 	.db #0x14	; 20
      000399 14                    8175 	.db #0x14	; 20
      00039A F7                    8176 	.db #0xf7	; 247
      00039B 00                    8177 	.db #0x00	; 0
      00039C FF                    8178 	.db #0xff	; 255
      00039D 00                    8179 	.db #0x00	; 0
      00039E 00                    8180 	.db #0x00	; 0
      00039F FF                    8181 	.db #0xff	; 255
      0003A0 00                    8182 	.db #0x00	; 0
      0003A1 FF                    8183 	.db #0xff	; 255
      0003A2 14                    8184 	.db #0x14	; 20
      0003A3 14                    8185 	.db #0x14	; 20
      0003A4 F4                    8186 	.db #0xf4	; 244
      0003A5 04                    8187 	.db #0x04	; 4
      0003A6 FC                    8188 	.db #0xfc	; 252
      0003A7 14                    8189 	.db #0x14	; 20
      0003A8 14                    8190 	.db #0x14	; 20
      0003A9 17                    8191 	.db #0x17	; 23
      0003AA 10                    8192 	.db #0x10	; 16
      0003AB 1F                    8193 	.db #0x1f	; 31
      0003AC 10                    8194 	.db #0x10	; 16
      0003AD 10                    8195 	.db #0x10	; 16
      0003AE 1F                    8196 	.db #0x1f	; 31
      0003AF 10                    8197 	.db #0x10	; 16
      0003B0 1F                    8198 	.db #0x1f	; 31
      0003B1 14                    8199 	.db #0x14	; 20
      0003B2 14                    8200 	.db #0x14	; 20
      0003B3 14                    8201 	.db #0x14	; 20
      0003B4 1F                    8202 	.db #0x1f	; 31
      0003B5 00                    8203 	.db #0x00	; 0
      0003B6 10                    8204 	.db #0x10	; 16
      0003B7 10                    8205 	.db #0x10	; 16
      0003B8 10                    8206 	.db #0x10	; 16
      0003B9 F0                    8207 	.db #0xf0	; 240
      0003BA 00                    8208 	.db #0x00	; 0
      0003BB 00                    8209 	.db #0x00	; 0
      0003BC 00                    8210 	.db #0x00	; 0
      0003BD 00                    8211 	.db #0x00	; 0
      0003BE 1F                    8212 	.db #0x1f	; 31
      0003BF 10                    8213 	.db #0x10	; 16
      0003C0 10                    8214 	.db #0x10	; 16
      0003C1 10                    8215 	.db #0x10	; 16
      0003C2 10                    8216 	.db #0x10	; 16
      0003C3 1F                    8217 	.db #0x1f	; 31
      0003C4 10                    8218 	.db #0x10	; 16
      0003C5 10                    8219 	.db #0x10	; 16
      0003C6 10                    8220 	.db #0x10	; 16
      0003C7 10                    8221 	.db #0x10	; 16
      0003C8 F0                    8222 	.db #0xf0	; 240
      0003C9 10                    8223 	.db #0x10	; 16
      0003CA 00                    8224 	.db #0x00	; 0
      0003CB 00                    8225 	.db #0x00	; 0
      0003CC 00                    8226 	.db #0x00	; 0
      0003CD FF                    8227 	.db #0xff	; 255
      0003CE 10                    8228 	.db #0x10	; 16
      0003CF 10                    8229 	.db #0x10	; 16
      0003D0 10                    8230 	.db #0x10	; 16
      0003D1 10                    8231 	.db #0x10	; 16
      0003D2 10                    8232 	.db #0x10	; 16
      0003D3 10                    8233 	.db #0x10	; 16
      0003D4 10                    8234 	.db #0x10	; 16
      0003D5 10                    8235 	.db #0x10	; 16
      0003D6 10                    8236 	.db #0x10	; 16
      0003D7 FF                    8237 	.db #0xff	; 255
      0003D8 10                    8238 	.db #0x10	; 16
      0003D9 00                    8239 	.db #0x00	; 0
      0003DA 00                    8240 	.db #0x00	; 0
      0003DB 00                    8241 	.db #0x00	; 0
      0003DC FF                    8242 	.db #0xff	; 255
      0003DD 14                    8243 	.db #0x14	; 20
      0003DE 00                    8244 	.db #0x00	; 0
      0003DF 00                    8245 	.db #0x00	; 0
      0003E0 FF                    8246 	.db #0xff	; 255
      0003E1 00                    8247 	.db #0x00	; 0
      0003E2 FF                    8248 	.db #0xff	; 255
      0003E3 00                    8249 	.db #0x00	; 0
      0003E4 00                    8250 	.db #0x00	; 0
      0003E5 1F                    8251 	.db #0x1f	; 31
      0003E6 10                    8252 	.db #0x10	; 16
      0003E7 17                    8253 	.db #0x17	; 23
      0003E8 00                    8254 	.db #0x00	; 0
      0003E9 00                    8255 	.db #0x00	; 0
      0003EA FC                    8256 	.db #0xfc	; 252
      0003EB 04                    8257 	.db #0x04	; 4
      0003EC F4                    8258 	.db #0xf4	; 244
      0003ED 14                    8259 	.db #0x14	; 20
      0003EE 14                    8260 	.db #0x14	; 20
      0003EF 17                    8261 	.db #0x17	; 23
      0003F0 10                    8262 	.db #0x10	; 16
      0003F1 17                    8263 	.db #0x17	; 23
      0003F2 14                    8264 	.db #0x14	; 20
      0003F3 14                    8265 	.db #0x14	; 20
      0003F4 F4                    8266 	.db #0xf4	; 244
      0003F5 04                    8267 	.db #0x04	; 4
      0003F6 F4                    8268 	.db #0xf4	; 244
      0003F7 00                    8269 	.db #0x00	; 0
      0003F8 00                    8270 	.db #0x00	; 0
      0003F9 FF                    8271 	.db #0xff	; 255
      0003FA 00                    8272 	.db #0x00	; 0
      0003FB F7                    8273 	.db #0xf7	; 247
      0003FC 14                    8274 	.db #0x14	; 20
      0003FD 14                    8275 	.db #0x14	; 20
      0003FE 14                    8276 	.db #0x14	; 20
      0003FF 14                    8277 	.db #0x14	; 20
      000400 14                    8278 	.db #0x14	; 20
      000401 14                    8279 	.db #0x14	; 20
      000402 14                    8280 	.db #0x14	; 20
      000403 F7                    8281 	.db #0xf7	; 247
      000404 00                    8282 	.db #0x00	; 0
      000405 F7                    8283 	.db #0xf7	; 247
      000406 14                    8284 	.db #0x14	; 20
      000407 14                    8285 	.db #0x14	; 20
      000408 14                    8286 	.db #0x14	; 20
      000409 17                    8287 	.db #0x17	; 23
      00040A 14                    8288 	.db #0x14	; 20
      00040B 10                    8289 	.db #0x10	; 16
      00040C 10                    8290 	.db #0x10	; 16
      00040D 1F                    8291 	.db #0x1f	; 31
      00040E 10                    8292 	.db #0x10	; 16
      00040F 1F                    8293 	.db #0x1f	; 31
      000410 14                    8294 	.db #0x14	; 20
      000411 14                    8295 	.db #0x14	; 20
      000412 14                    8296 	.db #0x14	; 20
      000413 F4                    8297 	.db #0xf4	; 244
      000414 14                    8298 	.db #0x14	; 20
      000415 10                    8299 	.db #0x10	; 16
      000416 10                    8300 	.db #0x10	; 16
      000417 F0                    8301 	.db #0xf0	; 240
      000418 10                    8302 	.db #0x10	; 16
      000419 F0                    8303 	.db #0xf0	; 240
      00041A 00                    8304 	.db #0x00	; 0
      00041B 00                    8305 	.db #0x00	; 0
      00041C 1F                    8306 	.db #0x1f	; 31
      00041D 10                    8307 	.db #0x10	; 16
      00041E 1F                    8308 	.db #0x1f	; 31
      00041F 00                    8309 	.db #0x00	; 0
      000420 00                    8310 	.db #0x00	; 0
      000421 00                    8311 	.db #0x00	; 0
      000422 1F                    8312 	.db #0x1f	; 31
      000423 14                    8313 	.db #0x14	; 20
      000424 00                    8314 	.db #0x00	; 0
      000425 00                    8315 	.db #0x00	; 0
      000426 00                    8316 	.db #0x00	; 0
      000427 FC                    8317 	.db #0xfc	; 252
      000428 14                    8318 	.db #0x14	; 20
      000429 00                    8319 	.db #0x00	; 0
      00042A 00                    8320 	.db #0x00	; 0
      00042B F0                    8321 	.db #0xf0	; 240
      00042C 10                    8322 	.db #0x10	; 16
      00042D F0                    8323 	.db #0xf0	; 240
      00042E 10                    8324 	.db #0x10	; 16
      00042F 10                    8325 	.db #0x10	; 16
      000430 FF                    8326 	.db #0xff	; 255
      000431 10                    8327 	.db #0x10	; 16
      000432 FF                    8328 	.db #0xff	; 255
      000433 14                    8329 	.db #0x14	; 20
      000434 14                    8330 	.db #0x14	; 20
      000435 14                    8331 	.db #0x14	; 20
      000436 FF                    8332 	.db #0xff	; 255
      000437 14                    8333 	.db #0x14	; 20
      000438 10                    8334 	.db #0x10	; 16
      000439 10                    8335 	.db #0x10	; 16
      00043A 10                    8336 	.db #0x10	; 16
      00043B 1F                    8337 	.db #0x1f	; 31
      00043C 00                    8338 	.db #0x00	; 0
      00043D 00                    8339 	.db #0x00	; 0
      00043E 00                    8340 	.db #0x00	; 0
      00043F 00                    8341 	.db #0x00	; 0
      000440 F0                    8342 	.db #0xf0	; 240
      000441 10                    8343 	.db #0x10	; 16
      000442 FF                    8344 	.db #0xff	; 255
      000443 FF                    8345 	.db #0xff	; 255
      000444 FF                    8346 	.db #0xff	; 255
      000445 FF                    8347 	.db #0xff	; 255
      000446 FF                    8348 	.db #0xff	; 255
      000447 F0                    8349 	.db #0xf0	; 240
      000448 F0                    8350 	.db #0xf0	; 240
      000449 F0                    8351 	.db #0xf0	; 240
      00044A F0                    8352 	.db #0xf0	; 240
      00044B F0                    8353 	.db #0xf0	; 240
      00044C FF                    8354 	.db #0xff	; 255
      00044D FF                    8355 	.db #0xff	; 255
      00044E FF                    8356 	.db #0xff	; 255
      00044F 00                    8357 	.db #0x00	; 0
      000450 00                    8358 	.db #0x00	; 0
      000451 00                    8359 	.db #0x00	; 0
      000452 00                    8360 	.db #0x00	; 0
      000453 00                    8361 	.db #0x00	; 0
      000454 FF                    8362 	.db #0xff	; 255
      000455 FF                    8363 	.db #0xff	; 255
      000456 0F                    8364 	.db #0x0f	; 15
      000457 0F                    8365 	.db #0x0f	; 15
      000458 0F                    8366 	.db #0x0f	; 15
      000459 0F                    8367 	.db #0x0f	; 15
      00045A 0F                    8368 	.db #0x0f	; 15
      00045B 38                    8369 	.db #0x38	; 56	'8'
      00045C 44                    8370 	.db #0x44	; 68	'D'
      00045D 44                    8371 	.db #0x44	; 68	'D'
      00045E 38                    8372 	.db #0x38	; 56	'8'
      00045F 44                    8373 	.db #0x44	; 68	'D'
      000460 FC                    8374 	.db #0xfc	; 252
      000461 4A                    8375 	.db #0x4a	; 74	'J'
      000462 4A                    8376 	.db #0x4a	; 74	'J'
      000463 4A                    8377 	.db #0x4a	; 74	'J'
      000464 34                    8378 	.db #0x34	; 52	'4'
      000465 7E                    8379 	.db #0x7e	; 126
      000466 02                    8380 	.db #0x02	; 2
      000467 02                    8381 	.db #0x02	; 2
      000468 06                    8382 	.db #0x06	; 6
      000469 06                    8383 	.db #0x06	; 6
      00046A 02                    8384 	.db #0x02	; 2
      00046B 7E                    8385 	.db #0x7e	; 126
      00046C 02                    8386 	.db #0x02	; 2
      00046D 7E                    8387 	.db #0x7e	; 126
      00046E 02                    8388 	.db #0x02	; 2
      00046F 63                    8389 	.db #0x63	; 99	'c'
      000470 55                    8390 	.db #0x55	; 85	'U'
      000471 49                    8391 	.db #0x49	; 73	'I'
      000472 41                    8392 	.db #0x41	; 65	'A'
      000473 63                    8393 	.db #0x63	; 99	'c'
      000474 38                    8394 	.db #0x38	; 56	'8'
      000475 44                    8395 	.db #0x44	; 68	'D'
      000476 44                    8396 	.db #0x44	; 68	'D'
      000477 3C                    8397 	.db #0x3c	; 60
      000478 04                    8398 	.db #0x04	; 4
      000479 40                    8399 	.db #0x40	; 64
      00047A 7E                    8400 	.db #0x7e	; 126
      00047B 20                    8401 	.db #0x20	; 32
      00047C 1E                    8402 	.db #0x1e	; 30
      00047D 20                    8403 	.db #0x20	; 32
      00047E 06                    8404 	.db #0x06	; 6
      00047F 02                    8405 	.db #0x02	; 2
      000480 7E                    8406 	.db #0x7e	; 126
      000481 02                    8407 	.db #0x02	; 2
      000482 02                    8408 	.db #0x02	; 2
      000483 99                    8409 	.db #0x99	; 153
      000484 A5                    8410 	.db #0xa5	; 165
      000485 E7                    8411 	.db #0xe7	; 231
      000486 A5                    8412 	.db #0xa5	; 165
      000487 99                    8413 	.db #0x99	; 153
      000488 1C                    8414 	.db #0x1c	; 28
      000489 2A                    8415 	.db #0x2a	; 42
      00048A 49                    8416 	.db #0x49	; 73	'I'
      00048B 2A                    8417 	.db #0x2a	; 42
      00048C 1C                    8418 	.db #0x1c	; 28
      00048D 4C                    8419 	.db #0x4c	; 76	'L'
      00048E 72                    8420 	.db #0x72	; 114	'r'
      00048F 01                    8421 	.db #0x01	; 1
      000490 72                    8422 	.db #0x72	; 114	'r'
      000491 4C                    8423 	.db #0x4c	; 76	'L'
      000492 30                    8424 	.db #0x30	; 48	'0'
      000493 4A                    8425 	.db #0x4a	; 74	'J'
      000494 4D                    8426 	.db #0x4d	; 77	'M'
      000495 4D                    8427 	.db #0x4d	; 77	'M'
      000496 30                    8428 	.db #0x30	; 48	'0'
      000497 30                    8429 	.db #0x30	; 48	'0'
      000498 48                    8430 	.db #0x48	; 72	'H'
      000499 78                    8431 	.db #0x78	; 120	'x'
      00049A 48                    8432 	.db #0x48	; 72	'H'
      00049B 30                    8433 	.db #0x30	; 48	'0'
      00049C BC                    8434 	.db #0xbc	; 188
      00049D 62                    8435 	.db #0x62	; 98	'b'
      00049E 5A                    8436 	.db #0x5a	; 90	'Z'
      00049F 46                    8437 	.db #0x46	; 70	'F'
      0004A0 3D                    8438 	.db #0x3d	; 61
      0004A1 3E                    8439 	.db #0x3e	; 62
      0004A2 49                    8440 	.db #0x49	; 73	'I'
      0004A3 49                    8441 	.db #0x49	; 73	'I'
      0004A4 49                    8442 	.db #0x49	; 73	'I'
      0004A5 00                    8443 	.db #0x00	; 0
      0004A6 7E                    8444 	.db #0x7e	; 126
      0004A7 01                    8445 	.db #0x01	; 1
      0004A8 01                    8446 	.db #0x01	; 1
      0004A9 01                    8447 	.db #0x01	; 1
      0004AA 7E                    8448 	.db #0x7e	; 126
      0004AB 2A                    8449 	.db #0x2a	; 42
      0004AC 2A                    8450 	.db #0x2a	; 42
      0004AD 2A                    8451 	.db #0x2a	; 42
      0004AE 2A                    8452 	.db #0x2a	; 42
      0004AF 2A                    8453 	.db #0x2a	; 42
      0004B0 44                    8454 	.db #0x44	; 68	'D'
      0004B1 44                    8455 	.db #0x44	; 68	'D'
      0004B2 5F                    8456 	.db #0x5f	; 95
      0004B3 44                    8457 	.db #0x44	; 68	'D'
      0004B4 44                    8458 	.db #0x44	; 68	'D'
      0004B5 40                    8459 	.db #0x40	; 64
      0004B6 51                    8460 	.db #0x51	; 81	'Q'
      0004B7 4A                    8461 	.db #0x4a	; 74	'J'
      0004B8 44                    8462 	.db #0x44	; 68	'D'
      0004B9 40                    8463 	.db #0x40	; 64
      0004BA 40                    8464 	.db #0x40	; 64
      0004BB 44                    8465 	.db #0x44	; 68	'D'
      0004BC 4A                    8466 	.db #0x4a	; 74	'J'
      0004BD 51                    8467 	.db #0x51	; 81	'Q'
      0004BE 40                    8468 	.db #0x40	; 64
      0004BF 00                    8469 	.db #0x00	; 0
      0004C0 00                    8470 	.db #0x00	; 0
      0004C1 FF                    8471 	.db #0xff	; 255
      0004C2 01                    8472 	.db #0x01	; 1
      0004C3 03                    8473 	.db #0x03	; 3
      0004C4 E0                    8474 	.db #0xe0	; 224
      0004C5 80                    8475 	.db #0x80	; 128
      0004C6 FF                    8476 	.db #0xff	; 255
      0004C7 00                    8477 	.db #0x00	; 0
      0004C8 00                    8478 	.db #0x00	; 0
      0004C9 08                    8479 	.db #0x08	; 8
      0004CA 08                    8480 	.db #0x08	; 8
      0004CB 6B                    8481 	.db #0x6b	; 107	'k'
      0004CC 6B                    8482 	.db #0x6b	; 107	'k'
      0004CD 08                    8483 	.db #0x08	; 8
      0004CE 36                    8484 	.db #0x36	; 54	'6'
      0004CF 12                    8485 	.db #0x12	; 18
      0004D0 36                    8486 	.db #0x36	; 54	'6'
      0004D1 24                    8487 	.db #0x24	; 36
      0004D2 36                    8488 	.db #0x36	; 54	'6'
      0004D3 06                    8489 	.db #0x06	; 6
      0004D4 0F                    8490 	.db #0x0f	; 15
      0004D5 09                    8491 	.db #0x09	; 9
      0004D6 0F                    8492 	.db #0x0f	; 15
      0004D7 06                    8493 	.db #0x06	; 6
      0004D8 00                    8494 	.db #0x00	; 0
      0004D9 00                    8495 	.db #0x00	; 0
      0004DA 18                    8496 	.db #0x18	; 24
      0004DB 18                    8497 	.db #0x18	; 24
      0004DC 00                    8498 	.db #0x00	; 0
      0004DD 00                    8499 	.db #0x00	; 0
      0004DE 00                    8500 	.db #0x00	; 0
      0004DF 10                    8501 	.db #0x10	; 16
      0004E0 10                    8502 	.db #0x10	; 16
      0004E1 00                    8503 	.db #0x00	; 0
      0004E2 30                    8504 	.db #0x30	; 48	'0'
      0004E3 40                    8505 	.db #0x40	; 64
      0004E4 FF                    8506 	.db #0xff	; 255
      0004E5 01                    8507 	.db #0x01	; 1
      0004E6 01                    8508 	.db #0x01	; 1
      0004E7 00                    8509 	.db #0x00	; 0
      0004E8 1F                    8510 	.db #0x1f	; 31
      0004E9 01                    8511 	.db #0x01	; 1
      0004EA 01                    8512 	.db #0x01	; 1
      0004EB 1E                    8513 	.db #0x1e	; 30
      0004EC 00                    8514 	.db #0x00	; 0
      0004ED 19                    8515 	.db #0x19	; 25
      0004EE 1D                    8516 	.db #0x1d	; 29
      0004EF 17                    8517 	.db #0x17	; 23
      0004F0 12                    8518 	.db #0x12	; 18
      0004F1 00                    8519 	.db #0x00	; 0
      0004F2 3C                    8520 	.db #0x3c	; 60
      0004F3 3C                    8521 	.db #0x3c	; 60
      0004F4 3C                    8522 	.db #0x3c	; 60
      0004F5 3C                    8523 	.db #0x3c	; 60
      0004F6 00                    8524 	.db #0x00	; 0
      0004F7 00                    8525 	.db #0x00	; 0
      0004F8 00                    8526 	.db #0x00	; 0
      0004F9 00                    8527 	.db #0x00	; 0
      0004FA 00                    8528 	.db #0x00	; 0
      0004FB                       8529 _keypad:
      0004FB 31                    8530 	.db #0x31	; 49	'1'
      0004FC 34                    8531 	.db #0x34	; 52	'4'
      0004FD 37                    8532 	.db #0x37	; 55	'7'
      0004FE 45                    8533 	.db #0x45	; 69	'E'
      0004FF 32                    8534 	.db #0x32	; 50	'2'
      000500 35                    8535 	.db #0x35	; 53	'5'
      000501 38                    8536 	.db #0x38	; 56	'8'
      000502 30                    8537 	.db #0x30	; 48	'0'
      000503 33                    8538 	.db #0x33	; 51	'3'
      000504 36                    8539 	.db #0x36	; 54	'6'
      000505 39                    8540 	.db #0x39	; 57	'9'
      000506 46                    8541 	.db #0x46	; 70	'F'
      000507 41                    8542 	.db #0x41	; 65	'A'
      000508 42                    8543 	.db #0x42	; 66	'B'
      000509 43                    8544 	.db #0x43	; 67	'C'
      00050A 44                    8545 	.db #0x44	; 68	'D'
                                   8546 	.area CONST   (CODE)
      00050B                       8547 ___str_0:
      00050B 3A                    8548 	.ascii ":"
      00050C 00                    8549 	.db 0x00
                                   8550 	.area CSEG    (CODE)
                                   8551 	.area CONST   (CODE)
      00050D                       8552 ___str_1:
      00050D 30 78                 8553 	.ascii "0x"
      00050F 00                    8554 	.db 0x00
                                   8555 	.area CSEG    (CODE)
                                   8556 	.area CONST   (CODE)
      000510                       8557 ___str_2:
      000510 0A                    8558 	.db 0x0a
      000511 20 20 20 49 6E 76 61  8559 	.ascii "   Invalid"
             6C 69 64
      00051B 0A                    8560 	.db 0x0a
      00051C 0A                    8561 	.db 0x0a
      00051D 00                    8562 	.db 0x00
                                   8563 	.area CSEG    (CODE)
                                   8564 	.area CONST   (CODE)
      00051E                       8565 ___str_3:
      00051E 20 20 20 20 49 6E 70  8566 	.ascii "    Input"
             75 74
      000527 00                    8567 	.db 0x00
                                   8568 	.area CSEG    (CODE)
                                   8569 	.area CONST   (CODE)
      000528                       8570 ___str_4:
      000528 0A                    8571 	.db 0x0a
      000529 53 65 6C 65 63 74 20  8572 	.ascii "Select Data"
             44 61 74 61
      000534 0A                    8573 	.db 0x0a
      000535 54 79 70 65 3A        8574 	.ascii "Type:"
      00053A 0A                    8575 	.db 0x0a
      00053B 0A                    8576 	.db 0x0a
      00053C 00                    8577 	.db 0x00
                                   8578 	.area CSEG    (CODE)
                                   8579 	.area CONST   (CODE)
      00053D                       8580 ___str_5:
      00053D 28 31 29 20 42 79 74  8581 	.ascii "(1) Byte"
             65
      000545 0A                    8582 	.db 0x0a
      000546 00                    8583 	.db 0x00
                                   8584 	.area CSEG    (CODE)
                                   8585 	.area CONST   (CODE)
      000547                       8586 ___str_6:
      000547 28 32 29 20 57 6F 72  8587 	.ascii "(2) Word"
             64
      00054F 0A                    8588 	.db 0x0a
      000550 00                    8589 	.db 0x00
                                   8590 	.area CSEG    (CODE)
                                   8591 	.area CONST   (CODE)
      000551                       8592 ___str_7:
      000551 28 33 29 20 44 6F 75  8593 	.ascii "(3) Double"
             62 6C 65
      00055B 0A                    8594 	.db 0x0a
      00055C 20 20 20 20 57 6F 72  8595 	.ascii "    Word"
             64
      000564 0A                    8596 	.db 0x0a
      000565 0A                    8597 	.db 0x0a
      000566 20 20 5F              8598 	.ascii "  _"
      000569 00                    8599 	.db 0x00
                                   8600 	.area CSEG    (CODE)
                                   8601 	.area CONST   (CODE)
      00056A                       8602 ___str_8:
      00056A 0A                    8603 	.db 0x0a
      00056B 45 6E 74 65 72 20 44  8604 	.ascii "Enter Data"
             61 74 61
      000575 0A                    8605 	.db 0x0a
      000576 53 69 7A 65 3A        8606 	.ascii "Size:"
      00057B 0A                    8607 	.db 0x0a
      00057C 0A                    8608 	.db 0x0a
      00057D 20 20 30 78 5F 5F 5F  8609 	.ascii "  0x____"
             5F
      000585 00                    8610 	.db 0x00
                                   8611 	.area CSEG    (CODE)
                                   8612 	.area CONST   (CODE)
      000586                       8613 ___str_9:
      000586 0A                    8614 	.db 0x0a
      000587 57 72 69 74 69 6E 67  8615 	.ascii "Writing 0x55"
             20 30 78 35 35
      000593 0A                    8616 	.db 0x0a
      000594 74 6F 20 61 6C 6C     8617 	.ascii "to all"
      00059A 0A                    8618 	.db 0x0a
      00059B 65 78 74 65 72 6E 61  8619 	.ascii "external RAM"
             6C 20 52 41 4D
      0005A7 0A                    8620 	.db 0x0a
      0005A8 6C 6F 63 61 74 69 6F  8621 	.ascii "locations."
             6E 73 2E
      0005B2 0A                    8622 	.db 0x0a
      0005B3 0A                    8623 	.db 0x0a
      0005B4 00                    8624 	.db 0x00
                                   8625 	.area CSEG    (CODE)
                                   8626 	.area CONST   (CODE)
      0005B5                       8627 ___str_10:
      0005B5 57 72 69 74 65        8628 	.ascii "Write"
      0005BA 0A                    8629 	.db 0x0a
      0005BB 63 6F 6D 70 6C 65 74  8630 	.ascii "complete."
             65 2E
      0005C4 0A                    8631 	.db 0x0a
      0005C5 00                    8632 	.db 0x00
                                   8633 	.area CSEG    (CODE)
                                   8634 	.area CONST   (CODE)
      0005C6                       8635 ___str_11:
      0005C6 0A                    8636 	.db 0x0a
      0005C7 56 65 72 69 66 79 69  8637 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005D4 0A                    8638 	.db 0x0a
      0005D5 52 41 4D 20 6C 6F 63  8639 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0005E2 0A                    8640 	.db 0x0a
      0005E3 65 71 75 61 6C 20 30  8641 	.ascii "equal 0x55."
             78 35 35 2E
      0005EE 0A                    8642 	.db 0x0a
      0005EF 0A                    8643 	.db 0x0a
      0005F0 00                    8644 	.db 0x00
                                   8645 	.area CSEG    (CODE)
                                   8646 	.area CONST   (CODE)
      0005F1                       8647 ___str_12:
      0005F1 31 73 74 20 52 41 4D  8648 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      0005FE 0A                    8649 	.db 0x0a
      0005FF 75 6E 73 75 63 63 65  8650 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      00060C 0A                    8651 	.db 0x0a
      00060D 0A                    8652 	.db 0x0a
      00060E 00                    8653 	.db 0x00
                                   8654 	.area CSEG    (CODE)
                                   8655 	.area CONST   (CODE)
      00060F                       8656 ___str_13:
      00060F 45 72 72 6F 72 20 61  8657 	.ascii "Error at:"
             74 3A
      000618 0A                    8658 	.db 0x0a
      000619 00                    8659 	.db 0x00
                                   8660 	.area CSEG    (CODE)
                                   8661 	.area CONST   (CODE)
      00061A                       8662 ___str_14:
      00061A 3A 20 30 78           8663 	.ascii ": 0x"
      00061E 00                    8664 	.db 0x00
                                   8665 	.area CSEG    (CODE)
                                   8666 	.area CONST   (CODE)
      00061F                       8667 ___str_15:
      00061F 52 65 74 75 72 6E 69  8668 	.ascii "Returning to"
             6E 67 20 74 6F
      00062B 0A                    8669 	.db 0x0a
      00062C 6D 61 69 6E 20 6D 65  8670 	.ascii "main menu."
             6E 75 2E
      000636 00                    8671 	.db 0x00
                                   8672 	.area CSEG    (CODE)
                                   8673 	.area CONST   (CODE)
      000637                       8674 ___str_16:
      000637 31 73 74 20 52 41 4D  8675 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000644 0A                    8676 	.db 0x0a
      000645 73 75 63 63 65 73 73  8677 	.ascii "successful."
             66 75 6C 2E
      000650 0A                    8678 	.db 0x0a
      000651 0A                    8679 	.db 0x0a
      000652 00                    8680 	.db 0x00
                                   8681 	.area CSEG    (CODE)
                                   8682 	.area CONST   (CODE)
      000653                       8683 ___str_17:
      000653 0A                    8684 	.db 0x0a
      000654 57 72 69 74 69 6E 67  8685 	.ascii "Writing 0xAA"
             20 30 78 41 41
      000660 0A                    8686 	.db 0x0a
      000661 74 6F 20 61 6C 6C     8687 	.ascii "to all"
      000667 0A                    8688 	.db 0x0a
      000668 65 78 74 65 72 6E 61  8689 	.ascii "external RAM"
             6C 20 52 41 4D
      000674 0A                    8690 	.db 0x0a
      000675 6C 6F 63 61 74 69 6F  8691 	.ascii "locations."
             6E 73 2E
      00067F 0A                    8692 	.db 0x0a
      000680 0A                    8693 	.db 0x0a
      000681 00                    8694 	.db 0x00
                                   8695 	.area CSEG    (CODE)
                                   8696 	.area CONST   (CODE)
      000682                       8697 ___str_18:
      000682 0A                    8698 	.db 0x0a
      000683 56 65 72 69 66 79 69  8699 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      000690 0A                    8700 	.db 0x0a
      000691 52 41 4D 20 6C 6F 63  8701 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      00069E 0A                    8702 	.db 0x0a
      00069F 65 71 75 61 6C 20 30  8703 	.ascii "equal 0xAA."
             78 41 41 2E
      0006AA 0A                    8704 	.db 0x0a
      0006AB 0A                    8705 	.db 0x0a
      0006AC 00                    8706 	.db 0x00
                                   8707 	.area CSEG    (CODE)
                                   8708 	.area CONST   (CODE)
      0006AD                       8709 ___str_19:
      0006AD 32 6E 64 20 52 41 4D  8710 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006BA 0A                    8711 	.db 0x0a
      0006BB 75 6E 73 75 63 63 65  8712 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006C8 0A                    8713 	.db 0x0a
      0006C9 0A                    8714 	.db 0x0a
      0006CA 00                    8715 	.db 0x00
                                   8716 	.area CSEG    (CODE)
                                   8717 	.area CONST   (CODE)
      0006CB                       8718 ___str_20:
      0006CB 32 6E 64 20 52 41 4D  8719 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006D8 0A                    8720 	.db 0x0a
      0006D9 73 75 63 63 65 73 73  8721 	.ascii "successful."
             66 75 6C 2E
      0006E4 0A                    8722 	.db 0x0a
      0006E5 0A                    8723 	.db 0x0a
      0006E6 00                    8724 	.db 0x00
                                   8725 	.area CSEG    (CODE)
                                   8726 	.area CONST   (CODE)
      0006E7                       8727 ___str_21:
      0006E7 52 41 4D 20 63 68 65  8728 	.ascii "RAM check"
             63 6B
      0006F0 0A                    8729 	.db 0x0a
      0006F1 63 6F 6D 70 6C 65 74  8730 	.ascii "complete."
             65 2E
      0006FA 0A                    8731 	.db 0x0a
      0006FB 0A                    8732 	.db 0x0a
      0006FC 00                    8733 	.db 0x00
                                   8734 	.area CSEG    (CODE)
                                   8735 	.area CONST   (CODE)
      0006FD                       8736 ___str_22:
      0006FD 0A                    8737 	.db 0x0a
      0006FE 45 6E 74 65 72 20 73  8738 	.ascii "Enter source"
             6F 75 72 63 65
      00070A 0A                    8739 	.db 0x0a
      00070B 73 74 61 72 74 69 6E  8740 	.ascii "starting RAM"
             67 20 52 41 4D
      000717 0A                    8741 	.db 0x0a
      000718 61 64 64 72 65 73 73  8742 	.ascii "address:"
             3A
      000720 0A                    8743 	.db 0x0a
      000721 0A                    8744 	.db 0x0a
      000722 0A                    8745 	.db 0x0a
      000723 20 20 30 78 5F 5F 5F  8746 	.ascii "  0x____"
             5F
      00072B 00                    8747 	.db 0x00
                                   8748 	.area CSEG    (CODE)
                                   8749 	.area CONST   (CODE)
      00072C                       8750 ___str_23:
      00072C 0A                    8751 	.db 0x0a
      00072D 45 6E 74 65 72        8752 	.ascii "Enter"
      000732 0A                    8753 	.db 0x0a
      000733 64 65 73 74 69 6E 61  8754 	.ascii "destination"
             74 69 6F 6E
      00073E 0A                    8755 	.db 0x0a
      00073F 73 74 61 72 74 69 6E  8756 	.ascii "starting RAM"
             67 20 52 41 4D
      00074B 0A                    8757 	.db 0x0a
      00074C 61 64 64 72 65 73 73  8758 	.ascii "address:"
             3A
      000754 0A                    8759 	.db 0x0a
      000755 0A                    8760 	.db 0x0a
      000756 0A                    8761 	.db 0x0a
      000757 20 20 30 78 5F 5F 5F  8762 	.ascii "  0x____"
             5F
      00075F 00                    8763 	.db 0x00
                                   8764 	.area CSEG    (CODE)
                                   8765 	.area CONST   (CODE)
      000760                       8766 ___str_24:
      000760 0A                    8767 	.db 0x0a
      000761 4D 6F 76 65 20 63 6F  8768 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      00076F 0A                    8769 	.db 0x0a
      000770 0A                    8770 	.db 0x0a
      000771 00                    8771 	.db 0x00
                                   8772 	.area CSEG    (CODE)
                                   8773 	.area CONST   (CODE)
      000772                       8774 ___str_25:
      000772 0A                    8775 	.db 0x0a
      000773 45 6E 74 65 72        8776 	.ascii "Enter"
      000778 0A                    8777 	.db 0x0a
      000779 73 74 61 72 74 69 6E  8778 	.ascii "starting RAM"
             67 20 52 41 4D
      000785 0A                    8779 	.db 0x0a
      000786 61 64 64 72 65 73 73  8780 	.ascii "address:"
             3A
      00078E 0A                    8781 	.db 0x0a
      00078F 0A                    8782 	.db 0x0a
      000790 20 20 30 78 5F 5F 5F  8783 	.ascii "  0x____"
             5F
      000798 00                    8784 	.db 0x00
                                   8785 	.area CSEG    (CODE)
                                   8786 	.area CONST   (CODE)
      000799                       8787 ___str_26:
      000799 0A                    8788 	.db 0x0a
      00079A 45 6E 74 65 72 20 73  8789 	.ascii "Enter search"
             65 61 72 63 68
      0007A6 0A                    8790 	.db 0x0a
      0007A7 76 61 6C 75 65 3A     8791 	.ascii "value:"
      0007AD 0A                    8792 	.db 0x0a
      0007AE 0A                    8793 	.db 0x0a
      0007AF 20 20 30 78 5F 5F     8794 	.ascii "  0x__"
      0007B5 00                    8795 	.db 0x00
                                   8796 	.area CSEG    (CODE)
                                   8797 	.area CONST   (CODE)
      0007B6                       8798 ___str_27:
      0007B6 0A                    8799 	.db 0x0a
      0007B7 30 78                 8800 	.ascii "0x"
      0007B9 00                    8801 	.db 0x00
                                   8802 	.area CSEG    (CODE)
                                   8803 	.area CONST   (CODE)
      0007BA                       8804 ___str_28:
      0007BA 20 66 6F 75 6E 64     8805 	.ascii " found"
      0007C0 0A                    8806 	.db 0x0a
      0007C1 00                    8807 	.db 0x00
                                   8808 	.area CSEG    (CODE)
                                   8809 	.area CONST   (CODE)
      0007C2                       8810 ___str_29:
      0007C2 30 78 31 30 30 30 30  8811 	.ascii "0x10000"
      0007C9 00                    8812 	.db 0x00
                                   8813 	.area CSEG    (CODE)
                                   8814 	.area CONST   (CODE)
      0007CA                       8815 ___str_30:
      0007CA 0A                    8816 	.db 0x0a
      0007CB 74 69 6D 65 73 2E     8817 	.ascii "times."
      0007D1 00                    8818 	.db 0x00
                                   8819 	.area CSEG    (CODE)
                                   8820 	.area CONST   (CODE)
      0007D2                       8821 ___str_31:
      0007D2 20 6E 6F 74           8822 	.ascii " not"
      0007D6 0A                    8823 	.db 0x0a
      0007D7 66 6F 75 6E 64 20 69  8824 	.ascii "found in"
             6E
      0007DF 0A                    8825 	.db 0x0a
      0007E0 65 78 74 65 72 6E 61  8826 	.ascii "external RAM"
             6C 20 52 41 4D
      0007EC 0A                    8827 	.db 0x0a
      0007ED 00                    8828 	.db 0x00
                                   8829 	.area CSEG    (CODE)
                                   8830 	.area CONST   (CODE)
      0007EE                       8831 ___str_32:
      0007EE 20 2D                 8832 	.ascii " -"
      0007F0 0A                    8833 	.db 0x0a
      0007F1 00                    8834 	.db 0x00
                                   8835 	.area CSEG    (CODE)
                                   8836 	.area CONST   (CODE)
      0007F2                       8837 ___str_33:
      0007F2 0A                    8838 	.db 0x0a
      0007F3 00                    8839 	.db 0x00
                                   8840 	.area CSEG    (CODE)
                                   8841 	.area CONST   (CODE)
      0007F4                       8842 ___str_34:
      0007F4 20 20 28 30 29 20 2D  8843 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      000805 0A                    8844 	.db 0x0a
      000806 20 20 28 31 29 20 2D  8845 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      000817 0A                    8846 	.db 0x0a
      000818 20 20 28 45 29 20 2D  8847 	.ascii "  (E) - END"
             20 45 4E 44
      000823 0A                    8848 	.db 0x0a
      000824 00                    8849 	.db 0x00
                                   8850 	.area CSEG    (CODE)
                                   8851 	.area CONST   (CODE)
      000825                       8852 ___str_35:
      000825 0A                    8853 	.db 0x0a
      000826 45 6E 64 20 6F 66 20  8854 	.ascii "End of Data."
             44 61 74 61 2E
      000832 00                    8855 	.db 0x00
                                   8856 	.area CSEG    (CODE)
                                   8857 	.area CONST   (CODE)
      000833                       8858 ___str_36:
      000833 45 6E 64 20 6F 66 20  8859 	.ascii "End of Data"
             44 61 74 61
      00083E 00                    8860 	.db 0x00
                                   8861 	.area CSEG    (CODE)
                                   8862 	.area CONST   (CODE)
      00083F                       8863 ___str_37:
      00083F 0A                    8864 	.db 0x0a
      000840 52 65 74 75 72 6E 69  8865 	.ascii "Returning to"
             6E 67 20 74 6F
      00084C 0A                    8866 	.db 0x0a
      00084D 4D 61 69 6E 20 4D 65  8867 	.ascii "Main Menu."
             6E 75 2E
      000857 00                    8868 	.db 0x00
                                   8869 	.area CSEG    (CODE)
                                   8870 	.area CONST   (CODE)
      000858                       8871 ___str_38:
      000858 0A                    8872 	.db 0x0a
      000859 45 6E 74 65 72 20 73  8873 	.ascii "Enter source"
             6F 75 72 63 65
      000865 0A                    8874 	.db 0x0a
      000866 73 74 61 72 74 69 6E  8875 	.ascii "starting RAM"
             67 20 52 41 4D
      000872 0A                    8876 	.db 0x0a
      000873 61 64 64 72 65 73 73  8877 	.ascii "address:"
             3A
      00087B 0A                    8878 	.db 0x0a
      00087C 0A                    8879 	.db 0x0a
      00087D 20 20 30 78 5F 5F 5F  8880 	.ascii "  0x____"
             5F
      000885 00                    8881 	.db 0x00
                                   8882 	.area CSEG    (CODE)
                                   8883 	.area CONST   (CODE)
      000886                       8884 ___str_39:
      000886 0A                    8885 	.db 0x0a
      000887 0A                    8886 	.db 0x0a
      000888 4E 65 77 20 76 61 6C  8887 	.ascii "New value:"
             75 65 3A
      000892 0A                    8888 	.db 0x0a
      000893 20 20 30 78 5F 5F     8889 	.ascii "  0x__"
      000899 00                    8890 	.db 0x00
                                   8891 	.area CSEG    (CODE)
                                   8892 	.area CONST   (CODE)
      00089A                       8893 ___str_40:
      00089A 0A                    8894 	.db 0x0a
      00089B 0A                    8895 	.db 0x0a
      00089C 0A                    8896 	.db 0x0a
      00089D 0A                    8897 	.db 0x0a
      00089E 28 31 29 20 45 64 69  8898 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008AB 0A                    8899 	.db 0x0a
      0008AC 52 41 4D 20 6C 6F 63  8900 	.ascii "RAM location"
             61 74 69 6F 6E
      0008B8 0A                    8901 	.db 0x0a
      0008B9 0A                    8902 	.db 0x0a
      0008BA 00                    8903 	.db 0x00
                                   8904 	.area CSEG    (CODE)
                                   8905 	.area CONST   (CODE)
      0008BB                       8906 ___str_41:
      0008BB 28 45 29 20 45 6E 64  8907 	.ascii "(E) End"
      0008C2 00                    8908 	.db 0x00
                                   8909 	.area CSEG    (CODE)
                                   8910 	.area CONST   (CODE)
      0008C3                       8911 ___str_42:
      0008C3 0A                    8912 	.db 0x0a
      0008C4 45 6E 64 20 6F 66 20  8913 	.ascii "End of data."
             64 61 74 61 2E
      0008D0 0A                    8914 	.db 0x0a
      0008D1 00                    8915 	.db 0x00
                                   8916 	.area CSEG    (CODE)
                                   8917 	.area CONST   (CODE)
      0008D2                       8918 ___str_43:
      0008D2 0A                    8919 	.db 0x0a
      0008D3 52 65 74 75 72 6E 69  8920 	.ascii "Returning to"
             6E 67 20 74 6F
      0008DF 0A                    8921 	.db 0x0a
      0008E0 6D 61 69 6E 20 6D 65  8922 	.ascii "main menu."
             6E 75 2E
      0008EA 00                    8923 	.db 0x00
                                   8924 	.area CSEG    (CODE)
                                   8925 	.area CONST   (CODE)
      0008EB                       8926 ___str_44:
      0008EB 20 6E 6F 74           8927 	.ascii " not"
      0008EF 0A                    8928 	.db 0x0a
      0008F0 66 6F 75 6E 64 20 69  8929 	.ascii "found in"
             6E
      0008F8 0A                    8930 	.db 0x0a
      0008F9 61 64 64 72 65 73 73  8931 	.ascii "address range"
             20 72 61 6E 67 65
      000906 0A                    8932 	.db 0x0a
      000907 0A                    8933 	.db 0x0a
      000908 00                    8934 	.db 0x00
                                   8935 	.area CSEG    (CODE)
                                   8936 	.area CONST   (CODE)
      000909                       8937 ___str_45:
      000909 20 66 6F 75 6E 64 20  8938 	.ascii " found at"
             61 74
      000912 0A                    8939 	.db 0x0a
      000913 74 68 65 20 66 6F 6C  8940 	.ascii "the following"
             6C 6F 77 69 6E 67
      000920 0A                    8941 	.db 0x0a
      000921 61 64 64 72 65 73 73  8942 	.ascii "addresses:"
             65 73 3A
      00092B 0A                    8943 	.db 0x0a
      00092C 0A                    8944 	.db 0x0a
      00092D 00                    8945 	.db 0x00
                                   8946 	.area CSEG    (CODE)
                                   8947 	.area CONST   (CODE)
      00092E                       8948 ___str_46:
      00092E 45 6E 64 20 6F 66 20  8949 	.ascii "End of Data."
             44 61 74 61 2E
      00093A 00                    8950 	.db 0x00
                                   8951 	.area CSEG    (CODE)
                                   8952 	.area CONST   (CODE)
      00093B                       8953 ___str_47:
      00093B 0A                    8954 	.db 0x0a
      00093C 45 6E 74 65 72        8955 	.ascii "Enter"
      000941 0A                    8956 	.db 0x0a
      000942 73 74 61 72 74 69 6E  8957 	.ascii "starting RAM"
             67 20 52 41 4D
      00094E 0A                    8958 	.db 0x0a
      00094F 61 64 64 72 65 73 73  8959 	.ascii "address:"
             3A
      000957 0A                    8960 	.db 0x0a
      000958 0A                    8961 	.db 0x0a
      000959 20 20 20 30 78 5F 5F  8962 	.ascii "   0x____"
             5F 5F
      000962 00                    8963 	.db 0x00
                                   8964 	.area CSEG    (CODE)
                                   8965 	.area CONST   (CODE)
      000963                       8966 ___str_48:
      000963 0A                    8967 	.db 0x0a
      000964 45 6E 74 65 72 20 73  8968 	.ascii "Enter search"
             65 61 72 63 68
      000970 0A                    8969 	.db 0x0a
      000971 76 61 6C 75 65 3A     8970 	.ascii "value:"
      000977 0A                    8971 	.db 0x0a
      000978 0A                    8972 	.db 0x0a
      000979 20 20 20 30 78 5F 5F  8973 	.ascii "   0x__"
      000980 00                    8974 	.db 0x00
                                   8975 	.area CSEG    (CODE)
                                   8976 	.area CONST   (CODE)
      000981                       8977 ___str_49:
      000981 20 20 20 43 61 6D 65  8978 	.ascii "   Cameron"
             72 6F 6E
      00098B 0A                    8979 	.db 0x0a
      00098C 20 20 20 42 69 6E 69  8980 	.ascii "   Biniamow"
             61 6D 6F 77
      000997 0A                    8981 	.db 0x0a
      000998 00                    8982 	.db 0x00
                                   8983 	.area CSEG    (CODE)
                                   8984 	.area CONST   (CODE)
      000999                       8985 ___str_50:
      000999 20 20 45 43 45 4E 2D  8986 	.ascii "  ECEN-4330"
             34 33 33 30
      0009A4 0A                    8987 	.db 0x0a
      0009A5 0A                    8988 	.db 0x0a
      0009A6 00                    8989 	.db 0x00
                                   8990 	.area CSEG    (CODE)
                                   8991 	.area CONST   (CODE)
      0009A7                       8992 ___str_51:
      0009A7 28 41 29 20 52 41 4D  8993 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      0009B4 0A                    8994 	.db 0x0a
      0009B5 00                    8995 	.db 0x00
                                   8996 	.area CSEG    (CODE)
                                   8997 	.area CONST   (CODE)
      0009B6                       8998 ___str_52:
      0009B6 28 42 29 20 4D 4F 56  8999 	.ascii "(B) MOVE"
             45
      0009BE 0A                    9000 	.db 0x0a
      0009BF 00                    9001 	.db 0x00
                                   9002 	.area CSEG    (CODE)
                                   9003 	.area CONST   (CODE)
      0009C0                       9004 ___str_53:
      0009C0 28 43 29 20 43 4F 55  9005 	.ascii "(C) COUNT"
             4E 54
      0009C9 0A                    9006 	.db 0x0a
      0009CA 00                    9007 	.db 0x00
                                   9008 	.area CSEG    (CODE)
                                   9009 	.area CONST   (CODE)
      0009CB                       9010 ___str_54:
      0009CB 28 44 29 20 44 55 4D  9011 	.ascii "(D) DUMP"
             50
      0009D3 0A                    9012 	.db 0x0a
      0009D4 00                    9013 	.db 0x00
                                   9014 	.area CSEG    (CODE)
                                   9015 	.area CONST   (CODE)
      0009D5                       9016 ___str_55:
      0009D5 28 45 29 20 45 44 49  9017 	.ascii "(E) EDIT"
             54
      0009DD 0A                    9018 	.db 0x0a
      0009DE 00                    9019 	.db 0x00
                                   9020 	.area CSEG    (CODE)
                                   9021 	.area CONST   (CODE)
      0009DF                       9022 ___str_56:
      0009DF 28 46 29 20 46 49 4E  9023 	.ascii "(F) FIND"
             44
      0009E7 0A                    9024 	.db 0x0a
      0009E8 00                    9025 	.db 0x00
                                   9026 	.area CSEG    (CODE)
                                   9027 	.area CONST   (CODE)
      0009E9                       9028 ___str_57:
      0009E9 53 70 72 69 6E 67 20  9029 	.ascii "Spring 2021"
             32 30 32 31
      0009F4 00                    9030 	.db 0x00
                                   9031 	.area CSEG    (CODE)
                                   9032 	.area XINIT   (CODE)
                                   9033 	.area CABS    (ABS,CODE)
